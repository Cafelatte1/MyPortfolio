{"cells":[{"cell_type":"markdown","metadata":{"id":"bi5RrJ13y11C"},"source":["# RAPIDS Install"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8ZgKeE-8y1cN"},"outputs":[],"source":["# # This get the RAPIDS-Colab install files and test check your GPU.  Run this and the next cell only.\n","# # Please read the output of this cell.  If your Colab Instance is not RAPIDS compatible, it will warn you and give you remediation steps.\n","# !git clone https://github.com/rapidsai/rapidsai-csp-utils.git\n","# !python rapidsai-csp-utils/colab/env-check.py\n","\n","# # This will update the Colab environment and restart the kernel.  Don't run the next cell until you see the session crash.\n","# !bash rapidsai-csp-utils/colab/update_gcc.sh\n","# import os\n","# os._exit(00)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cv_mXDu0y8Qh"},"outputs":[],"source":["# # This will install CondaColab.  This will restart your kernel one last time.  Run this cell by itself and only run the next cell once you see the session crash.\n","# import condacolab\n","# condacolab.install()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p4oHwlRIy-b2"},"outputs":[],"source":["# # you can now run the rest of the cells as normal\n","# import condacolab\n","# condacolab.check()\n","\n","# # Installing RAPIDS is now 'python rapidsai-csp-utils/colab/install_rapids.py <release> <packages>'\n","# # The <release> options are 'stable' and 'nightly'.  Leaving it blank or adding any other words will default to stable.\n","# !python rapidsai-csp-utils/colab/install_rapids.py stable"]},{"cell_type":"markdown","metadata":{"id":"4kPoYaEW-VNV"},"source":["# matplot korean patch"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2v3KXqwH-U4h"},"outputs":[],"source":["# !sudo apt-get install -y fonts-nanum\n","# !sudo fc-cache -fv\n","# !rm ~/.cache/matplotlib -rf"]},{"cell_type":"markdown","metadata":{"id":"1YabxNE7gPsR"},"source":["# install packages"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wL_iJtS1gPZ-"},"outputs":[],"source":["import os\n","# python global seed\n","os.environ['PYTHONHASHSEED'] = str(42)\n","# tensorflow seed (not working for GPU)\n","# os.environ['TF_DETERMINISTIC_OPS'] = '1'\n","# os.environ['TF_CUDNN_DETERMINISTIC'] = '1'\n","# RAPIDS config\n","os.environ['NUMBAPRO_NVVM'] = '/usr/local/cuda/nvvm/lib64/libnvvm.so'\n","os.environ['NUMBAPRO_LIBDEVICE'] = '/usr/local/cuda/nvvm/libdevice/'\n","os.environ['CONDA_PREFIX'] = '/usr/local'\n","# weight and bias\n","os.environ[\"WANDB_API_KEY\"] = \"b838b62906ab267778c6e05b913ba6c4a27699b2\""]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":28079,"status":"ok","timestamp":1652971811936,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"0wAbq2XKgPXx","outputId":"a1c92ecb-0d67-4c8c-b5a0-3641bb5a3246"},"outputs":[{"name":"stdout","output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","# TextVectorization layer in tf 2.6 don't support \"sparse=True\" option which is used on TF-IDF\n","# !pip install -q tensorflow==2.6\n","!pip install -q tensorflow==2.8\n","!pip install -q tensorflow-recommenders==0.6\n","# !pip install -q scann==1.2.3\n","!pip install -q tensorflow-datasets\n","!pip install -q tensorflow-addons\n","!pip install -q tensorflow-hub\n","!pip install -q keras-tuner\n","!pip install -q statsmodels\n","!pip install -q optuna\n","!pip install -q wandb\n","!pip install -q missingpy"]},{"cell_type":"markdown","metadata":{"id":"JNEEXszigDeY"},"source":["# loading libraries"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EPAeXXs4mN37"},"outputs":[],"source":["def config_missingpy():\n","    try:\n","        with open(\"/usr/local/lib/python3.7/site-packages/missingpy/knnimpute.py\", 'r') as file:\n","        # read a list of lines into data\n","            data = file.readlines()\n","            # now change the 2nd line, note that you have to add a newline\n","            data[12] = 'from sklearn.neighbors._base import _check_weights\\n'\n","            data[13] = 'from sklearn.neighbors._base import _get_weights\\n'\n","        # and write everything back\n","        with open(\"/usr/local/lib/python3.7/site-packages/missingpy/knnimpute.py\", 'w') as file:\n","            file.writelines(data)\n","    except:\n","        print(\"path error : /usr/local/lib/python3.7/site-packages/missingpy/knnimpute.py\")\n","    try:\n","        with open(\"/usr/local/lib/python3.7/dist-packages/missingpy/knnimpute.py\", 'r') as file:\n","        # read a list of lines into data\n","            data = file.readlines()\n","            # now change the 2nd line, note that you have to add a newline\n","            data[12] = 'from sklearn.neighbors._base import _check_weights\\n'\n","            data[13] = 'from sklearn.neighbors._base import _get_weights\\n'\n","        # and write everything back\n","        with open(\"/usr/local/lib/python3.7/dist-packages/missingpy/knnimpute.py\", 'w') as file:\n","            file.writelines(data)\n","    except:\n","        print(\"path error : /usr/local/lib/python3.7/site-packages/missingpy/knnimpute.py\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7485,"status":"ok","timestamp":1652971819417,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"OWBG0B0-fyWo","outputId":"2c62b86f-5fe2-41f5-db30-fbc5e7a53cf3"},"outputs":[{"name":"stdout","output_type":"stream","text":["path error : /usr/local/lib/python3.7/site-packages/missingpy/knnimpute.py\n","RAPIDS Import ERROR\n","matplotlib korean patch failed\n","Found GPU at: /device:GPU:0\n"]}],"source":["import sys\n","import cv2\n","import shutil\n","from glob import glob\n","from IPython.display import Image, display\n","import gc\n","import wandb\n","from scipy import stats\n","from scipy.special import boxcox\n","\n","from multiprocessing import cpu_count\n","import copy\n","import pickle\n","import warnings\n","from datetime import datetime, timedelta\n","from time import time, sleep, mktime\n","from matplotlib import font_manager as fm, rc, rcParams\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from tqdm import tqdm\n","import re\n","import random as rnd\n","import psutil\n","from optuna import Trial, create_study\n","from optuna.samplers import TPESampler\n","\n","import numpy as np\n","from numpy import array, nan, random as np_rnd, where\n","import pandas as pd\n","from pandas import DataFrame as dataframe, Series as series, isna, read_csv\n","from pandas.tseries.offsets import DateOffset\n","\n","from sklearn.model_selection import train_test_split as tts, StratifiedKFold, StratifiedShuffleSplit\n","from sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler, MinMaxScaler, RobustScaler, KBinsDiscretizer\n","from sklearn import metrics\n","from sklearn.compose import ColumnTransformer\n","from sklearn.cluster import KMeans as skl_kmeans\n","from sklearn.metrics import silhouette_score as skl_silhouette_score\n","config_missingpy(); from missingpy import MissForest\n","from sklearn.impute import KNNImputer\n","from optuna import Trial, create_study\n","\n","try:\n","    import cudf as cd\n","    import cupy as cp\n","    from cuml.cluster import KMeans\n","    from cuml.neighbors import NearestNeighbors\n","    from cuml.metrics.cluster import silhouette_score\n","except:\n","    print(\"RAPIDS Import ERROR\")\n","\n","# ===== tensorflow =====\n","import tensorflow as tf\n","from tensorflow import random as tf_rnd\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras import layers\n","from tensorflow.keras import activations\n","from tensorflow.keras import optimizers\n","from tensorflow.keras import metrics as tf_metrics\n","from tensorflow.keras import callbacks as tf_callbacks\n","from tqdm.keras import TqdmCallback\n","import tensorflow_addons as tfa\n","from tensorflow.keras.utils import plot_model\n","from keras.utils.layer_utils import count_params\n","\n","# import keras_tuner as kt\n","# from keras_tuner import HyperModel\n","import tensorflow_hub as tf_hub\n","import tensorflow_recommenders as tfrs\n","\n","warnings.filterwarnings(action='ignore')\n","rcParams['axes.unicode_minus'] = False\n","pd.set_option('display.max_columns', 100)\n","pd.set_option('display.max_rows', 100)\n","pd.set_option('display.width', 1000)\n","pd.set_option('max_colwidth', 200)\n","plt.rc('font', family='NanumSquareB')\n","\n","# font setting\n","try:\n","    font_path = '/usr/share/fonts/truetype/nanum/NanumSquareB.ttf'\n","    font_obj = fm.FontProperties(fname=font_path, size=12).get_name()\n","    rc('font', family=font_obj)\n","except:\n","    print(\"matplotlib korean patch failed\")\n","\n","# GPU check\n","device_name = tf.test.gpu_device_name()\n","if device_name != '/device:GPU:0':\n","    print('GPU device not found')\n","else:\n","    print('Found GPU at: {}'.format(device_name))\n","\n","# GPU memory setting\n","gpus = tf.config.list_physical_devices('GPU')\n","if gpus:\n","  try:\n","    tf.config.experimental.set_memory_growth(gpus[0], True)\n","  except RuntimeError as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"NAhgen7zgmM5"},"source":["# loading custom functions"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"36xRk64Rgmdu"},"outputs":[],"source":["# ===== utility functions =====\n","# label encoding for categorical column with excepting na value\n","def seed_everything(seed=42):\n","    # python random module\n","    rnd.seed(seed)\n","    # numpy random\n","    np_rnd.seed(seed)\n","    # tf random\n","    tf_rnd.set_seed(seed)\n","    # RAPIDS random\n","    try:\n","        cp.random.seed(seed)\n","    except:\n","        pass\n","def which(bool_list):\n","    return where(bool_list)[0]\n","def easyIO(x=None, path=None, op=\"r\"):\n","    tmp = None\n","    if op == \"r\":\n","        with open(path, \"rb\") as f:\n","            tmp = pickle.load(f)\n","        return tmp\n","    elif op == \"w\":\n","        with open(path, \"wb\") as f:\n","            pickle.dump(x, f)\n","    else:\n","        print(\"Unknown operation type\")\n","def diff(first, second):\n","    second = set(second)\n","    return [item for item in first if item not in second]\n","def findIdx(data_x, col_names):\n","    return [int(i) for i, j in enumerate(data_x) if j in col_names]\n","def orderElems(for_order, using_ref):\n","    return [i for i in using_ref if i in for_order]\n","# concatenate by row\n","def cbr(df1, df2):\n","    if type(df1) == series:\n","        tmp_concat = series(pd.concat([dataframe(df1), dataframe(df2)], axis=0, ignore_index=True).iloc[:,0])\n","        tmp_concat.reset_index(drop=True, inplace=True)\n","    elif type(df1) == dataframe:\n","        tmp_concat = pd.concat([df1, df2], axis=0, ignore_index=True)\n","        tmp_concat.reset_index(drop=True, inplace=True)\n","    elif type(df1) == np.ndarray:\n","        tmp_concat = np.concatenate([df1, df2], axis=0)\n","    else:\n","        print(\"Unknown Type: return 1st argument\")\n","        tmp_concat = df1\n","    return tmp_concat\n","def change_width(ax, new_value):\n","    for patch in ax.patches :\n","        current_width = patch.get_width()\n","        adj_value = current_width - new_value\n","        # we change the bar width\n","        patch.set_width(new_value)\n","        # we recenter the bar\n","        patch.set_x(patch.get_x() + adj_value * .5)\n","def week_of_month(date):\n","    month = date.month\n","    week = 0\n","    while date.month == month:\n","        week += 1\n","        date -= timedelta(days=7)\n","    return week\n","def getSeason(date):\n","    month = date.month\n","    if month in [3, 4, 5]:\n","        return \"Spring\"\n","    elif month in [6, 7, 8]:\n","        return \"Summer\"\n","    elif month in [9, 10, 11]:\n","        return \"Fall\"\n","    else:\n","        return \"Winter\"\n","def createFolder(directory):\n","    try:\n","        if not os.path.exists(directory):\n","            os.makedirs(directory)\n","    except OSError:\n","        print('Error: Creating directory. ' + directory)\n","def softmax(x):\n","    max = np.max(x, axis=1, keepdims=True)  # returns max of each row and keeps same dims\n","    e_x = np.exp(x - max)  # subtracts each row with its max value\n","    sum = np.sum(e_x, axis=1, keepdims=True)  # returns sum of each row and keeps same dims\n","    f_x = e_x / sum\n","    return f_x\n","def sigmoid(x):\n","    return 1/(1 + np.exp(-x))\n","def dispPerformance(result_dic):\n","    perf_table = dataframe()\n","    index_names = []\n","    for k, v in result_dic.items():\n","        index_names.append(k)\n","        perf_table = pd.concat([perf_table, series(v[\"performance\"]).to_frame().T], ignore_index=True, axis=0)\n","    perf_table.index = index_names\n","    perf_table.sort_values(perf_table.columns[0], inplace=True)\n","    print(perf_table)\n","    return perf_table\n","def powspace(start, stop, power, num):\n","    start = np.power(start, 1/float(power))\n","    stop = np.power(stop, 1/float(power))\n","    return np.power(np.linspace(start, stop, num=num), power)\n","def xgb_custom_lossfunction(alpha = 1):\n","    def support_under_mse(label, pred):\n","        # grad : 1차 미분\n","        # hess : 2차 미분\n","        residual = (label - pred).astype(\"float\")\n","        grad = np.where(residual > 0, -2 * alpha * residual, -2 * residual)\n","        hess = np.where(residual > 0, 2 * alpha, 2.0)\n","        return grad, hess\n","    return support_under_mse\n","def pd_flatten(df):\n","    df = df.unstack()\n","    df.index = [str(i) + \"_\" + str(j) for i, j in df.index]\n","    return df\n","def tf_losses_rmse(y_true, y_pred, sample_weight=None):\n","    return tf.sqrt(tf.reduce_mean((y_true - y_pred) ** 2)) if sample_weight is None else tf.sqrt(tf.reduce_mean(((y_true - y_pred) ** 2) * sample_weight))\n","def tf_loss_nmae(y_true, y_pred, sample_weight=False):\n","    mae = tf.reduce_mean(tf.math.abs(y_true - y_pred))\n","    score = tf.math.divide(mae, tf.reduce_mean(tf.math.abs(y_true)))\n","    return score\n","def text_extractor(string, lang=\"eng\", spacing=True):\n","    # # 괄호를 포함한 괄호 안 문자 제거 정규식\n","    # re.sub(r'\\([^)]*\\)', '', remove_text)\n","    # # <>를 포함한 <> 안 문자 제거 정규식\n","    # re.sub(r'\\<[^)]*\\>', '', remove_text)\n","    if lang == \"eng\":\n","        text_finder = re.compile('[^ A-Za-z]') if spacing else re.compile('[^A-Za-z]')\n","    elif lang == \"kor\":\n","        text_finder = re.compile('[^ ㄱ-ㅣ가-힣+]') if spacing else re.compile('[^ㄱ-ㅣ가-힣+]')\n","    # default : kor + eng\n","    else:\n","        text_finder = re.compile('[^ A-Za-zㄱ-ㅣ가-힣+]') if spacing else re.compile('[^A-Za-zㄱ-ㅣ가-힣+]')\n","    return text_finder.sub('', string)\n","def memory_usage(message='debug'):\n","    # current process RAM usage\n","    p = psutil.Process()\n","    rss = p.memory_info().rss / 2 ** 20 # Bytes to MB\n","    print(f\"[{message}] memory usage: {rss: 10.3f} MB\")\n","    return rss\n","class MyLabelEncoder:\n","    def __init__(self, preset={}):\n","        # dic_cat format -> {\"col_name\": {\"value\": replace}}\n","        self.dic_cat = preset\n","    def fit_transform(self, data_x, col_names):\n","        tmp_x = copy.deepcopy(data_x)\n","        for i in col_names:\n","            # if key is not in dic, update dic\n","            if i not in self.dic_cat.keys():\n","                tmp_dic = dict.fromkeys(sorted(set(tmp_x[i]).difference([nan])))\n","                label_cnt = 0\n","                for j in tmp_dic.keys():\n","                    tmp_dic[j] = label_cnt\n","                    label_cnt += 1\n","                self.dic_cat[i] = tmp_dic\n","            # transform value which is not in dic to nan\n","            tmp_x[i] = tmp_x[i].astype(\"object\")\n","            conv = tmp_x[i].replace(self.dic_cat[i])\n","            for conv_idx, j in enumerate(conv):\n","                if j not in self.dic_cat[i].values():\n","                    conv[conv_idx] = nan\n","            # final return\n","            tmp_x[i] = conv.astype(\"float\")\n","        return tmp_x\n","    def transform(self, data_x):\n","        tmp_x = copy.deepcopy(data_x)\n","        for i in self.dic_cat.keys():\n","            # transform value which is not in dic to nan\n","            tmp_x[i] = tmp_x[i].astype(\"object\")\n","            conv = tmp_x[i].replace(self.dic_cat[i])\n","            for conv_idx, j in enumerate(conv):\n","                if j not in self.dic_cat[i].values():\n","                    conv[conv_idx] = nan\n","            # final return\n","            tmp_x[i] = conv.astype(\"float\")\n","        return tmp_x\n","    def clear(self):\n","        self.dic_cat = {}\n","class MyOneHotEncoder:\n","    def __init__(self, label_preset={}):\n","        self.dic_cat = {}\n","        self.label_preset = label_preset\n","    def fit_transform(self, data_x, col_names):\n","        tmp_x = dataframe()\n","        for i in data_x:\n","            if i not in col_names:\n","                tmp_x = pd.concat([tmp_x, dataframe(data_x[i])], axis=1)\n","            else:\n","                if not ((data_x[i].dtype.name == \"object\") or (data_x[i].dtype.name == \"category\")):\n","                    print(F\"WARNING : {i} is not object or category\")\n","                self.dic_cat[i] = OneHotEncoder(sparse=False, handle_unknown=\"ignore\")\n","                conv = self.dic_cat[i].fit_transform(dataframe(data_x[i])).astype(\"int\")\n","                col_list = []\n","                for j in self.dic_cat[i].categories_[0]:\n","                    if i in self.label_preset.keys():\n","                        for k, v in self.label_preset[i].items():\n","                            if v == j:\n","                                col_list.append(str(i) + \"_\" + str(k))\n","                    else:\n","                        col_list.append(str(i) + \"_\" + str(j))\n","                conv = dataframe(conv, columns=col_list)\n","                tmp_x = pd.concat([tmp_x, conv], axis=1)\n","        return tmp_x\n","    def transform(self, data_x):\n","        tmp_x = dataframe()\n","        for i in data_x:\n","            if not i in list(self.dic_cat.keys()):\n","                tmp_x = pd.concat([tmp_x, dataframe(data_x[i])], axis=1)\n","            else:\n","                if not ((data_x[i].dtype.name == \"object\") or (data_x[i].dtype.name == \"category\")):\n","                    print(F\"WARNING : {i} is not object or category\")\n","                conv = self.dic_cat[i].transform(dataframe(data_x[i])).astype(\"int\")\n","                col_list = []\n","                for j in self.dic_cat[i].categories_[0]:\n","                    if i in self.label_preset.keys():\n","                        for k, v in self.label_preset[i].items():\n","                            if v == j: col_list.append(str(i) + \"_\" + str(k))\n","                    else:\n","                        col_list.append(str(i) + \"_\" + str(j))\n","                conv = dataframe(conv, columns=col_list)\n","                tmp_x = pd.concat([tmp_x, conv], axis=1)\n","        return tmp_x\n","    def clear(self):\n","        self.dic_cat = {}\n","        self.label_preset = {}\n","class MyKNNImputer:\n","    def __init__(self, k=5):\n","        self.imputer = KNNImputer(n_neighbors=k)\n","        self.dic_cat = {}\n","    def fit_transform(self, x, cat_vars=None):\n","        if cat_vars is None:\n","            x_imp = dataframe(self.imputer.fit_transform(x), columns=x.columns)\n","        else:\n","            naIdx = dict.fromkeys(cat_vars)\n","            for i in cat_vars:\n","                self.dic_cat[i] = diff(list(sorted(set(x[i]))), [nan])\n","                naIdx[i] = list(which(array(x[i].isna())))\n","            x_imp = dataframe(self.imputer.fit_transform(x), columns=x.columns)\n","\n","            # if imputed categorical value are not in the range, adjust the value\n","            for i in cat_vars:\n","                x_imp[i] = x_imp[i].apply(lambda x: int(round(x, 0)))\n","                for j in naIdx[i]:\n","                    if x_imp[i][j] not in self.dic_cat[i]:\n","                        if x_imp[i][j] < self.dic_cat[i][0]:\n","                            x_imp[i][naIdx[i]] = self.dic_cat[i][0]\n","                        elif x_imp[i][j] > self.dic_cat[i][0]:\n","                            x_imp[i][naIdx[i]] = self.dic_cat[i][len(self.dic_cat[i]) - 1]\n","        return x_imp\n","    def transform(self, x):\n","        if len(self.dic_cat.keys()) == 0:\n","            x_imp = dataframe(self.imputer.transform(x), columns=x.columns)\n","        else:\n","            naIdx = dict.fromkeys(self.dic_cat.keys())\n","            for i in self.dic_cat.keys():\n","                naIdx[i] = list(which(array(x[i].isna())))\n","            x_imp = dataframe(self.imputer.transform(x), columns=x.columns)\n","\n","            # if imputed categorical value are not in the range, adjust the value\n","            for i in self.dic_cat.keys():\n","                x_imp[i] = x_imp[i].apply(lambda x: int(round(x, 0)))\n","                for j in naIdx[i]:\n","                    if x_imp[i][j] not in self.dic_cat[i]:\n","                        if x_imp[i][j] < self.dic_cat[i][0]:\n","                            x_imp[i][naIdx[i]] = self.dic_cat[i][0]\n","                        elif x_imp[i][j] > self.dic_cat[i][0]:\n","                            x_imp[i][naIdx[i]] = self.dic_cat[i][len(self.dic_cat[i]) - 1]\n","        return x_imp\n","    def clear(self):\n","        self.imputer = None\n","        self.dic_cat = {}\n","def remove_outlier(df, std=3, mode=\"remove\"):\n","    tmp_df = df.copy()\n","    if mode == \"remove\":\n","        outlier_mask = (np.abs(stats.zscore(tmp_df)) > std).all(axis=1)\n","        print(\"found outlier :\", outlier_mask.sum())\n","        tmp_df = tmp_df[~outlier_mask]\n","    elif mode == \"interpolate\":\n","        tmp_outlier = []\n","        for i in tmp_df:\n","            outlier_mask = (np.abs(stats.zscore(tmp_df[i])) > std)\n","            tmp_outlier.append(outlier_mask.sum())\n","            if tmp_outlier[-1] == 0:\n","                continue\n","            tmp_df[i][outlier_mask] = np.nan\n","            tmp_df[i] = tmp_df[i].interpolate(method='linear').bfill()\n","        print(\"found outlier :\", np.sum(outlier_mask))\n","    return tmp_df\n","\n","seed_everything()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4vbCHUCqp5gj"},"outputs":[],"source":["# class RandomCropAndResize(tf.keras.layers.Layer):\n","#     def __init__(self, crop_ratio=0.8, resize_img_size=128, resize_channels=3, **kwargs):\n","#         super(RandomCropAndResize, self).__init__(**kwargs)\n","#         self.img_size = resize_img_size\n","#         self.channels = resize_channels\n","#         self.crop_size = int(self.img_size * self.crop_ratio)\n","#     def call(self, input_image, training=False):\n","#         if training:\n","#             input_image = tf.image.random_crop(input_image, [self.crop_size, self.crop_size, self.channels])\n","#             input_image = tf.image.resize(input_image, [self.resize_img_size, self.resize_img_size])\n","#             return input_image\n","#         else:\n","#             return input_image\n","#     def get_config(self):\n","#         config = super().get_config()\n","#         config.update({\n","#             \"img_size\": self.img_size,\n","#             \"channels\": self.channels,\n","#             \"crop_size\": self.crop_size\n","#         })\n","#         return config\n","def RandomAngleDistortion(zoom_factor=0.25, rotation_factor=0.25, flip_type=\"horizontal_and_vertical\", flip_flag=True, seed=42):\n","    if flip_flag:\n","        model = Sequential([\n","            layers.RandomZoom(zoom_factor, zoom_factor, seed=seed),\n","            layers.RandomRotation(factor=(-rotation_factor, rotation_factor)),\n","            layers.RandomFlip(mode=flip_type, seed=seed)\n","        ])\n","    else:\n","        model = Sequential([\n","            layers.RandomZoom(zoom_factor, zoom_factor, seed=seed),\n","            layers.RandomRotation(factor=(-rotation_factor, rotation_factor))\n","        ]) \n","    return model\n","class RandomColorDistortion(tf.keras.layers.Layer):\n","    def __init__(self, saturation_factor=(0.75, 1.25), contrast_factor=(0.75, 1.25), brightness_factor=0.25, hue_factor=0.25, hue_flag=True, seed=42, **kwargs):\n","        super(RandomColorDistortion, self).__init__(**kwargs)\n","        self.saturation_factor = saturation_factor\n","        self.contrast_factor = contrast_factor\n","        self.brightness_factor = brightness_factor\n","        self.hue_factor = hue_factor\n","        self.hue_flag = hue_flag\n","        self.seed = seed\n","    def call(self, input_image, training=False):\n","        if training:\n","            input_image = tf.image.random_saturation(input_image, self.saturation_factor[0], self.saturation_factor[1])\n","            input_image = tf.image.random_contrast(input_image, self.contrast_factor[0], self.contrast_factor[1])\n","            input_image = tf.image.random_brightness(input_image, self.brightness_factor)\n","            input_image = tf.image.random_hue(input_image, self.hue_factor) if self.hue_flag else input_image\n","            return input_image\n","        else:\n","            return input_image\n","    def get_config(self):\n","        config = super().get_config()\n","        config.update({\n","            \"saturation_factor\": self.saturation_factor,\n","            \"contrast_factor\": self.contrast_factor,\n","            \"brightness_factor\": self.brightness_factor,\n","            \"hue_factor\": self.hue_factor,\n","            \"hue_flag\": self.hue_flag,\n","            \"seed\": self.seed,\n","        })\n","        return config\n","# class RandomColorDistortion(tf.keras.layers.Layer):\n","#     def __init__(self, saturation_factor=(0.75, 1.25), contrast_factor=(0.75, 1.25), brightness_factor=0.25, hue_factor=0.25, hue_flag=True, seed=(42,42), **kwargs):\n","#         super(RandomColorDistortion, self).__init__(**kwargs)\n","#         self.saturation_factor = saturation_factor\n","#         self.contrast_factor = contrast_factor\n","#         self.brightness_factor = brightness_factor\n","#         self.hue_factor = hue_factor\n","#         self.hue_flag = hue_flag\n","#         self.seed = seed\n","#     def call(self, input_image, training=False):\n","#         if training:\n","#             input_image = tf.image.stateless_random_saturation(input_image, self.saturation_factor[0], self.saturation_factor[1], seed=self.seed)\n","#             input_image = tf.image.stateless_random_contrast(input_image, self.contrast_factor[0], self.contrast_factor[1], seed=self.seed)\n","#             input_image = tf.image.stateless_random_brightness(input_image, self.brightness_factor, seed=self.seed)\n","#             input_image = tf.image.stateless_random_hue(input_image, self.hue_factor, seed=self.seed) if self.hue_flag else input_image\n","#             return input_image\n","#         else:\n","#             return input_image\n","#     def get_config(self):\n","#         config = super().get_config()\n","#         config.update({\n","#             \"saturation_factor\": self.saturation_factor,\n","#             \"contrast_factor\": self.contrast_factor,\n","#             \"brightness_factor\": self.brightness_factor,\n","#             \"hue_factor\": self.hue_factor,\n","#             \"hue_flag\": self.hue_flag,\n","#             \"seed\": self.seed\n","#         })\n","#         return config"]},{"cell_type":"markdown","metadata":{"id":"gVw1gnJSgDuR"},"source":["# loading datasets"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gUFRmUn74904"},"outputs":[],"source":["# 시간별 데이터 압축 방법 - 아이디어\n","# flatten\n","# 이동평균 flatten\n","# max\n","# min\n","# avg\n","# median\n","# 절삭 평균 (n% 극단값 제거 후 평균)\n","# 변화율\n","# 모델 ftting 후 해당 모델의 파라미터 값 (ex. 선형회귀모델의 계수, 절편)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ay7GYh9-k4Eh"},"outputs":[],"source":["folder_path = \"/content/drive/MyDrive/Colab Notebooks/projects/Dacon/plant_leaf_weight_prediction/\"\n","seed_everything()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-zwFwDdabVs0"},"outputs":[],"source":["root_path_train = \"/content/drive/MyDrive/Colab Notebooks/projects/Dacon/plant_leaf_weight_prediction/train_test_set/train/\"\n","root_path_test = \"/content/drive/MyDrive/Colab Notebooks/projects/Dacon/plant_leaf_weight_prediction/train_test_set/test/\"\n","img_root_path = \"/content/drive/MyDrive/Colab Notebooks/projects/Dacon/plant_leaf_weight_prediction/train_test_set/\"\n","def get_image_path(file_name, train=True):\n","    if train:\n","        return img_root_path + \"train/\" + file_name.split(\"_\")[0] + \"/image/\" + file_name\n","    else:\n","        return img_root_path + \"test/\" + \"image/\" + file_name"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"m48MOgxzPxIH"},"outputs":[],"source":["short_term = 10\n","group_minutes = 15\n","group_nums = int(1440 / group_minutes)\n","group_type = \"last\""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"P7JY1wKcrhbR"},"outputs":[],"source":["def get_data_dic(short_term=5, group_minutes=60, group_type=\"median\", train=True):\n","    # 'short_term' is deprecated\n","    num_groups = int(1440 / group_minutes)\n","    concat_dic = dict.fromkeys([\"id_table\", \"metadata_short\", \"target\"] + [\"metadata_timegroup_\" + str(i) for i in range(num_groups)], dataframe().copy())\n","    if train:\n","        for root_case_path in os.listdir(root_path_train):\n","            tmp_img_path = root_path_train + root_case_path + \"/image/\"\n","            tmp_meta_path = root_path_train + root_case_path + \"/meta/\"\n","            for img_obj, meta_obj in zip(os.listdir(tmp_img_path), os.listdir(tmp_meta_path)):\n","                rawdata_meta = read_csv(tmp_meta_path + meta_obj, parse_dates=[\"시간\"])\n","                concat_dic[\"id_table\"] = concat_dic[\"id_table\"].append([[img_obj, rawdata_meta[\"시간\"].iloc[0]]])\n","                # interval data\n","                for i in range(num_groups):\n","                    if group_type==\"median\":\n","                        tmp_rawdata = rawdata_meta.iloc[(group_minutes * i):(group_minutes * (i+1))]\n","                        tmp_metadata = tmp_rawdata.select_dtypes([\"float32\", \"float64\"]).median().to_frame().T.astype(\"float32\")\n","                        tmp_metadata[\"id\"] = [img_obj]\n","                        tmp_metadata[\"timestamp\"] = [tmp_rawdata[\"시간\"].iloc[0]]\n","                    elif group_type==\"first\":\n","                        tmp_rawdata = rawdata_meta.iloc[(group_minutes * i)]\n","                        tmp_metadata = tmp_rawdata.to_frame().T\n","                        tmp_metadata.iloc[:,1:] = tmp_metadata.iloc[:,1:].astype(\"float32\")\n","                        tmp_metadata[tmp_metadata.select_dtypes([\"float32\", \"float64\"]).columns] = tmp_metadata.select_dtypes([\"float32\", \"float64\"]).astype(\"float32\")\n","                        tmp_metadata.columns = [\"timestamp\"] + list(tmp_metadata.columns[1:])\n","                        tmp_metadata[\"id\"] = [img_obj]\n","                    elif group_type==\"last\":\n","                        tmp_rawdata = rawdata_meta.iloc[(group_minutes * (i+1))-1]\n","                        tmp_metadata = tmp_rawdata.to_frame().T\n","                        tmp_metadata.iloc[:,1:] = tmp_metadata.iloc[:,1:].astype(\"float32\")\n","                        tmp_metadata[tmp_metadata.select_dtypes([\"float32\", \"float64\"]).columns] = tmp_metadata.select_dtypes([\"float32\", \"float64\"]).astype(\"float32\")\n","                        tmp_metadata.columns = [\"timestamp\"] + list(tmp_metadata.columns[1:])\n","                        tmp_metadata[\"id\"] = [img_obj]\n","                    concat_dic[\"metadata_timegroup_\" + str(i)] = concat_dic[\"metadata_timegroup_\" + str(i)].append(tmp_metadata)\n","                # # short term data\n","                # tmp_rawdata = rawdata_meta.iloc[:short_term]\n","                # tmp_metadata = tmp_rawdata.select_dtypes([\"float32\", \"float64\"]).median().to_frame().T.astype(\"float32\")\n","                # tmp_metadata[\"id\"] = [img_obj]\n","                # tmp_metadata[\"timestamp\"] = [tmp_rawdata[\"시간\"].iloc[0]]\n","                # concat_dic[\"metadata_short\"] = concat_dic[\"metadata_short\"].append(tmp_metadata)\n","            concat_dic[\"target\"] = concat_dic[\"target\"].append(read_csv(root_path_train + root_case_path + \"/label.csv\"))\n","        concat_dic[\"id_table\"].columns = [\"id\", \"timestamp\"]\n","        concat_dic[\"id_table\"].reset_index(drop=True, inplace=True)\n","        concat_dic[\"target\"].columns = [\"id\", \"timestamp\"]\n","        concat_dic[\"target\"].reset_index(drop=True, inplace=True)\n","        # concat_dic[\"metadata_short\"] = concat_dic[\"metadata_short\"][[\"id\", \"timestamp\"] + list(concat_dic[\"metadata_short\"].columns[:-2])]\n","        # concat_dic[\"metadata_short\"].reset_index(drop=True, inplace=True)\n","        concat_dic[\"id_table\"] = concat_dic[\"id_table\"].merge(concat_dic[\"target\"], how=\"left\", on=\"id\")\n","        concat_dic[\"id_table\"].columns = [\"id\", \"timestamp\", \"target\"]\n","        concat_dic[\"id_table\"][\"target\"] = concat_dic[\"id_table\"][\"target\"].astype(\"float32\")\n","        for i in range(num_groups):\n","            concat_dic[\"metadata_timegroup_\" + str(i)] = concat_dic[\"metadata_timegroup_\" + str(i)][[\"id\", \"timestamp\"] + list(concat_dic[\"metadata_timegroup_\" + str(i)].drop([\"id\", \"timestamp\"], axis=1).columns)]\n","            concat_dic[\"metadata_timegroup_\" + str(i)].reset_index(drop=True, inplace=True)\n","        return concat_dic\n","    else:\n","        tmp_img_path = root_path_test + \"image/\"\n","        tmp_meta_path = root_path_test + \"meta/\"\n","        for img_obj, meta_obj in zip(os.listdir(tmp_img_path), os.listdir(tmp_meta_path)):  \n","                rawdata_meta = read_csv(tmp_meta_path + meta_obj, parse_dates=[\"시간\"])\n","                concat_dic[\"id_table\"] = concat_dic[\"id_table\"].append([[img_obj, rawdata_meta[\"시간\"].iloc[0]]])\n","                # interval data\n","                for i in range(num_groups):\n","                    if group_type==\"median\":\n","                        tmp_rawdata = rawdata_meta.iloc[(group_minutes * i):(group_minutes * (i+1))]\n","                        tmp_metadata = tmp_rawdata.select_dtypes([\"float32\", \"float64\"]).median().to_frame().T.astype(\"float32\")\n","                        tmp_metadata[\"id\"] = [img_obj]\n","                        tmp_metadata[\"timestamp\"] = [tmp_rawdata[\"시간\"].iloc[0]]\n","                    elif group_type==\"first\":\n","                        tmp_rawdata = rawdata_meta.iloc[(group_minutes * i)]\n","                        tmp_metadata = tmp_rawdata.to_frame().T\n","                        tmp_metadata.iloc[:,1:] = tmp_metadata.iloc[:,1:].astype(\"float32\")\n","                        tmp_metadata[tmp_metadata.select_dtypes([\"float32\", \"float64\"]).columns] = tmp_metadata.select_dtypes([\"float32\", \"float64\"]).astype(\"float32\")\n","                        tmp_metadata.columns = [\"timestamp\"] + list(tmp_metadata.columns[1:])\n","                        tmp_metadata[\"id\"] = [img_obj]\n","                    elif group_type==\"last\":\n","                        tmp_rawdata = rawdata_meta.iloc[(group_minutes * (i+1))-1]\n","                        tmp_metadata = tmp_rawdata.to_frame().T\n","                        tmp_metadata.iloc[:,1:] = tmp_metadata.iloc[:,1:].astype(\"float32\")\n","                        tmp_metadata[tmp_metadata.select_dtypes([\"float32\", \"float64\"]).columns] = tmp_metadata.select_dtypes([\"float32\", \"float64\"]).astype(\"float32\")\n","                        tmp_metadata.columns = [\"timestamp\"] + list(tmp_metadata.columns[1:])\n","                        tmp_metadata[\"id\"] = [img_obj]\n","                    concat_dic[\"metadata_timegroup_\" + str(i)] = concat_dic[\"metadata_timegroup_\" + str(i)].append(tmp_metadata)\n","                # # short term data\n","                # tmp_rawdata = rawdata_meta.iloc[:short_term]\n","                # tmp_metadata = tmp_rawdata.select_dtypes([\"float32\", \"float64\"]).median().to_frame().T.astype(\"float32\")\n","                # tmp_metadata[\"id\"] = [img_obj]\n","                # tmp_metadata[\"timestamp\"] = [tmp_rawdata[\"시간\"].iloc[0]]\n","                # concat_dic[\"metadata_short\"] = concat_dic[\"metadata_short\"].append(tmp_metadata)\n","        concat_dic[\"id_table\"].columns = [\"id\", \"timestamp\"]\n","        concat_dic[\"id_table\"].reset_index(drop=True, inplace=True)\n","        # concat_dic[\"metadata_short\"] = concat_dic[\"metadata_short\"][[\"id\", \"timestamp\"] + list(concat_dic[\"metadata_short\"].columns[:-2])]\n","        # concat_dic[\"metadata_short\"].reset_index(drop=True, inplace=True)\n","        for i in range(num_groups):\n","            concat_dic[\"metadata_timegroup_\" + str(i)] = concat_dic[\"metadata_timegroup_\" + str(i)][[\"id\", \"timestamp\"] + list(concat_dic[\"metadata_timegroup_\" + str(i)].drop([\"id\", \"timestamp\"], axis=1).columns)]\n","            concat_dic[\"metadata_timegroup_\" + str(i)].reset_index(drop=True, inplace=True)\n","        return concat_dic"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Z85I-wkYa_AK"},"outputs":[],"source":["# full_x = get_data_dic(short_term=short_term, group_minutes=group_minutes, group_type=\"last\", train=True)\n","# test_x = get_data_dic(short_term=short_term, group_minutes=group_minutes, group_type=\"last\", train=False)\n","# easyIO(full_x, \"/content/drive/MyDrive/Colab Notebooks/projects/Dacon/plant_leaf_weight_prediction/dataset/full_x_\" + str(group_minutes) + \"_\" + group_type + \".pkl\", \"w\")\n","# easyIO(test_x, \"/content/drive/MyDrive/Colab Notebooks/projects/Dacon/plant_leaf_weight_prediction/dataset/test_x_\" + str(group_minutes) + \"_\" + group_type + \".pkl\", \"w\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N8DTr3esMiMj"},"outputs":[],"source":["full_x = easyIO(None, \"/content/drive/MyDrive/Colab Notebooks/projects/Dacon/plant_leaf_weight_prediction/dataset/full_x_\" + str(group_minutes) + \"_\" + group_type + \".pkl\", \"r\")\n","test_x = easyIO(None, \"/content/drive/MyDrive/Colab Notebooks/projects/Dacon/plant_leaf_weight_prediction/dataset/test_x_\" + str(group_minutes) + \"_\" + group_type + \".pkl\", \"r\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"f9Yp_YmJgnf9"},"outputs":[],"source":["idx_var = \"id\"\n","target_var = \"target\"\n","date_var = [\"timestamp\"]\n","num_vars = [\"내부온도관측치\", \"외부온도관측치\", \"내부습도관측치\", \"외부습도관측치\", \"CO2관측치\", \"EC관측치\", \"최근분무량\",\n","            \"화이트 LED동작강도\", \"레드 LED동작강도\", \"블루 LED동작강도\", \"냉방온도\", \"냉방부하\", \"난방온도\", \"난방부하\",\n","            \"총추정광량\", \"백색광추정광량\", \"적색광추정광량\", \"청색광추정광량\"]\n","bin_vars = []\n","ord_vars = []\n","cat_vars = []\n","# cat_vars = [\"quarter\", \"month\", \"week_of_month\", \"weekday\"]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1652971821017,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"TDzXPjVCvVSx","outputId":"a667ff9c-eed0-43bd-894f-8f77ac528206"},"outputs":[{"data":{"text/plain":["dict_keys(['id_table', 'metadata_short', 'target', 'metadata_timegroup_0', 'metadata_timegroup_1', 'metadata_timegroup_2', 'metadata_timegroup_3', 'metadata_timegroup_4', 'metadata_timegroup_5', 'metadata_timegroup_6', 'metadata_timegroup_7', 'metadata_timegroup_8', 'metadata_timegroup_9', 'metadata_timegroup_10', 'metadata_timegroup_11', 'metadata_timegroup_12', 'metadata_timegroup_13', 'metadata_timegroup_14', 'metadata_timegroup_15', 'metadata_timegroup_16', 'metadata_timegroup_17', 'metadata_timegroup_18', 'metadata_timegroup_19', 'metadata_timegroup_20', 'metadata_timegroup_21', 'metadata_timegroup_22', 'metadata_timegroup_23', 'metadata_timegroup_24', 'metadata_timegroup_25', 'metadata_timegroup_26', 'metadata_timegroup_27', 'metadata_timegroup_28', 'metadata_timegroup_29', 'metadata_timegroup_30', 'metadata_timegroup_31', 'metadata_timegroup_32', 'metadata_timegroup_33', 'metadata_timegroup_34', 'metadata_timegroup_35', 'metadata_timegroup_36', 'metadata_timegroup_37', 'metadata_timegroup_38', 'metadata_timegroup_39', 'metadata_timegroup_40', 'metadata_timegroup_41', 'metadata_timegroup_42', 'metadata_timegroup_43', 'metadata_timegroup_44', 'metadata_timegroup_45', 'metadata_timegroup_46', 'metadata_timegroup_47', 'metadata_timegroup_48', 'metadata_timegroup_49', 'metadata_timegroup_50', 'metadata_timegroup_51', 'metadata_timegroup_52', 'metadata_timegroup_53', 'metadata_timegroup_54', 'metadata_timegroup_55', 'metadata_timegroup_56', 'metadata_timegroup_57', 'metadata_timegroup_58', 'metadata_timegroup_59', 'metadata_timegroup_60', 'metadata_timegroup_61', 'metadata_timegroup_62', 'metadata_timegroup_63', 'metadata_timegroup_64', 'metadata_timegroup_65', 'metadata_timegroup_66', 'metadata_timegroup_67', 'metadata_timegroup_68', 'metadata_timegroup_69', 'metadata_timegroup_70', 'metadata_timegroup_71', 'metadata_timegroup_72', 'metadata_timegroup_73', 'metadata_timegroup_74', 'metadata_timegroup_75', 'metadata_timegroup_76', 'metadata_timegroup_77', 'metadata_timegroup_78', 'metadata_timegroup_79', 'metadata_timegroup_80', 'metadata_timegroup_81', 'metadata_timegroup_82', 'metadata_timegroup_83', 'metadata_timegroup_84', 'metadata_timegroup_85', 'metadata_timegroup_86', 'metadata_timegroup_87', 'metadata_timegroup_88', 'metadata_timegroup_89', 'metadata_timegroup_90', 'metadata_timegroup_91', 'metadata_timegroup_92', 'metadata_timegroup_93', 'metadata_timegroup_94', 'metadata_timegroup_95'])"]},"execution_count":19,"metadata":{},"output_type":"execute_result"}],"source":["full_x.keys()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1652971821017,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"3e1CdV7bzTwH","outputId":"255a09af-d513-4e87-c7b4-d10858cfd10b"},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 1592 entries, 0 to 1591\n","Data columns (total 3 columns):\n"," #   Column     Non-Null Count  Dtype         \n","---  ------     --------------  -----         \n"," 0   id         1592 non-null   object        \n"," 1   timestamp  1592 non-null   datetime64[ns]\n"," 2   target     1592 non-null   float32       \n","dtypes: datetime64[ns](1), float32(1), object(1)\n","memory usage: 43.5+ KB\n"]}],"source":["full_x[\"id_table\"].info()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1652971821017,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"GJWGz1FlTyFv","outputId":"3f564ff0-44bf-4374-c748-a450a704e117"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-387b48e7-12e7-4e35-b84f-d5c18ce7e671\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>timestamp</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>CASE01_01.png</td>\n","      <td>2021-05-07 02:46:00</td>\n","      <td>49.193001</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CASE01_02.png</td>\n","      <td>2021-05-08 02:46:00</td>\n","      <td>59.764000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>CASE01_03.png</td>\n","      <td>2021-05-09 02:46:00</td>\n","      <td>72.209000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>CASE01_04.png</td>\n","      <td>2021-05-10 02:46:00</td>\n","      <td>85.737000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CASE01_05.png</td>\n","      <td>2021-05-11 02:46:00</td>\n","      <td>102.537003</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-387b48e7-12e7-4e35-b84f-d5c18ce7e671')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-387b48e7-12e7-4e35-b84f-d5c18ce7e671 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-387b48e7-12e7-4e35-b84f-d5c18ce7e671');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["              id           timestamp      target\n","0  CASE01_01.png 2021-05-07 02:46:00   49.193001\n","1  CASE01_02.png 2021-05-08 02:46:00   59.764000\n","2  CASE01_03.png 2021-05-09 02:46:00   72.209000\n","3  CASE01_04.png 2021-05-10 02:46:00   85.737000\n","4  CASE01_05.png 2021-05-11 02:46:00  102.537003"]},"execution_count":21,"metadata":{},"output_type":"execute_result"}],"source":["full_x[\"id_table\"].head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NGWbsa-sgjri"},"outputs":[],"source":["# full_x[\"metadata_short\"][\"quarter\"] = full_x[\"metadata_short\"][\"timestamp\"].dt.quarter.astype(\"object\")\n","# full_x[\"metadata_short\"][\"month\"] = full_x[\"metadata_short\"][\"timestamp\"].dt.month.astype(\"object\")\n","# full_x[\"metadata_short\"][\"week_of_month\"] = full_x[\"metadata_short\"][\"timestamp\"].apply(week_of_month).astype(\"object\")\n","# full_x[\"metadata_short\"][\"weekday\"] = full_x[\"metadata_short\"][\"timestamp\"].dt.weekday.astype(\"object\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oopU5A7PhRos"},"outputs":[],"source":["# for i in range(group_nums):\n","#     full_x[\"metadata_timegroup_\" + str(i)][\"quarter\"] = full_x[\"metadata_timegroup_\" + str(i)][\"timestamp\"].dt.quarter.astype(\"object\")\n","#     full_x[\"metadata_timegroup_\" + str(i)][\"month\"] = full_x[\"metadata_timegroup_\" + str(i)][\"timestamp\"].dt.month.astype(\"object\")\n","#     full_x[\"metadata_timegroup_\" + str(i)][\"week_of_month\"] = full_x[\"metadata_timegroup_\" + str(i)][\"timestamp\"].apply(week_of_month).astype(\"object\")\n","#     full_x[\"metadata_timegroup_\" + str(i)][\"weekday\"] = full_x[\"metadata_timegroup_\" + str(i)][\"timestamp\"].dt.weekday.astype(\"object\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1652971821018,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"oJCww80IhnKU","outputId":"aa65e71f-1ddf-42ee-d206-2d4586aeee86"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-9005faf8-ef4e-4003-8075-5145494138ac\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>timestamp</th>\n","      <th>내부온도관측치</th>\n","      <th>외부온도관측치</th>\n","      <th>내부습도관측치</th>\n","      <th>외부습도관측치</th>\n","      <th>CO2관측치</th>\n","      <th>EC관측치</th>\n","      <th>최근분무량</th>\n","      <th>화이트 LED동작강도</th>\n","      <th>레드 LED동작강도</th>\n","      <th>블루 LED동작강도</th>\n","      <th>냉방온도</th>\n","      <th>냉방부하</th>\n","      <th>난방온도</th>\n","      <th>난방부하</th>\n","      <th>총추정광량</th>\n","      <th>백색광추정광량</th>\n","      <th>적색광추정광량</th>\n","      <th>청색광추정광량</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>CASE01_01.png</td>\n","      <td>2021-05-07 03:00:00</td>\n","      <td>18.500000</td>\n","      <td>41.700001</td>\n","      <td>77.500000</td>\n","      <td>0.0</td>\n","      <td>586.0</td>\n","      <td>18.600000</td>\n","      <td>0.0</td>\n","      <td>201.0</td>\n","      <td>201.0</td>\n","      <td>0.0</td>\n","      <td>14.0</td>\n","      <td>0.0</td>\n","      <td>15.0</td>\n","      <td>12.500000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CASE01_02.png</td>\n","      <td>2021-05-08 03:00:00</td>\n","      <td>17.600000</td>\n","      <td>47.900002</td>\n","      <td>78.800003</td>\n","      <td>0.0</td>\n","      <td>582.0</td>\n","      <td>15.600000</td>\n","      <td>0.0</td>\n","      <td>201.0</td>\n","      <td>201.0</td>\n","      <td>NaN</td>\n","      <td>14.0</td>\n","      <td>0.0</td>\n","      <td>15.0</td>\n","      <td>8.000002</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>CASE01_03.png</td>\n","      <td>2021-05-09 03:00:00</td>\n","      <td>17.900000</td>\n","      <td>55.500000</td>\n","      <td>76.900002</td>\n","      <td>NaN</td>\n","      <td>564.0</td>\n","      <td>17.100000</td>\n","      <td>0.0</td>\n","      <td>201.0</td>\n","      <td>201.0</td>\n","      <td>NaN</td>\n","      <td>14.0</td>\n","      <td>0.0</td>\n","      <td>15.0</td>\n","      <td>9.499998</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>CASE01_04.png</td>\n","      <td>2021-05-10 03:00:00</td>\n","      <td>18.100000</td>\n","      <td>50.500000</td>\n","      <td>79.599998</td>\n","      <td>0.0</td>\n","      <td>610.0</td>\n","      <td>18.400000</td>\n","      <td>0.0</td>\n","      <td>201.0</td>\n","      <td>201.0</td>\n","      <td>NaN</td>\n","      <td>14.0</td>\n","      <td>0.0</td>\n","      <td>15.0</td>\n","      <td>10.500002</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CASE01_05.png</td>\n","      <td>2021-05-11 03:00:00</td>\n","      <td>18.299999</td>\n","      <td>66.599998</td>\n","      <td>89.599998</td>\n","      <td>0.0</td>\n","      <td>564.0</td>\n","      <td>17.799999</td>\n","      <td>0.0</td>\n","      <td>201.0</td>\n","      <td>201.0</td>\n","      <td>NaN</td>\n","      <td>14.0</td>\n","      <td>0.0</td>\n","      <td>15.0</td>\n","      <td>11.499996</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9005faf8-ef4e-4003-8075-5145494138ac')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9005faf8-ef4e-4003-8075-5145494138ac button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9005faf8-ef4e-4003-8075-5145494138ac');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["              id           timestamp    내부온도관측치    외부온도관측치    내부습도관측치  외부습도관측치  CO2관측치      EC관측치  최근분무량  화이트 LED동작강도  레드 LED동작강도  블루 LED동작강도  냉방온도  냉방부하  난방온도       난방부하  총추정광량  백색광추정광량  적색광추정광량  청색광추정광량\n","0  CASE01_01.png 2021-05-07 03:00:00  18.500000  41.700001  77.500000      0.0   586.0  18.600000    0.0        201.0       201.0         0.0  14.0   0.0  15.0  12.500000    0.0      0.0      0.0      NaN\n","1  CASE01_02.png 2021-05-08 03:00:00  17.600000  47.900002  78.800003      0.0   582.0  15.600000    0.0        201.0       201.0         NaN  14.0   0.0  15.0   8.000002    0.0      0.0      0.0      NaN\n","2  CASE01_03.png 2021-05-09 03:00:00  17.900000  55.500000  76.900002      NaN   564.0  17.100000    0.0        201.0       201.0         NaN  14.0   0.0  15.0   9.499998    0.0      0.0      0.0      NaN\n","3  CASE01_04.png 2021-05-10 03:00:00  18.100000  50.500000  79.599998      0.0   610.0  18.400000    0.0        201.0       201.0         NaN  14.0   0.0  15.0  10.500002    0.0      0.0      0.0      NaN\n","4  CASE01_05.png 2021-05-11 03:00:00  18.299999  66.599998  89.599998      0.0   564.0  17.799999    0.0        201.0       201.0         NaN  14.0   0.0  15.0  11.499996    0.0      0.0      0.0      NaN"]},"execution_count":24,"metadata":{},"output_type":"execute_result"}],"source":["full_x[\"metadata_timegroup_0\"].head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1652971821018,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"5BaFCkWukR4R","outputId":"61a01200-b2fc-4ef2-e739-a72022da6877"},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1592 entries, 0 to 1591\n","Data columns (total 20 columns):\n"," #   Column       Non-Null Count  Dtype         \n","---  ------       --------------  -----         \n"," 0   id           1592 non-null   object        \n"," 1   timestamp    1592 non-null   datetime64[ns]\n"," 2   내부온도관측치      1276 non-null   float32       \n"," 3   외부온도관측치      1296 non-null   float32       \n"," 4   내부습도관측치      1278 non-null   float32       \n"," 5   외부습도관측치      1290 non-null   float32       \n"," 6   CO2관측치       1296 non-null   float32       \n"," 7   EC관측치        1286 non-null   float32       \n"," 8   최근분무량        1297 non-null   float32       \n"," 9   화이트 LED동작강도  1247 non-null   float32       \n"," 10  레드 LED동작강도   1233 non-null   float32       \n"," 11  블루 LED동작강도   1217 non-null   float32       \n"," 12  냉방온도         1272 non-null   float32       \n"," 13  냉방부하         1252 non-null   float32       \n"," 14  난방온도         1272 non-null   float32       \n"," 15  난방부하         1252 non-null   float32       \n"," 16  총추정광량        1271 non-null   float32       \n"," 17  백색광추정광량      1271 non-null   float32       \n"," 18  적색광추정광량      1271 non-null   float32       \n"," 19  청색광추정광량      1253 non-null   float32       \n","dtypes: datetime64[ns](1), float32(18), object(1)\n","memory usage: 136.9+ KB\n"]}],"source":["full_x[\"metadata_timegroup_0\"].info()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1652971821018,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"fSBqNVckjPcD","outputId":"75134ec1-adb9-44a3-82a7-75fb991054f5"},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1592 entries, 0 to 1591\n","Data columns (total 20 columns):\n"," #   Column       Non-Null Count  Dtype         \n","---  ------       --------------  -----         \n"," 0   id           1592 non-null   object        \n"," 1   timestamp    1592 non-null   datetime64[ns]\n"," 2   내부온도관측치      1284 non-null   float32       \n"," 3   외부온도관측치      1296 non-null   float32       \n"," 4   내부습도관측치      1281 non-null   float32       \n"," 5   외부습도관측치      1292 non-null   float32       \n"," 6   CO2관측치       1296 non-null   float32       \n"," 7   EC관측치        1288 non-null   float32       \n"," 8   최근분무량        1296 non-null   float32       \n"," 9   화이트 LED동작강도  1244 non-null   float32       \n"," 10  레드 LED동작강도   1241 non-null   float32       \n"," 11  블루 LED동작강도   1229 non-null   float32       \n"," 12  냉방온도         1274 non-null   float32       \n"," 13  냉방부하         1260 non-null   float32       \n"," 14  난방온도         1274 non-null   float32       \n"," 15  난방부하         1260 non-null   float32       \n"," 16  총추정광량        1274 non-null   float32       \n"," 17  백색광추정광량      1274 non-null   float32       \n"," 18  적색광추정광량      1274 non-null   float32       \n"," 19  청색광추정광량      1256 non-null   float32       \n","dtypes: datetime64[ns](1), float32(18), object(1)\n","memory usage: 136.9+ KB\n"]}],"source":["full_x[\"metadata_timegroup_23\"].info()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1652971821018,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"-85fnIO6nsc9","outputId":"b1d91e3b-dec1-4800-b2fd-defddbbfaf80"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-44dba273-95fe-4f22-8e09-a01253910535\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>timestamp</th>\n","      <th>내부온도관측치</th>\n","      <th>외부온도관측치</th>\n","      <th>내부습도관측치</th>\n","      <th>외부습도관측치</th>\n","      <th>CO2관측치</th>\n","      <th>EC관측치</th>\n","      <th>최근분무량</th>\n","      <th>화이트 LED동작강도</th>\n","      <th>레드 LED동작강도</th>\n","      <th>블루 LED동작강도</th>\n","      <th>냉방온도</th>\n","      <th>냉방부하</th>\n","      <th>난방온도</th>\n","      <th>난방부하</th>\n","      <th>총추정광량</th>\n","      <th>백색광추정광량</th>\n","      <th>적색광추정광량</th>\n","      <th>청색광추정광량</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>CASE01_01.png</td>\n","      <td>2021-05-07 08:45:00</td>\n","      <td>23.900000</td>\n","      <td>48.900002</td>\n","      <td>76.000000</td>\n","      <td>0.0</td>\n","      <td>407.0</td>\n","      <td>22.500000</td>\n","      <td>0.0</td>\n","      <td>201.0</td>\n","      <td>201.0</td>\n","      <td>0.0</td>\n","      <td>18.410643</td>\n","      <td>352.588501</td>\n","      <td>20.100122</td>\n","      <td>10.551816</td>\n","      <td>309.410004</td>\n","      <td>16.548</td>\n","      <td>26.630501</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CASE01_02.png</td>\n","      <td>2021-05-08 08:45:00</td>\n","      <td>23.799999</td>\n","      <td>39.599998</td>\n","      <td>78.699997</td>\n","      <td>0.0</td>\n","      <td>360.0</td>\n","      <td>20.100000</td>\n","      <td>0.0</td>\n","      <td>201.0</td>\n","      <td>201.0</td>\n","      <td>0.0</td>\n","      <td>18.401276</td>\n","      <td>352.588501</td>\n","      <td>20.090235</td>\n","      <td>9.603889</td>\n","      <td>309.410004</td>\n","      <td>16.548</td>\n","      <td>26.630501</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>CASE01_03.png</td>\n","      <td>2021-05-09 08:45:00</td>\n","      <td>23.299999</td>\n","      <td>47.099998</td>\n","      <td>68.800003</td>\n","      <td>0.0</td>\n","      <td>396.0</td>\n","      <td>19.700001</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>201.0</td>\n","      <td>0.0</td>\n","      <td>18.413605</td>\n","      <td>352.588501</td>\n","      <td>20.103251</td>\n","      <td>10.535420</td>\n","      <td>309.410004</td>\n","      <td>16.548</td>\n","      <td>26.630501</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>CASE01_04.png</td>\n","      <td>2021-05-10 08:45:00</td>\n","      <td>23.200001</td>\n","      <td>49.700001</td>\n","      <td>78.500000</td>\n","      <td>0.0</td>\n","      <td>451.0</td>\n","      <td>18.100000</td>\n","      <td>0.0</td>\n","      <td>201.0</td>\n","      <td>201.0</td>\n","      <td>0.0</td>\n","      <td>18.391935</td>\n","      <td>352.588501</td>\n","      <td>20.080376</td>\n","      <td>6.655768</td>\n","      <td>309.410004</td>\n","      <td>16.548</td>\n","      <td>26.630501</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CASE01_05.png</td>\n","      <td>2021-05-11 08:45:00</td>\n","      <td>23.400000</td>\n","      <td>75.300003</td>\n","      <td>82.000000</td>\n","      <td>0.0</td>\n","      <td>395.0</td>\n","      <td>17.600000</td>\n","      <td>0.0</td>\n","      <td>201.0</td>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>18.390736</td>\n","      <td>352.588501</td>\n","      <td>20.079109</td>\n","      <td>7.662479</td>\n","      <td>309.410004</td>\n","      <td>16.548</td>\n","      <td>26.630501</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-44dba273-95fe-4f22-8e09-a01253910535')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-44dba273-95fe-4f22-8e09-a01253910535 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-44dba273-95fe-4f22-8e09-a01253910535');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["              id           timestamp    내부온도관측치    외부온도관측치    내부습도관측치  외부습도관측치  CO2관측치      EC관측치  최근분무량  화이트 LED동작강도  레드 LED동작강도  블루 LED동작강도       냉방온도        냉방부하       난방온도       난방부하       총추정광량  백색광추정광량    적색광추정광량  청색광추정광량\n","0  CASE01_01.png 2021-05-07 08:45:00  23.900000  48.900002  76.000000      0.0   407.0  22.500000    0.0        201.0       201.0         0.0  18.410643  352.588501  20.100122  10.551816  309.410004   16.548  26.630501      NaN\n","1  CASE01_02.png 2021-05-08 08:45:00  23.799999  39.599998  78.699997      0.0   360.0  20.100000    0.0        201.0       201.0         0.0  18.401276  352.588501  20.090235   9.603889  309.410004   16.548  26.630501      NaN\n","2  CASE01_03.png 2021-05-09 08:45:00  23.299999  47.099998  68.800003      0.0   396.0  19.700001    0.0          NaN       201.0         0.0  18.413605  352.588501  20.103251  10.535420  309.410004   16.548  26.630501      NaN\n","3  CASE01_04.png 2021-05-10 08:45:00  23.200001  49.700001  78.500000      0.0   451.0  18.100000    0.0        201.0       201.0         0.0  18.391935  352.588501  20.080376   6.655768  309.410004   16.548  26.630501      NaN\n","4  CASE01_05.png 2021-05-11 08:45:00  23.400000  75.300003  82.000000      0.0   395.0  17.600000    0.0        201.0         NaN         0.0  18.390736  352.588501  20.079109   7.662479  309.410004   16.548  26.630501      NaN"]},"execution_count":27,"metadata":{},"output_type":"execute_result"}],"source":["full_x[\"metadata_timegroup_23\"].head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1652971821019,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"l9Me9k_ooo1_","outputId":"d1dded5a-4b30-4622-e8f7-d89f5d2b6d2a"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-509ba06c-466f-4af9-86f4-2bbf547e1f0f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>timestamp</th>\n","      <th>내부온도관측치</th>\n","      <th>외부온도관측치</th>\n","      <th>내부습도관측치</th>\n","      <th>외부습도관측치</th>\n","      <th>CO2관측치</th>\n","      <th>EC관측치</th>\n","      <th>최근분무량</th>\n","      <th>화이트 LED동작강도</th>\n","      <th>레드 LED동작강도</th>\n","      <th>블루 LED동작강도</th>\n","      <th>냉방온도</th>\n","      <th>냉방부하</th>\n","      <th>난방온도</th>\n","      <th>난방부하</th>\n","      <th>총추정광량</th>\n","      <th>백색광추정광량</th>\n","      <th>적색광추정광량</th>\n","      <th>청색광추정광량</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>001.png</td>\n","      <td>2021-05-05 09:13:00</td>\n","      <td>25.6</td>\n","      <td>22.1</td>\n","      <td>48.099998</td>\n","      <td>47.000000</td>\n","      <td>351.0</td>\n","      <td>0.000000</td>\n","      <td>4607.569824</td>\n","      <td>100.0</td>\n","      <td>10.0</td>\n","      <td>21.0</td>\n","      <td>25.0</td>\n","      <td>3.000002</td>\n","      <td>23.0</td>\n","      <td>0.0</td>\n","      <td>358.854492</td>\n","      <td>309.410004</td>\n","      <td>16.548000</td>\n","      <td>32.896500</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>002.png</td>\n","      <td>2021-06-25 17:13:00</td>\n","      <td>28.0</td>\n","      <td>30.6</td>\n","      <td>61.400002</td>\n","      <td>42.000000</td>\n","      <td>473.0</td>\n","      <td>0.000000</td>\n","      <td>434.640015</td>\n","      <td>70.0</td>\n","      <td>20.0</td>\n","      <td>10.0</td>\n","      <td>26.0</td>\n","      <td>15.000000</td>\n","      <td>25.0</td>\n","      <td>0.0</td>\n","      <td>265.347992</td>\n","      <td>216.587006</td>\n","      <td>33.096001</td>\n","      <td>15.665000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>003.png</td>\n","      <td>2021-09-07 03:00:00</td>\n","      <td>24.6</td>\n","      <td>25.5</td>\n","      <td>80.699997</td>\n","      <td>59.700001</td>\n","      <td>487.0</td>\n","      <td>1.791887</td>\n","      <td>126.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>16.0</td>\n","      <td>53.000000</td>\n","      <td>14.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>004.png</td>\n","      <td>2021-04-23 17:13:00</td>\n","      <td>25.1</td>\n","      <td>22.9</td>\n","      <td>62.400002</td>\n","      <td>47.400002</td>\n","      <td>367.0</td>\n","      <td>0.610124</td>\n","      <td>10701.700195</td>\n","      <td>93.0</td>\n","      <td>26.0</td>\n","      <td>27.0</td>\n","      <td>25.0</td>\n","      <td>1.999998</td>\n","      <td>23.0</td>\n","      <td>0.0</td>\n","      <td>373.071594</td>\n","      <td>287.751312</td>\n","      <td>43.024799</td>\n","      <td>42.295502</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>005.png</td>\n","      <td>2021-04-28 03:00:00</td>\n","      <td>20.6</td>\n","      <td>22.0</td>\n","      <td>76.500000</td>\n","      <td>35.000000</td>\n","      <td>421.0</td>\n","      <td>0.537842</td>\n","      <td>769.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>20.0</td>\n","      <td>3.000002</td>\n","      <td>18.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-509ba06c-466f-4af9-86f4-2bbf547e1f0f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-509ba06c-466f-4af9-86f4-2bbf547e1f0f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-509ba06c-466f-4af9-86f4-2bbf547e1f0f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["        id           timestamp  내부온도관측치  외부온도관측치    내부습도관측치    외부습도관측치  CO2관측치     EC관측치         최근분무량  화이트 LED동작강도  레드 LED동작강도  블루 LED동작강도  냉방온도       냉방부하  난방온도  난방부하       총추정광량     백색광추정광량    적색광추정광량    청색광추정광량\n","0  001.png 2021-05-05 09:13:00     25.6     22.1  48.099998  47.000000   351.0  0.000000   4607.569824        100.0        10.0        21.0  25.0   3.000002  23.0   0.0  358.854492  309.410004  16.548000  32.896500\n","1  002.png 2021-06-25 17:13:00     28.0     30.6  61.400002  42.000000   473.0  0.000000    434.640015         70.0        20.0        10.0  26.0  15.000000  25.0   0.0  265.347992  216.587006  33.096001  15.665000\n","2  003.png 2021-09-07 03:00:00     24.6     25.5  80.699997  59.700001   487.0  1.791887    126.000000          0.0         0.0         0.0  16.0  53.000000  14.0   0.0    0.000000    0.000000   0.000000   0.000000\n","3  004.png 2021-04-23 17:13:00     25.1     22.9  62.400002  47.400002   367.0  0.610124  10701.700195         93.0        26.0        27.0  25.0   1.999998  23.0   0.0  373.071594  287.751312  43.024799  42.295502\n","4  005.png 2021-04-28 03:00:00     20.6     22.0  76.500000  35.000000   421.0  0.537842    769.000000          0.0         0.0         0.0  20.0   3.000002  18.0   0.0    0.000000    0.000000   0.000000   0.000000"]},"execution_count":28,"metadata":{},"output_type":"execute_result"}],"source":["test_x[\"metadata_timegroup_0\"].head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1652971821019,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"W5zyaJawooz6","outputId":"5ca305d4-e35d-4399-b5ca-2e3461ac4edb"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-8daf8801-ea97-4370-938a-b8cc5ef7b36b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>timestamp</th>\n","      <th>내부온도관측치</th>\n","      <th>외부온도관측치</th>\n","      <th>내부습도관측치</th>\n","      <th>외부습도관측치</th>\n","      <th>CO2관측치</th>\n","      <th>EC관측치</th>\n","      <th>최근분무량</th>\n","      <th>화이트 LED동작강도</th>\n","      <th>레드 LED동작강도</th>\n","      <th>블루 LED동작강도</th>\n","      <th>냉방온도</th>\n","      <th>냉방부하</th>\n","      <th>난방온도</th>\n","      <th>난방부하</th>\n","      <th>총추정광량</th>\n","      <th>백색광추정광량</th>\n","      <th>적색광추정광량</th>\n","      <th>청색광추정광량</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>001.png</td>\n","      <td>2021-05-05 14:58:00</td>\n","      <td>25.299999</td>\n","      <td>23.0</td>\n","      <td>58.299999</td>\n","      <td>36.700001</td>\n","      <td>394.0</td>\n","      <td>0.000000</td>\n","      <td>7677.140137</td>\n","      <td>100.0</td>\n","      <td>18.0</td>\n","      <td>38.0</td>\n","      <td>25.000000</td>\n","      <td>1.499996</td>\n","      <td>23.00000</td>\n","      <td>0.0</td>\n","      <td>398.723389</td>\n","      <td>309.410004</td>\n","      <td>29.7864</td>\n","      <td>59.527000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>002.png</td>\n","      <td>2021-06-25 22:58:00</td>\n","      <td>27.000000</td>\n","      <td>28.9</td>\n","      <td>60.900002</td>\n","      <td>50.700001</td>\n","      <td>506.0</td>\n","      <td>0.000000</td>\n","      <td>762.570007</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>21.000000</td>\n","      <td>35.000000</td>\n","      <td>20.00000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>003.png</td>\n","      <td>2021-09-07 08:45:00</td>\n","      <td>26.900000</td>\n","      <td>25.6</td>\n","      <td>75.500000</td>\n","      <td>62.400002</td>\n","      <td>452.0</td>\n","      <td>1.780509</td>\n","      <td>119.570000</td>\n","      <td>100.0</td>\n","      <td>10.0</td>\n","      <td>17.0</td>\n","      <td>21.819456</td>\n","      <td>42.312344</td>\n","      <td>18.43751</td>\n","      <td>0.0</td>\n","      <td>352.588501</td>\n","      <td>309.410004</td>\n","      <td>16.5480</td>\n","      <td>26.630501</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>004.png</td>\n","      <td>2021-04-23 22:58:00</td>\n","      <td>20.600000</td>\n","      <td>21.9</td>\n","      <td>75.599998</td>\n","      <td>44.900002</td>\n","      <td>435.0</td>\n","      <td>0.603906</td>\n","      <td>12995.839844</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>20.000000</td>\n","      <td>3.000002</td>\n","      <td>18.00000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>005.png</td>\n","      <td>2021-04-28 08:45:00</td>\n","      <td>24.600000</td>\n","      <td>22.1</td>\n","      <td>58.000000</td>\n","      <td>38.299999</td>\n","      <td>401.0</td>\n","      <td>0.544837</td>\n","      <td>4601.140137</td>\n","      <td>100.0</td>\n","      <td>10.0</td>\n","      <td>17.0</td>\n","      <td>25.000000</td>\n","      <td>0.000000</td>\n","      <td>23.00000</td>\n","      <td>0.0</td>\n","      <td>352.588501</td>\n","      <td>309.410004</td>\n","      <td>16.5480</td>\n","      <td>26.630501</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8daf8801-ea97-4370-938a-b8cc5ef7b36b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8daf8801-ea97-4370-938a-b8cc5ef7b36b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8daf8801-ea97-4370-938a-b8cc5ef7b36b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["        id           timestamp    내부온도관측치  외부온도관측치    내부습도관측치    외부습도관측치  CO2관측치     EC관측치         최근분무량  화이트 LED동작강도  레드 LED동작강도  블루 LED동작강도       냉방온도       냉방부하      난방온도  난방부하       총추정광량     백색광추정광량  적색광추정광량    청색광추정광량\n","0  001.png 2021-05-05 14:58:00  25.299999     23.0  58.299999  36.700001   394.0  0.000000   7677.140137        100.0        18.0        38.0  25.000000   1.499996  23.00000   0.0  398.723389  309.410004  29.7864  59.527000\n","1  002.png 2021-06-25 22:58:00  27.000000     28.9  60.900002  50.700001   506.0  0.000000    762.570007          0.0         0.0         0.0  21.000000  35.000000  20.00000   0.0    0.000000    0.000000   0.0000   0.000000\n","2  003.png 2021-09-07 08:45:00  26.900000     25.6  75.500000  62.400002   452.0  1.780509    119.570000        100.0        10.0        17.0  21.819456  42.312344  18.43751   0.0  352.588501  309.410004  16.5480  26.630501\n","3  004.png 2021-04-23 22:58:00  20.600000     21.9  75.599998  44.900002   435.0  0.603906  12995.839844          0.0         0.0         0.0  20.000000   3.000002  18.00000   0.0    0.000000    0.000000   0.0000   0.000000\n","4  005.png 2021-04-28 08:45:00  24.600000     22.1  58.000000  38.299999   401.0  0.544837   4601.140137        100.0        10.0        17.0  25.000000   0.000000  23.00000   0.0  352.588501  309.410004  16.5480  26.630501"]},"execution_count":29,"metadata":{},"output_type":"execute_result"}],"source":["test_x[\"metadata_timegroup_23\"].head()"]},{"cell_type":"markdown","metadata":{"id":"N0VL1Z7a73Rc"},"source":["# EDA"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EkmdHuBAnnGK"},"outputs":[],"source":["createFolder(folder_path + \"EDA/graphs/\")\n","createFolder(folder_path + \"EDA/csv_output/\")"]},{"cell_type":"markdown","metadata":{"id":"d64xj25F0SN2"},"source":["**Time group 별 target 과 유의성 파악**"]},{"cell_type":"markdown","metadata":{"id":"gPbPCidVR9VN"},"source":["**Time group 0**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hOyyLrOh0SBU"},"outputs":[],"source":["# viz_df = pd.concat([full_x[\"metadata_timegroup_0\"].copy(), full_x[\"id_table\"][[\"target\"]]], axis=1).dropna()\n","# viz_df.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hV6O175P0R_J"},"outputs":[],"source":["# for i in viz_df.select_dtypes([\"float32\", \"float64\"]):\n","#     tmp_df = dataframe()\n","#     tmp_df[\"x\"] = viz_df[i]\n","#     tmp_df[\"y\"] = viz_df[\"target\"]\n","#     if i == \"target\":\n","#         continue\n","#     tmp_df = tmp_df[tmp_df[\"y\"] > 0]\n","#     if i == \"최근분무량\":\n","#         tmp_df = tmp_df[tmp_df[\"x\"] < 100000]\n","#     # else:\n","#     #     outlier_mask = (np.abs(stats.zscore(tmp_df[\"x\"])) > 3.0)\n","#     #     if outlier_mask.sum() > 0:\n","#     #         print(\"outlier \", i, outlier_mask.sum())\n","#     #     tmp_df = tmp_df[~outlier_mask]\n","#     plt.figure(figsize=(16, 9))\n","#     graph = sns.regplot(tmp_df[\"x\"], tmp_df[\"y\"], color=\"green\",\n","#                 scatter_kws={'s':15}, line_kws={\"color\": \"orange\"})\n","#     graph.set_title(i + \" & target 시각화\", fontsize=15, fontweight=\"bold\", pad=15)\n","#     graph.set_xlabel(graph.get_xlabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     graph.set_ylabel(graph.get_ylabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     plt.savefig(folder_path + \"EDA/graphs/time_group_0_\" + i)"]},{"cell_type":"markdown","metadata":{"id":"qwpZ73rnTkcr"},"source":["**Time group 12**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rtmYIzem0R6k"},"outputs":[],"source":["# viz_df = pd.concat([full_x[\"metadata_timegroup_12\"].copy(), full_x[\"id_table\"][[\"target\"]]], axis=1).dropna()\n","# viz_df.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d3_0ow2W0R4X"},"outputs":[],"source":["# for i in viz_df.select_dtypes([\"float32\", \"float64\"]):\n","#     tmp_df = dataframe()\n","#     tmp_df[\"x\"] = viz_df[i]\n","#     tmp_df[\"y\"] = viz_df[\"target\"]\n","#     if i == \"target\":\n","#         continue\n","#     tmp_df = tmp_df[tmp_df[\"y\"] > 0]\n","#     if i == \"최근분무량\":\n","#         tmp_df = tmp_df[tmp_df[\"x\"] < 100000]\n","#     # else:\n","#     #     outlier_mask = (np.abs(stats.zscore(tmp_df[\"x\"])) > 3.0)\n","#     #     if outlier_mask.sum() > 0:\n","#     #         print(\"outlier \", i, outlier_mask.sum())\n","#     #     tmp_df = tmp_df[~outlier_mask]\n","#     plt.figure(figsize=(16, 9))\n","#     graph = sns.regplot(tmp_df[\"x\"], tmp_df[\"y\"], color=\"green\",\n","#                 scatter_kws={'s':15}, line_kws={\"color\": \"orange\"})\n","#     graph.set_title(i + \" & target 시각화\", fontsize=15, fontweight=\"bold\", pad=15)\n","#     graph.set_xlabel(graph.get_xlabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     graph.set_ylabel(graph.get_ylabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     plt.savefig(folder_path + \"EDA/graphs/time_group_12_\" + i)"]},{"cell_type":"markdown","metadata":{"id":"WuEUkhJE2lB_"},"source":["**Time group 23**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mpwd6gFD2lTO"},"outputs":[],"source":["# viz_df = pd.concat([full_x[\"metadata_timegroup_23\"].copy(), full_x[\"id_table\"][[\"target\"]]], axis=1).dropna()\n","# viz_df.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yIzebot42lqu"},"outputs":[],"source":["# for i in viz_df.select_dtypes([\"float32\", \"float64\"]):\n","#     tmp_df = dataframe()\n","#     tmp_df[\"x\"] = viz_df[i]\n","#     tmp_df[\"y\"] = viz_df[\"target\"]\n","#     if i == \"target\":\n","#         continue\n","#     tmp_df = tmp_df[tmp_df[\"y\"] > 0]\n","#     if i == \"최근분무량\":\n","#         tmp_df = tmp_df[tmp_df[\"x\"] < 100000]\n","#     # else:\n","#     #     outlier_mask = (np.abs(stats.zscore(tmp_df[\"x\"])) > 3.0)\n","#     #     if outlier_mask.sum() > 0:\n","#     #         print(\"outlier \", i, outlier_mask.sum())\n","#     #     tmp_df = tmp_df[~outlier_mask]\n","#     plt.figure(figsize=(16, 9))\n","#     graph = sns.regplot(tmp_df[\"x\"], tmp_df[\"y\"], color=\"green\",\n","#                 scatter_kws={'s':15}, line_kws={\"color\": \"orange\"})\n","#     graph.set_title(i + \" & target 시각화\", fontsize=15, fontweight=\"bold\", pad=15)\n","#     graph.set_xlabel(graph.get_xlabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     graph.set_ylabel(graph.get_ylabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     plt.savefig(folder_path + \"EDA/graphs/time_group_23_\" + i)"]},{"cell_type":"markdown","metadata":{"id":"sMwejqI6Pk9z"},"source":["**Time group 별 target 과의 상관관계 table export**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xG-Gpzg1PlPq"},"outputs":[],"source":["# corr_df = dataframe()\n","# for group_idx in range(group_nums):\n","#     viz_df = pd.concat([full_x[\"metadata_timegroup_\" + str(group_idx)].copy(), full_x[\"id_table\"][[\"target\"]]], axis=1).dropna()\n","#     tmp_corr = series()\n","#     for i in viz_df.select_dtypes([\"number\"]):\n","#         tmp_df = dataframe()\n","#         tmp_df[\"x\"] = viz_df[i]\n","#         tmp_df[\"y\"] = viz_df[\"target\"]\n","#         if i == \"target\":\n","#             continue\n","#         tmp_df = tmp_df[tmp_df[\"y\"] > 0]\n","#         if i == \"최근분무량\":\n","#             tmp_df = tmp_df[tmp_df[\"x\"] < 100000]\n","#         # else:\n","#         #     outlier_mask = (np.abs(stats.zscore(tmp_df[\"x\"])) > 3.0)\n","#         #     if outlier_mask.sum() > 0:\n","#         #         print(\"outlier \", i, outlier_mask.sum())\n","#         #     tmp_df = tmp_df[~outlier_mask]\n","#         tmp_corr = tmp_corr.append(series({i: tmp_df[\"x\"].corr(tmp_df[\"y\"])}))\n","#     tmp_corr.name = \"group_\" + str(group_idx)\n","#     corr_df = pd.concat([corr_df, tmp_corr], axis=1)\n","# corr_df.to_csv(folder_path + \"EDA/csv_output/time_group_corr.csv\", index=True, encoding=\"euc-kr\")"]},{"cell_type":"markdown","metadata":{"id":"efEg-UGEDznO"},"source":["**feature 간 상관관계 시각화**"]},{"cell_type":"markdown","metadata":{"id":"Drm7U-ynoAj2"},"source":["**heatmap on time group 0**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Jh8U87QH-wtJ"},"outputs":[],"source":["# plt.figure(figsize=(16, 9))\n","# graph = sns.heatmap(pd.concat([full_x[\"metadata_timegroup_0\"], full_x[\"id_table\"][[\"target\"]]], axis=1).corr().round(2), annot=True, cmap=\"YlGnBu\", annot_kws={\"fontsize\": 13, \"fontweight\": \"bold\"})\n","# graph.set_xticklabels(graph.get_xticklabels(), fontsize=12, fontweight=\"bold\")\n","# graph.set_yticklabels(graph.get_yticklabels(), fontsize=12, fontweight=\"bold\")\n","# plt.savefig(folder_path + \"EDA/graphs/corr_heatmap_time_group_0\")"]},{"cell_type":"markdown","metadata":{"id":"joNrBWC6n_41"},"source":["**heatmap on time group 12**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iDrsZHckn6pY"},"outputs":[],"source":["# plt.figure(figsize=(16, 9))\n","# graph = sns.heatmap(pd.concat([full_x[\"metadata_timegroup_12\"], full_x[\"id_table\"][[\"target\"]]], axis=1).corr().round(2), annot=True, cmap=\"YlGnBu\", annot_kws={\"fontsize\": 13, \"fontweight\": \"bold\"})\n","# graph.set_xticklabels(graph.get_xticklabels(), fontsize=12, fontweight=\"bold\")\n","# graph.set_yticklabels(graph.get_yticklabels(), fontsize=12, fontweight=\"bold\")\n","# plt.savefig(folder_path + \"EDA/graphs/corr_heatmap_time_group_12\")"]},{"cell_type":"markdown","metadata":{"id":"_3IPyjMGn7uY"},"source":["**heatmap on time group 23**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PB-ULFben6mx"},"outputs":[],"source":["# plt.figure(figsize=(16, 9))\n","# graph = sns.heatmap(pd.concat([full_x[\"metadata_timegroup_23\"], full_x[\"id_table\"][[\"target\"]]], axis=1).corr().round(2), annot=True, cmap=\"YlGnBu\", annot_kws={\"fontsize\": 13, \"fontweight\": \"bold\"})\n","# graph.set_xticklabels(graph.get_xticklabels(), fontsize=12, fontweight=\"bold\")\n","# graph.set_yticklabels(graph.get_yticklabels(), fontsize=12, fontweight=\"bold\")\n","# plt.savefig(folder_path + \"EDA/graphs/corr_heatmap_time_group_23\")"]},{"cell_type":"markdown","metadata":{"id":"2_yvIEuSgQDJ"},"source":["**월별 feature 와의 상관관계 파악**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"catD5QumoL1O"},"outputs":[],"source":["# viz_df = pd.concat([full_x[\"metadata_short\"].copy(), full_x[\"id_table\"][[\"target\"]].copy()], axis=1).dropna()\n","# viz_df = viz_df[(viz_df[\"target\"] > 0) & viz_df[\"최근분무량\"] < 100000]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5P-mRMne56M2"},"outputs":[],"source":["# viz_df.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"i4yuTmzxoLxE"},"outputs":[],"source":["# viz_df.groupby(\"month\").median().to_csv(folder_path + \"EDA/csv_output/month_median.csv\", index=True, encoding=\"euc-kr\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ofY2vhwnoLuD"},"outputs":[],"source":["# viz_df.groupby(\"month\").mean().to_csv(folder_path + \"EDA/csv_output/month_mean.csv\", index=True, encoding=\"euc-kr\")"]},{"cell_type":"markdown","metadata":{"id":"LWHjrCl7MrEt"},"source":["# Feature Engineering"]},{"cell_type":"markdown","metadata":{"id":"lvnQVkKSLYqv"},"source":["**가장 높은 상관관계를 갖는 각 feature에 대한 시간 선택 (안 함)**\n","\n","\n","\n","*   내부온도관측치 - time_group_22\n","*   내부습도관측치 - time_group_15\n","*   CO2관측치 - time_group_20\n","*   EC관측치 - time_group_20\n","*   최근분무량 - time_group_3\n","*   화이트 LED동작강도 - time_group_22\n","*   레드 LED동작강도 - time_group_7\n","*   블루 LED동작강도 - time_group_8\n","*   냉방온도 - time_group_9\n","*   냉방부하 - time_group_9\n","*   난방온도 - time_group_21\n","*   난방부하 - time_group_7\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17,"status":"ok","timestamp":1652843968346,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"vfYkY3ZyL-us","outputId":"6b702e3f-cdee-460b-a33b-c7e7fa4e1cfa"},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1592 entries, 0 to 1591\n","Data columns (total 20 columns):\n"," #   Column       Non-Null Count  Dtype         \n","---  ------       --------------  -----         \n"," 0   id           1592 non-null   object        \n"," 1   timestamp    1592 non-null   datetime64[ns]\n"," 2   내부온도관측치      1276 non-null   float32       \n"," 3   외부온도관측치      1296 non-null   float32       \n"," 4   내부습도관측치      1278 non-null   float32       \n"," 5   외부습도관측치      1290 non-null   float32       \n"," 6   CO2관측치       1296 non-null   float32       \n"," 7   EC관측치        1286 non-null   float32       \n"," 8   최근분무량        1297 non-null   float32       \n"," 9   화이트 LED동작강도  1247 non-null   float32       \n"," 10  레드 LED동작강도   1233 non-null   float32       \n"," 11  블루 LED동작강도   1217 non-null   float32       \n"," 12  냉방온도         1272 non-null   float32       \n"," 13  냉방부하         1252 non-null   float32       \n"," 14  난방온도         1272 non-null   float32       \n"," 15  난방부하         1252 non-null   float32       \n"," 16  총추정광량        1271 non-null   float32       \n"," 17  백색광추정광량      1271 non-null   float32       \n"," 18  적색광추정광량      1271 non-null   float32       \n"," 19  청색광추정광량      1253 non-null   float32       \n","dtypes: datetime64[ns](1), float32(18), object(1)\n","memory usage: 136.9+ KB\n"]}],"source":["full_x[\"metadata_timegroup_0\"].info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KZ5YtqJsPUWu"},"outputs":[],"source":["# default\n","selected_features = tuple([(i, 0) for i in full_x[\"metadata_timegroup_0\"].drop([\"id\", \"timestamp\"], axis=1).columns])\n","# # selected\n","# selected_features = (\n","#     (\"내부온도관측치\", 22),\n","#     (\"외부온도관측치\", 0),\n","#     (\"내부습도관측치\", 15),\n","#     (\"외부습도관측치\", 0),\n","#     (\"CO2관측치\", 20),\n","#     (\"EC관측치\", 20),\n","#     (\"최근분무량\", 3),\n","#     (\"화이트 LED동작강도\", 22),\n","#     (\"레드 LED동작강도\", 7),\n","#     (\"블루 LED동작강도\", 8),\n","#     (\"냉방온도\", 9),\n","#     (\"냉방부하\", 9),\n","#     (\"난방온도\", 21),\n","#     (\"난방부하\", 7),\n","#     # (\"총추정광량\", 0),\n","# )\n","num_vars = [i[0] for i in selected_features]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oO9_f1iSMv1t"},"outputs":[],"source":["# 다른 코드 호환을 위한 부분 (deprecated)\n","full_x[\"train_data\"] = dataframe()\n","test_x[\"test_data\"] = dataframe()\n","for i in selected_features:\n","    full_x[\"train_data\"] = pd.concat([full_x[\"train_data\"], full_x[\"metadata_timegroup_\" + str(i[1])][[i[0]]]], axis=1)\n","    test_x[\"test_data\"] = pd.concat([test_x[\"test_data\"], test_x[\"metadata_timegroup_\" + str(i[1])][[i[0]]]], axis=1)\n","full_x[\"train_data\"] = pd.concat([full_x[\"train_data\"], full_x[\"id_table\"][[\"id\", \"target\"]]], axis=1)\n","test_x[\"test_data\"] = pd.concat([test_x[\"test_data\"], test_x[\"id_table\"][[\"id\"]]], axis=1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1652844005233,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"IQTuvVAt3mG_","outputId":"9dc01721-11b9-4630-b4d0-268aec70bc65"},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1592 entries, 0 to 1591\n","Data columns (total 20 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   내부온도관측치      1276 non-null   float32\n"," 1   외부온도관측치      1296 non-null   float32\n"," 2   내부습도관측치      1278 non-null   float32\n"," 3   외부습도관측치      1290 non-null   float32\n"," 4   CO2관측치       1296 non-null   float32\n"," 5   EC관측치        1286 non-null   float32\n"," 6   최근분무량        1297 non-null   float32\n"," 7   화이트 LED동작강도  1247 non-null   float32\n"," 8   레드 LED동작강도   1233 non-null   float32\n"," 9   블루 LED동작강도   1217 non-null   float32\n"," 10  냉방온도         1272 non-null   float32\n"," 11  냉방부하         1252 non-null   float32\n"," 12  난방온도         1272 non-null   float32\n"," 13  난방부하         1252 non-null   float32\n"," 14  총추정광량        1271 non-null   float32\n"," 15  백색광추정광량      1271 non-null   float32\n"," 16  적색광추정광량      1271 non-null   float32\n"," 17  청색광추정광량      1253 non-null   float32\n"," 18  id           1592 non-null   object \n"," 19  target       1592 non-null   float32\n","dtypes: float32(19), object(1)\n","memory usage: 130.7+ KB\n"]}],"source":["full_x[\"train_data\"].info()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":408,"status":"ok","timestamp":1652844007520,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"4_TnJSFFYIhi","outputId":"f19f8111-315c-4446-9b38-3ed806618fdd"},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 460 entries, 0 to 459\n","Data columns (total 19 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   내부온도관측치      456 non-null    float32\n"," 1   외부온도관측치      455 non-null    float32\n"," 2   내부습도관측치      455 non-null    float32\n"," 3   외부습도관측치      455 non-null    float32\n"," 4   CO2관측치       455 non-null    float32\n"," 5   EC관측치        455 non-null    float32\n"," 6   최근분무량        457 non-null    float32\n"," 7   화이트 LED동작강도  431 non-null    float32\n"," 8   레드 LED동작강도   427 non-null    float32\n"," 9   블루 LED동작강도   433 non-null    float32\n"," 10  냉방온도         448 non-null    float32\n"," 11  냉방부하         448 non-null    float32\n"," 12  난방온도         448 non-null    float32\n"," 13  난방부하         448 non-null    float32\n"," 14  총추정광량        448 non-null    float32\n"," 15  백색광추정광량      448 non-null    float32\n"," 16  적색광추정광량      448 non-null    float32\n"," 17  청색광추정광량      448 non-null    float32\n"," 18  id           460 non-null    object \n","dtypes: float32(18), object(1)\n","memory usage: 36.1+ KB\n"]}],"source":["test_x[\"test_data\"].info()"]},{"cell_type":"markdown","metadata":{"id":"UbeZSKl7f7Y3"},"source":["**선택 feature 시각화**"]},{"cell_type":"markdown","metadata":{"id":"hBe2X10Zl7PS"},"source":["**1. Before removing anomaly**"]},{"cell_type":"markdown","metadata":{"id":"wHqB9dbEjrev"},"source":["**feature distribution**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"78LxkJvsjy7K"},"outputs":[],"source":["# for i in full_x[\"train_data\"].select_dtypes([\"float32\", \"float64\"]):\n","#     if i == \"target\":\n","#         continue\n","#     plt.figure(figsize=(16, 9))\n","#     graph = sns.histplot(full_x[\"train_data\"][i])\n","#     graph.set_title(i + \" 분포 시각화\", fontsize=15, fontweight=\"bold\", pad=15)\n","#     graph.set_xlabel(graph.get_xlabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     graph.set_ylabel(graph.get_ylabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     plt.xticks(np.arange(np.min(full_x[\"train_data\"][i]), np.max(full_x[\"train_data\"][i])+1, (np.max(full_x[\"train_data\"][i])+1-np.min(full_x[\"train_data\"][i]))/10),\n","#             fontsize=12, fontweight=\"bold\")\n","#     plt.yticks(fontsize=12, fontweight=\"bold\")\n","#     plt.savefig(folder_path + \"EDA/graphs/trainFeature_before_remove_anomaly_\" + i)"]},{"cell_type":"markdown","metadata":{"id":"3lhZPQKojurM"},"source":["**target - feature plot**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iHFALIn8f7s3"},"outputs":[],"source":["# for i in full_x[\"train_data\"].select_dtypes([\"float32\", \"float64\"]):\n","#     if i == \"target\":\n","#         continue\n","#     tmp_df = dataframe()\n","#     tmp_df[\"x\"] = full_x[\"train_data\"][i]\n","#     tmp_df[\"y\"] = full_x[\"train_data\"][\"target\"]\n","#     plt.figure(figsize=(16, 9))\n","#     graph = sns.regplot(tmp_df[\"x\"], tmp_df[\"y\"], color=\"green\",\n","#                 scatter_kws={'s':15}, line_kws={\"color\": \"orange\"})\n","#     graph.set_title(i + \" - target 시각화\", fontsize=15, fontweight=\"bold\", pad=15)\n","#     graph.set_xlabel(graph.get_xlabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     graph.set_ylabel(graph.get_ylabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     plt.xticks(np.arange(np.min(full_x[\"train_data\"][i]), np.max(full_x[\"train_data\"][i])+1, (np.max(full_x[\"train_data\"][i])+1-np.min(full_x[\"train_data\"][i]))/10),\n","#             fontsize=12, fontweight=\"bold\")\n","#     plt.yticks(fontsize=12, fontweight=\"bold\")\n","#     plt.savefig(folder_path + \"EDA/graphs/trainTarget_before_remove_anomaly_\" + i)"]},{"cell_type":"markdown","metadata":{"id":"XofDc6nwr1CJ"},"source":["**NA sample analysis & imputing**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":38,"status":"ok","timestamp":1652777779351,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"ZC6mFF2s4Xaa","outputId":"46f05153-b134-4b5b-a421-71c2db081e02"},"outputs":[{"data":{"text/plain":["(295, 17)"]},"execution_count":52,"metadata":{},"output_type":"execute_result"}],"source":["full_x[\"train_data\"][full_x[\"train_data\"].drop([\"id\", \"target\"], axis=1).isna().all(axis=1)].shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":548},"executionInfo":{"elapsed":802,"status":"ok","timestamp":1652777780115,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"wXhrsGfFeR9g","outputId":"291c47a8-da91-40d9-e832-e637f837c17f"},"outputs":[{"data":{"text/plain":["Text(0.5, 1.0, \"target distribution all features' values are nan\")"]},"execution_count":53,"metadata":{},"output_type":"execute_result"},{"name":"stderr","output_type":"stream","text":["findfont: Font family ['NanumSquareB'] not found. Falling back to DejaVu Sans.\n","findfont: Font family ['NanumSquareB'] not found. Falling back to DejaVu Sans.\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 864x576 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["ax = full_x[\"train_data\"][\"target\"][full_x[\"train_data\"].drop([\"id\", \"target\"], axis=1).isna().all(axis=1)].plot.hist(figsize=(12,8), edgecolor=\"black\")\n","ax.set_title(\"target distribution all features' values are nan\", fontsize=20, fontweight=\"bold\", pad=15)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":530},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1652777780116,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"AqjlhRtveR7Y","outputId":"18f6d298-07b2-451b-f15f-d87bdcd8c958"},"outputs":[{"data":{"text/plain":["Text(0.5, 1.0, \"target distribution all features' values are not nan\")"]},"execution_count":54,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 864x576 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["ax = full_x[\"train_data\"][\"target\"][~full_x[\"train_data\"].drop([\"id\", \"target\"], axis=1).isna().all(axis=1)].plot.hist(figsize=(12,8), edgecolor=\"black\")\n","ax.set_title(\"target distribution all features' values are not nan\", fontsize=20, fontweight=\"bold\", pad=15)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XAyXfFKRubZ_"},"outputs":[],"source":["# full_x[\"train_data\"].head()"]},{"cell_type":"markdown","metadata":{"id":"T8aMMvKUNReq"},"source":["# Imputation - MissForest Imputing"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AKfAXJ2yXTVg"},"outputs":[],"source":["# missforest_imputor = MissForest(max_iter=10, n_estimators=1000, max_depth=6, max_features=0.8,\n","#                                 min_samples_split=0.05, min_samples_leaf=5, random_state=42)\n","# imputed_df = pd.concat([full_x[\"train_data\"][[\"id\"]], dataframe(missforest_imputor.fit_transform(full_x[\"train_data\"].drop(\"id\", axis=1)), columns=full_x[\"train_data\"].drop(\"id\", axis=1).columns)], axis=1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UrqCrIDzutzB"},"outputs":[],"source":["# imputed_df[imputed_df.select_dtypes([\"float32\", \"float64\"]).columns] = imputed_df.select_dtypes([\"float32\", \"float64\"]).astype(\"float32\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8za4I5BVqv8H"},"outputs":[],"source":["# imputed_df.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2nmadEfCN6XN"},"outputs":[],"source":["# full_x[\"train_data\"] = imputed_df\n","# full_x[\"train_data\"] = full_x[\"train_data\"][full_x[\"train_data\"][\"id\"] != \"CASE45_17.png\"]\n","# full_x[\"train_data\"].reset_index(drop=True, inplace=True)"]},{"cell_type":"markdown","metadata":{"id":"qK2Rw2IqtO6R"},"source":["**visualization after NA imputing**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tviecNshzUwk"},"outputs":[],"source":["# for i in imputed_df.select_dtypes([\"float32\", \"float64\"]):\n","#     if i == \"target\":\n","#         continue\n","#     plt.figure(figsize=(16, 9))\n","#     graph = sns.regplot(imputed_df[i], imputed_df[\"target\"], color=\"green\",\n","#                 scatter_kws={'s':15}, line_kws={\"color\": \"orange\"})\n","#     graph.set_title(i + \" target과 시각화\", fontsize=15, fontweight=\"bold\", pad=15)\n","#     graph.set_xlabel(graph.get_xlabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     graph.set_ylabel(graph.get_ylabel(), fontsize=12, fontweight=\"bold\", labelpad=15) \n","#     # graph.set_xticks(graph.get_xticks()[::1])\n","#     plt.xticks(np.arange(np.min(imputed_df[i]), np.max(imputed_df[i])+1, (np.max(imputed_df[i])+1-np.min(imputed_df[i]))/10))\n","#     # graph.set_xticklabels(graph.get_xticklabels()[::1], rotation=45)"]},{"cell_type":"markdown","metadata":{"id":"DJ_wQSHffv2d"},"source":["# Imputation - Normal Distribution Imputing"]},{"cell_type":"markdown","metadata":{"id":"7fYAM86ywzDX"},"source":["**feature가 모두 NA인 sample을 랜덤포레스트 방법으로 imputing 시, sample 내 다른 feature를 활용활 수 없는 상황이므로 각 feature에 대해 평균과 비슷하게 imputing이 되어버리는 문제가 발생**"]},{"cell_type":"markdown","metadata":{"id":"SXjflVpfz9pk"},"source":["**차라리 augmentation 비슷한 방법으로 target group별 평균 및 표준편차를 구해, 정규분포 랜덤값으로 NA값을 imputing 하는 것으로 결정**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0Mj5F_zur1TY"},"outputs":[],"source":["# imputed_df = full_x[\"train_data\"].copy()\n","# # imputed_df[\"target_group\"] = pd.cut(np.log1p(imputed_df[\"target\"]), bins=10).astype(\"object\")\n","# imputed_df[\"target_group\"] = pd.cut(imputed_df[\"target\"], bins=10).astype(\"object\")\n","# target_group_mean = imputed_df.groupby(\"target_group\").mean()\n","# target_group_std = np.sqrt(imputed_df.groupby(\"target_group\").std())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RYgMot99CSA5"},"outputs":[],"source":["# imputed_df[\"target_group\"].value_counts().sort_index()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1_AU5g8R2att"},"outputs":[],"source":["# np_rnd.seed(1)\n","# for i in imputed_df[\"target_group\"].value_counts().sort_index().index:\n","#     for j in imputed_df.columns:\n","#         na_mask = imputed_df[imputed_df[\"target_group\"] == i][j].isna()\n","#         if na_mask.sum() <= 0:\n","#             continue\n","#         imputed_df.loc[(imputed_df[\"target_group\"] == i) & na_mask, j] = np_rnd.normal(target_group_mean.loc[i, j], max(1.0, target_group_std.loc[i, j]), na_mask.sum())\n","#         # imputed_df.loc[(imputed_df[\"target_group\"] == i) & na_mask, j] = target_group_mean.loc[i, j] + np.abs(np_rnd.normal(0, max(1.0, target_group_std.loc[i, j]), na_mask.sum()))\n","#         imputed_df[j] = imputed_df[j].apply(lambda x: max(x, full_x[\"train_data\"][j].min()))\n","#         imputed_df[j] = imputed_df[j].apply(lambda x: min(x, full_x[\"train_data\"][j].max()))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RV4i4T7yr1p8"},"outputs":[],"source":["# imputed_df.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"J-UmoGKar1n4"},"outputs":[],"source":["# for i in imputed_df.select_dtypes([\"float32\", \"float64\"]):\n","#     if i in (\"id\", \"target\"):\n","#         continue\n","#     plt.figure(figsize=(16, 9))\n","#     graph = sns.regplot(imputed_df[i], imputed_df[\"target\"], color=\"green\",\n","#                 scatter_kws={'s':15}, line_kws={\"color\": \"orange\"})\n","#     graph.set_title(i + \" target과 시각화\", fontsize=15, fontweight=\"bold\", pad=15)\n","#     graph.set_xlabel(graph.get_xlabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     graph.set_ylabel(graph.get_ylabel(), fontsize=12, fontweight=\"bold\", labelpad=15) \n","#     # graph.set_xticks(graph.get_xticks()[::1])\n","#     plt.xticks(np.arange(np.min(imputed_df[i]), np.max(imputed_df[i])+1, (np.max(imputed_df[i])+1-np.min(imputed_df[i]))/10))\n","#     # graph.set_xticklabels(graph.get_xticklabels()[::1], rotation=45)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YXPZI_VcyOjp"},"outputs":[],"source":["# imputed_df.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L92gSdKaxnVY"},"outputs":[],"source":["# missforest_imputor = MissForest(max_iter=10, n_estimators=1000, max_depth=6, max_features=0.8,\n","#                                 min_samples_split=0.05, min_samples_leaf=5, random_state=42)\n","# missforest_imputor.fit(imputed_df.drop([\"id\", target_var, \"target_group\"], axis=1))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"V10--KfFhzTk"},"outputs":[],"source":["# for i in test_x[\"test_data\"]:\n","#     if i == \"id\":\n","#         continue\n","#     test_x[\"test_data\"][i] = test_x[\"test_data\"][i].fillna(full_x[\"train_data\"][i].median())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AinoXoDVg8BU"},"outputs":[],"source":["# full_x[\"train_data\"] = imputed_df.drop(\"target_group\", axis=1)\n","# full_x[\"train_data\"] = full_x[\"train_data\"][full_x[\"train_data\"][\"id\"] != \"CASE45_17.png\"]\n","# full_x[\"train_data\"].reset_index(drop=True, inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DuT1C1N2hzBT"},"outputs":[],"source":["# full_x[\"train_data\"].info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YQoqwzYkhy-o"},"outputs":[],"source":["# test_x[\"test_data\"].info()"]},{"cell_type":"markdown","metadata":{"id":"-dneoNYlf0dp"},"source":["# Imputation - Drop na values and MissForest Imputing"]},{"cell_type":"markdown","metadata":{"id":"RYUnkwGNMpAP"},"source":["**Drop samples which all the features' are na values and imputing missforest**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MvPRYh7kS5a1"},"outputs":[],"source":["# full_x[\"train_data\"].info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xIooHO6rP17j"},"outputs":[],"source":["# imputed_df = full_x[\"train_data\"].copy()\n","# imputed_df = imputed_df[~imputed_df.drop([\"id\", \"target\"], axis=1).isna().all(axis=1)]\n","# imputed_df.reset_index(drop=True, inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kkP1YQRIQJC9"},"outputs":[],"source":["# imputed_df.drop([\"id\", \"target\"], axis=1).isna().all(axis=1).sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ogrXnJZDQbYy"},"outputs":[],"source":["# imputed_df.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uD-su789QzgA"},"outputs":[],"source":["# missforest_imputor = MissForest(max_iter=10, n_estimators=1000, max_depth=6, max_features=0.8,\n","#                                 min_samples_split=0.05, min_samples_leaf=5, random_state=42)\n","# imputed_df = pd.concat([imputed_df[[\"id\", target_var]], dataframe(missforest_imputor.fit_transform(imputed_df.drop([\"id\", target_var], axis=1)), columns=imputed_df.drop([\"id\", target_var], axis=1).columns)], axis=1)"]},{"cell_type":"markdown","metadata":{"id":"wFv7vu0kQ1bJ"},"source":["**replace original df with imputed df**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ObvFgYyMSKx4"},"outputs":[],"source":["# imputed_df.info()"]},{"cell_type":"markdown","metadata":{"id":"HtEKbKWG7dnZ"},"source":["# Imputation(Present) - using random normal noise & knn obejcts on target"]},{"cell_type":"markdown","metadata":{"id":"UI1FhQDO6cX2"},"source":["**create time series data**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22352,"status":"ok","timestamp":1652861861783,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"qGRKnOw21mpS","outputId":"8734bba3-35b7-491e-848a-e11ae709c046"},"outputs":[{"name":"stdout","output_type":"stream","text":["(1592, 96, 18)\n"]}],"source":["train_timeseries = np.empty((full_x[\"train_data\"].shape[0], group_nums, len(num_vars)))\n","# time group 별 dataframe들을 모두 row-by로 concat한 후 id 를 인덱스로 설정\n","all_timeseries_df = pd.concat([full_x[\"metadata_timegroup_\" + str(i)] for i in range(group_nums)], axis=0).set_index(\"id\")\n","for idx, value in enumerate(full_x[\"train_data\"][\"id\"]):\n","    # 각 sample id 별로 추출하여 3차원 배열에 넣기 (num_vars에 입력된 순서대로 뽑아 입력)\n","    tmp_df = all_timeseries_df.loc[value, num_vars]\n","    # na값이 전체 길이의 50%를 초과하지 않으면 forward fill 적용\n","    for i in tmp_df:\n","        if tmp_df[i].isna().sum() <= len(tmp_df[i]) * 0.5:\n","            tmp_df[i] = tmp_df[i].ffill().bfill()\n","    train_timeseries[idx] = tmp_df.to_numpy(dtype=\"float32\")\n","print(train_timeseries.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"y2skz49Kwyck"},"outputs":[],"source":["full_x_img = full_x[\"id_table\"][\"id\"]\n","full_y = full_x[\"id_table\"][[\"target\"]]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rZw_7tfxeFls"},"outputs":[],"source":["tmp_timeseries = dataframe(np.concatenate([i for i in train_timeseries], axis=0), columns=num_vars)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1652861861784,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"B7x20Zohei9-","outputId":"de2cbb85-d9fe-45b8-ddd7-c700f9356473"},"outputs":[{"data":{"text/plain":["(152832, 18)"]},"execution_count":35,"metadata":{},"output_type":"execute_result"}],"source":["tmp_timeseries.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1652861861784,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"XrP9rRE45sjz","outputId":"6116017e-6b77-48f5-ef32-6f9f729aaed6"},"outputs":[{"data":{"text/plain":["(1592, 96, 18)"]},"execution_count":36,"metadata":{},"output_type":"execute_result"}],"source":["train_timeseries.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1652861861784,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"S3vgk2wB5t06","outputId":"1aedc11d-433c-444c-8fca-712f4de2f846"},"outputs":[{"data":{"text/plain":["(1592,)"]},"execution_count":37,"metadata":{},"output_type":"execute_result"}],"source":["full_x_img.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1652861861784,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"mQT-PW3I5vTE","outputId":"e1688e34-7efc-4436-e74c-a39983a6dec9"},"outputs":[{"data":{"text/plain":["(1592, 1)"]},"execution_count":38,"metadata":{},"output_type":"execute_result"}],"source":["full_y.shape"]},{"cell_type":"markdown","metadata":{"id":"g53u5Pc5XrCd"},"source":["**시계열 데이터를 feature 별로 concat 하여 시각화**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3aejKD2vei8C"},"outputs":[],"source":["# # histogram\n","# for i in tmp_timeseries.select_dtypes([\"float32\", \"float64\"]):\n","#     if i == \"target\":\n","#         continue\n","#     plt.figure(figsize=(16, 9))\n","#     graph = sns.histplot(tmp_timeseries[i])\n","#     graph.set_title(i + \" 분포 시각화\", fontsize=15, fontweight=\"bold\", pad=15)\n","#     graph.set_xlabel(graph.get_xlabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     graph.set_ylabel(graph.get_ylabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     plt.xticks(np.arange(np.min(tmp_timeseries[i]), np.max(tmp_timeseries[i])+1, (np.max(tmp_timeseries[i])+1-np.min(tmp_timeseries[i]))/20),\n","#             fontsize=12, fontweight=\"bold\")\n","#     plt.yticks(fontsize=12, fontweight=\"bold\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rV2azCvbrvz8"},"outputs":[],"source":["# # boxplot\n","# for i in tmp_timeseries.select_dtypes([\"float32\", \"float64\"]):\n","#     if i == \"target\":\n","#         continue\n","#     plt.figure(figsize=(16, 9))\n","#     graph = sns.boxplot(tmp_timeseries[i])\n","#     graph.set_title(i + \" 분포 시각화\", fontsize=15, fontweight=\"bold\", pad=15)\n","#     graph.set_xlabel(graph.get_xlabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     graph.set_ylabel(graph.get_ylabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     plt.xticks(np.arange(np.min(tmp_timeseries[i]), np.max(tmp_timeseries[i])+1, (np.max(tmp_timeseries[i])+1-np.min(tmp_timeseries[i]))/20),\n","#             fontsize=12, fontweight=\"bold\")\n","#     # plt.yticks(fontsize=12, fontweight=\"bold\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PEScI2FUJKn4"},"outputs":[],"source":["# # violin plot\n","# for i in tmp_timeseries.select_dtypes([\"float32\", \"float64\"]):\n","#     if i == \"target\":\n","#         continue\n","#     plt.figure(figsize=(16, 9))\n","#     graph = sns.violinplot(tmp_timeseries[i])\n","#     graph.set_title(i + \" 분포 시각화\", fontsize=15, fontweight=\"bold\", pad=15)\n","#     graph.set_xlabel(graph.get_xlabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     graph.set_ylabel(graph.get_ylabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     plt.xticks(np.arange(np.min(tmp_timeseries[i]), np.max(tmp_timeseries[i])+1, (np.max(tmp_timeseries[i])+1-np.min(tmp_timeseries[i]))/20),\n","#             fontsize=12, fontweight=\"bold\")\n","#     # plt.yticks(fontsize=12, fontweight=\"bold\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_goHIADp2PIY"},"outputs":[],"source":["# plt.figure(figsize=(16, 9))\n","# graph = sns.heatmap(tmp_timeseries.corr().round(2), annot=True, cmap=\"YlGnBu\", annot_kws={\"fontsize\": 13, \"fontweight\": \"bold\"})\n","# graph.set_xticklabels(graph.get_xticklabels(), fontsize=12, fontweight=\"bold\", rotation=45)\n","# graph.set_yticklabels(graph.get_yticklabels(), fontsize=12, fontweight=\"bold\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1652777807531,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"6G0ZVK4Ogw2m","outputId":"8de4ddde-33bb-44a2-9772-95c2a1c16784"},"outputs":[{"data":{"text/plain":["0.000000      9418\n","74.559998       29\n","80.989998      139\n","87.419998       55\n","106.709999       2\n","Name: 최근분무량, dtype: int64"]},"execution_count":89,"metadata":{},"output_type":"execute_result"}],"source":["tmp_timeseries[\"최근분무량\"].value_counts().sort_index().head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1652777807531,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"HHJDqUtq64Jm","outputId":"489a6f83-77e6-4f8d-f9d8-97913cbb524e"},"outputs":[{"data":{"text/plain":["0.0    1685\n","5.5       2\n","5.6       6\n","5.8      10\n","5.9       8\n","Name: 외부습도관측치, dtype: int64"]},"execution_count":90,"metadata":{},"output_type":"execute_result"}],"source":["tmp_timeseries[\"외부습도관측치\"].value_counts().sort_index().head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1652777807531,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"_GTKd4AV86p5","outputId":"cda87c02-c5e5-4224-fe03-99d567770509"},"outputs":[{"data":{"text/plain":["0.000000    11413\n","0.000756        1\n","0.000770       18\n","0.000905       33\n","0.000939        2\n","Name: EC관측치, dtype: int64"]},"execution_count":91,"metadata":{},"output_type":"execute_result"}],"source":["tmp_timeseries[\"EC관측치\"].value_counts().sort_index().head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"J5kdA6wDXqVU"},"outputs":[],"source":["del tmp_timeseries"]},{"cell_type":"markdown","metadata":{"id":"4Il3WJiw1xSh"},"source":["**필요한 feature만 추출 후 다시 train timeseries 데이터 생성 & 이상치 제거**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9zZE08P71zzN"},"outputs":[],"source":["# num_vars = [\"내부온도관측치\", \"내부습도관측치\", \"CO2관측치\", \"EC관측치\", \"최근분무량\",\n","#             \"화이트 LED동작강도\", \"레드 LED동작강도\", \"블루 LED동작강도\",\n","#             \"냉방온도\", \"냉방부하\", \"난방온도\", \"난방부하\"]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1652861861785,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"UNgLkKrQ6ls9","outputId":"92f67114-b2c2-4c38-98f0-ab924dbe65f3"},"outputs":[{"name":"stdout","output_type":"stream","text":["['내부온도관측치', '외부온도관측치', '내부습도관측치', '외부습도관측치', 'CO2관측치', 'EC관측치', '최근분무량', '화이트 LED동작강도', '레드 LED동작강도', '블루 LED동작강도', '냉방온도', '냉방부하', '난방온도', '난방부하', '총추정광량', '백색광추정광량', '적색광추정광량', '청색광추정광량']\n"]}],"source":["print(num_vars)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19481,"status":"ok","timestamp":1652861881256,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"uabWm7K61xCb","outputId":"5c12d895-a733-478c-bfbd-346847335aa0"},"outputs":[{"name":"stdout","output_type":"stream","text":["(1592, 96, 18)\n"]}],"source":["train_timeseries = np.empty((full_x[\"train_data\"].shape[0], group_nums, len(num_vars)))\n","# time group 별 dataframe들을 모두 row-by로 concat한 후 id 를 인덱스로 설정\n","all_timeseries_df = pd.concat([full_x[\"metadata_timegroup_\" + str(i)] for i in range(group_nums)], axis=0).set_index(\"id\")\n","for idx, value in enumerate(full_x[\"train_data\"][\"id\"]):\n","    # 각 sample id 별로 추출하여 3차원 배열에 넣기 (num_vars에 입력된 순서대로 뽑아 입력)\n","    tmp_df = all_timeseries_df.loc[value, num_vars]\n","    # na값이 전체 길이의 50%를 초과하지 않으면 forward fill 적용\n","    for i in tmp_df:\n","        if tmp_df[i].isna().sum() <= len(tmp_df[i]) * 0.5:\n","            tmp_df[i] = tmp_df[i].ffill().bfill()\n","    train_timeseries[idx] = tmp_df.to_numpy(dtype=\"float32\")\n","print(train_timeseries.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bpS_J83fL0wV"},"outputs":[],"source":["drop_list = (full_x[\"id_table\"][\"id\"] == \"CASE45_17.png\") | \\\n","            (full_x[\"id_table\"][\"id\"].apply(lambda x: True if x.split(\"_\")[0] in (\"CASE59\") else False)) | \\\n","            (full_y[\"target\"] == 0.0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"b6vx471C6ILc"},"outputs":[],"source":["# drop_list = (full_x[\"id_table\"][\"id\"] == \"CASE45_17.png\") | \\\n","#             (full_x[\"id_table\"][\"id\"].apply(lambda x: True if x.split(\"_\")[0] in (\"CASE59\") else False)) | \\\n","#             (full_x[\"id_table\"][\"id\"].apply(lambda x: True if x.split(\"_\")[0] in (\"CASE10\", \"CASE11\", \"CASE12\", \"CASE13\", \"CASE14\") else False)) | \\\n","#             (full_y[\"target\"] == 0.0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WrvnjpnG6IJH"},"outputs":[],"source":["train_timeseries = train_timeseries[~drop_list]\n","full_x_img = full_x[\"id_table\"][\"id\"][~drop_list]; full_x_img.reset_index(drop=True, inplace=True)\n","full_y = full_x[\"id_table\"][[\"target\"]][~drop_list]; full_y.reset_index(drop=True, inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1652861881256,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"SoS49wH56IG4","outputId":"cc00608b-fdf1-4de6-b66c-bf9049f498a0"},"outputs":[{"data":{"text/plain":["(1550, 96, 18)"]},"execution_count":44,"metadata":{},"output_type":"execute_result"}],"source":["train_timeseries.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1652861881257,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"w2v61-QR6hZI","outputId":"dc170a4f-cf15-4273-cc6b-e4427beb9c55"},"outputs":[{"data":{"text/plain":["(1550,)"]},"execution_count":45,"metadata":{},"output_type":"execute_result"}],"source":["full_x_img.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1652861881257,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"xVTlsifB6hXC","outputId":"6939dc40-537c-409c-8700-d5e01d068e9c"},"outputs":[{"data":{"text/plain":["(1550, 1)"]},"execution_count":46,"metadata":{},"output_type":"execute_result"}],"source":["full_y.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"K3p-L12dv8mb"},"outputs":[],"source":["notAll_na_list = np.ones(train_timeseries.shape[0], dtype=\"bool\")\n","notAny_na_list = np.ones(train_timeseries.shape[0], dtype=\"bool\")\n","for i in range(train_timeseries.shape[0]):\n","    if np.isnan(train_timeseries[i]).sum() == train_timeseries.shape[1] * train_timeseries.shape[2]:\n","        notAll_na_list[i] = False\n","    elif np.isnan(train_timeseries[i]).sum() > 0:\n","        notAny_na_list[i] = False"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1652861881257,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"7pk0NIkuv8jz","outputId":"05231f87-2594-44d0-ef9f-5e80a45e81f7"},"outputs":[{"name":"stdout","output_type":"stream","text":["모든 데이터가 nan 인 샘플\n","245\n","하나 이상의 데이터가 nan 인 샘플\n","40\n"]}],"source":["print(\"모든 데이터가 nan 인 샘플\")\n","print(np.invert(notAll_na_list).sum())\n","print(\"하나 이상의 데이터가 nan 인 샘플\")\n","print(np.invert(notAny_na_list).sum())"]},{"cell_type":"markdown","metadata":{"id":"VSJkesZ4XXzs"},"source":["**시계열 데이터 분포에 근거하여 이상치를 nan으로 대치 후 foward fill**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"04sGr9zsErTB"},"outputs":[],"source":["def insert_nan_anomaly(x):\n","    tmp_df = dataframe(x, columns=num_vars)\n","    tmp_df[\"최근분무량\"][tmp_df[\"최근분무량\"] > 100000.0] = nan\n","    # na값이 전체 길이의 50%를 초과하지 않으면 forward fill 적용\n","    for i in tmp_df:\n","        if tmp_df[i].isna().sum() <= len(tmp_df[i]) * 0.5:\n","            tmp_df[i] = tmp_df[i].ffill().bfill()\n","    return array(tmp_df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JBje4bESF-IH"},"outputs":[],"source":["for i in range(train_timeseries.shape[0]):\n","    train_timeseries[i] = insert_nan_anomaly(train_timeseries[i])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NVd4IV-XwHE2"},"outputs":[],"source":["notAll_na_list = np.ones(train_timeseries.shape[0], dtype=\"bool\")\n","notAny_na_list = np.ones(train_timeseries.shape[0], dtype=\"bool\")\n","for i in range(train_timeseries.shape[0]):\n","    if np.isnan(train_timeseries[i]).sum() == train_timeseries.shape[1] * train_timeseries.shape[2]:\n","        notAll_na_list[i] = False\n","    elif np.isnan(train_timeseries[i]).sum() > 0:\n","        notAny_na_list[i] = False"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1652861897562,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"_y68qnFZwIJw","outputId":"447616d2-f7f9-4d36-9408-b4bac55069a1"},"outputs":[{"name":"stdout","output_type":"stream","text":["모든 데이터가 nan 인 샘플\n","245\n","하나 이상의 데이터가 nan 인 샘플\n","40\n"]}],"source":["print(\"모든 데이터가 nan 인 샘플\")\n","print(np.invert(notAll_na_list).sum())\n","print(\"하나 이상의 데이터가 nan 인 샘플\") 45 40\n","print(np.invert(notAny_na_list).sum())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OnvubQyWKLa_"},"outputs":[],"source":["# anomaly_vec = anomaly_vec[0] & anomaly_vec[1] & anomaly_vec[2]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hLC2DyNjiISO"},"outputs":[],"source":["# print(\"samples before removig anoamlies :\", train_timeseries.shape[0])\n","# print(\"samples after removig anoamlies :\", sum(anomaly_vec))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"e4y6aEfciAJm"},"outputs":[],"source":["# train_timeseries = train_timeseries[anomaly_vec]\n","# full_x[\"train_data\"] = full_x[\"train_data\"][anomaly_vec]\n","# full_x[\"train_data\"].reset_index(drop=True, inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jQ4T32p63sed"},"outputs":[],"source":["# train_timeseries.shape[1] * train_timeseries.shape[2]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zcroQuyPlutd"},"outputs":[],"source":["# notAll_na_list = np.ones(train_timeseries.shape[0], dtype=\"bool\")\n","# notAny_na_list = np.ones(train_timeseries.shape[0], dtype=\"bool\")\n","# for i in range(train_timeseries.shape[0]):\n","#     if np.isnan(train_timeseries[i]).sum() == train_timeseries.shape[1] * train_timeseries.shape[2]:\n","#         notAll_na_list[i] = False\n","#     elif np.isnan(train_timeseries[i]).sum() > 0:\n","#         notAny_na_list[i] = False"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aU9c1TxP3o9I"},"outputs":[],"source":["# print(\"모든 데이터가 nan 인 샘플\")\n","# print(np.invert(notAll_na_list).sum())\n","# print(\"하나 이상의 데이터가 nan 인 샘플\")\n","# print(np.invert(notAny_na_list).sum())"]},{"cell_type":"markdown","metadata":{"id":"l-Ec3PtY2S13"},"source":["**test timeseries 데이터 생성**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5867,"status":"ok","timestamp":1652861908234,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"aq6Fqcf31JfZ","outputId":"8e30b632-e5dc-4687-ea85-ded56940a4dc"},"outputs":[{"name":"stdout","output_type":"stream","text":["(460, 96, 18)\n"]}],"source":["test_timeseries = np.empty((test_x[\"test_data\"].shape[0], group_nums, len(num_vars)))\n","all_timeseries_df = pd.concat([test_x[\"metadata_timegroup_\" + str(i)] for i in range(group_nums)], axis=0).set_index(\"id\")\n","for idx, value in enumerate(test_x[\"test_data\"][\"id\"]):\n","    # fill & bfill 후 nan 값이 남아있는 timeseries 데이터는 모든 데이터가 nan 값이기 때문임\n","    tmp_df = all_timeseries_df.loc[value, num_vars]\n","    # na값이 전체 길이의 50%를 초과하지 않으면 forward fill 적용\n","    for i in tmp_df:\n","        if tmp_df[i].isna().sum() <= len(tmp_df[i]) * 0.5:\n","            tmp_df[i] = tmp_df[i].ffill().bfill()\n","    test_timeseries[idx] = tmp_df.to_numpy(dtype=\"float32\")\n","print(test_timeseries.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"A0rXodQ41USB"},"outputs":[],"source":["test_x_img = test_x[\"id_table\"][\"id\"]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FvPgpAJV1wkZ"},"outputs":[],"source":["notAll_na_list = np.ones(test_timeseries.shape[0], dtype=\"bool\")\n","notAny_na_list = np.ones(test_timeseries.shape[0], dtype=\"bool\")\n","for i in range(test_timeseries.shape[0]):\n","    if np.isnan(test_timeseries[i]).sum() == test_timeseries.shape[1] * test_timeseries.shape[2]:\n","        notAll_na_list[i] = False\n","    elif np.isnan(test_timeseries[i]).sum() > 0:\n","        notAny_na_list[i] = False"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1652861908235,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"yTSTqSL5TmjW","outputId":"bb490565-da51-4e73-b87e-8568295f192f"},"outputs":[{"data":{"text/plain":["1485"]},"execution_count":56,"metadata":{},"output_type":"execute_result"}],"source":["np.isnan(test_timeseries).sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":261,"status":"ok","timestamp":1652861909891,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"6CZgNUDh1y6B","outputId":"25c65f74-7125-4d9c-ab9f-0b4564e1ff81"},"outputs":[{"name":"stdout","output_type":"stream","text":["모든 데이터가 nan 인 샘플\n","0\n","하나 이상의 데이터가 nan 인 샘플\n","2\n"]}],"source":["print(\"모든 데이터가 nan 인 샘플\")\n","print(np.invert(notAll_na_list).sum())\n","print(\"하나 이상의 데이터가 nan 인 샘플\")\n","print(np.invert(notAny_na_list).sum())"]},{"cell_type":"markdown","metadata":{"id":"Sv6hj7cT5PR5"},"source":["# 1. drop NA"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Mm9FsXZf6Y62"},"outputs":[],"source":["# train_timeseries = train_timeseries[all_na_list]\n","# full_x_img = full_x_img[all_na_list]; full_x_img.reset_index(drop=True, inplace=True)\n","# full_y = full_y[all_na_list]; full_y.reset_index(drop=True, inplace=True)"]},{"cell_type":"markdown","metadata":{"id":"YjzPSUN7vgfm"},"source":["**image 이상치 & target이 0인 sample drop**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hGN9UPFWv3gi"},"outputs":[],"source":["# train_timeseries = train_timeseries[full_x_img != \"CASE45_17.png\"]\n","# full_y = full_y[full_x_img != \"CASE45_17.png\"]; full_y.reset_index(drop=True, inplace=True)\n","# full_x_img = full_x_img[full_x_img != \"CASE45_17.png\"]; full_x_img.reset_index(drop=True, inplace=True)\n","\n","# train_timeseries = train_timeseries[full_y[\"target\"] == 0]\n","# full_x_img = full_x_img[full_y[\"target\"] == 0]; full_x_img.reset_index(drop=True, inplace=True)\n","# full_y = full_y[full_y[\"target\"] == 0]; full_y.reset_index(drop=True, inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5sU61R0y6bJa"},"outputs":[],"source":["# train_timeseries.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NwJ_6QomcLSR"},"outputs":[],"source":["# viz_df = dataframe(np.concatenate([i for i in train_timeseries], axis=0), columns=num_vars)\n","# for i in viz_df:\n","#     print(viz_df[i].value_counts())\n","#     print()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Tcc0ZbvOcIos"},"outputs":[],"source":["# for i in viz_df.select_dtypes([\"float32\", \"float64\"]):\n","#     if i == \"target\":\n","#         continue\n","#     plt.figure(figsize=(16, 9))\n","#     graph = sns.histplot(viz_df[i])\n","#     graph.set_title(i + \" 분포 시각화\", fontsize=15, fontweight=\"bold\", pad=15)\n","#     graph.set_xlabel(graph.get_xlabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     graph.set_ylabel(graph.get_ylabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     plt.xticks(np.arange(np.min(viz_df[i]), np.max(viz_df[i])+1, (np.max(viz_df[i])+1-np.min(viz_df[i]))/10),\n","#             fontsize=12, fontweight=\"bold\")\n","#     plt.yticks(fontsize=12, fontweight=\"bold\")\n","#     # plt.savefig(folder_path + \"EDA/graphs/trainFeature_before_remove_anomaly_\" + i)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Nf_aPu14RuuJ"},"outputs":[],"source":["# test_timeseries = np.empty((test_x[\"test_data\"].shape[0], group_nums, len(num_vars)))\n","# all_timeseries_df = pd.concat([test_x[\"metadata_timegroup_\" + str(i)] for i in range(group_nums)], axis=0).set_index(\"id\")\n","# for idx, value in enumerate(test_x[\"test_data\"][\"id\"]):\n","#     # if (~tmp_df.loc[value, num_vars].isna()).sum().sum() == 0:\n","#     #     print(\"all values are nan :\", value)\n","#     # elif tmp_df.loc[value, num_vars].isna().sum().sum() >= len(num_vars) * 24 // 2:\n","#     #     print(\"na values are half :\", value)\n","#     # fill & bfill 후 nan 값이 남아있는 timeseries 데이터는 모든 데이터가 nan 값이기 때문임\n","#     test_timeseries[idx] = all_timeseries_df.loc[value, num_vars].ffill().bfill().to_numpy(dtype=\"float32\")\n","# print(test_timeseries.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Uwu_dMWiFiAV"},"outputs":[],"source":["# test_x_img = test_x[\"id_table\"][\"id\"]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"b5tFjS7clmU0"},"outputs":[],"source":["# all_na_list = np.ones(test_timeseries.shape[0], dtype=\"bool\")\n","# exist_na_list = np.ones(test_timeseries.shape[0], dtype=\"bool\")\n","# for i in range(test_timeseries.shape[0]):\n","#     if np.isnan(test_timeseries[i]).sum() == test_timeseries.shape[1] * test_timeseries.shape[2]:\n","#         all_na_list[i] = False\n","#     elif np.isnan(test_timeseries[i]).sum() > test_timeseries.shape[1] * test_timeseries.shape[2]:\n","#         exist_na_list[i] = False"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iv1w1SJn6qIu"},"outputs":[],"source":["# print(\"모든 데이터가 nan 인 샘플\")\n","# print(np.invert(all_na_list).sum())\n","# print(\"하나 이상의 데이터가 nan 인 샘플\")\n","# print(np.invert(exist_na_list).sum())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_7Pls7717ZWR"},"outputs":[],"source":["# ct = ColumnTransformer([\n","#     (\"내부온도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부온도관측치\"]),\n","#     (\"내부습도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부습도관측치\"]),\n","#     (\"CO2관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"CO2관측치\"]),\n","#     (\"EC관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"EC관측치\"]),\n","#     (\"최근분무량_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"최근분무량\"]),\n","#     (\"화이트 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"화이트 LED동작강도\"]),\n","#     (\"레드 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"레드 LED동작강도\"]),\n","#     (\"블루 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"블루 LED동작강도\"]),\n","#     (\"냉방온도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방온도\"]),\n","#     (\"냉방부하_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방부하\"]),\n","#     (\"난방온도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방온도\"]),\n","#     (\"난방부하_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방부하\"]),\n","# ])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DdwPWmmV7h_4"},"outputs":[],"source":["# ct.fit(pd.concat([dataframe(i, columns=num_vars) for i in train_timeseries], axis=0).dropna())"]},{"cell_type":"markdown","metadata":{"id":"dzczjMD_5UbD"},"source":["# 2. KNN Imputing"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4lgZyXsCwfcr"},"outputs":[],"source":["# # remove image anomaly\n","# train_timeseries = train_timeseries[full_x_img != \"CASE45_17.png\"]\n","# full_y = full_y[full_x_img != \"CASE45_17.png\"]; full_y.reset_index(drop=True, inplace=True)\n","# full_x_img = full_x_img[full_x_img != \"CASE45_17.png\"]; full_x_img.reset_index(drop=True, inplace=True)\n","# # remove target 0\n","# train_timeseries = train_timeseries[full_y[\"target\"] != 0.0]\n","# full_x_img = full_x_img[full_y[\"target\"] != 0.0]; full_x_img.reset_index(drop=True, inplace=True)\n","# full_y = full_y[full_y[\"target\"] != 0.0]; full_y.reset_index(drop=True, inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1652777856442,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"P7M-fzN57v02","outputId":"4b07a784-205c-4be7-c851-2edbc2d5f683"},"outputs":[{"data":{"text/plain":["0       CASE01_01.png\n","1       CASE01_02.png\n","2       CASE01_03.png\n","3       CASE01_04.png\n","4       CASE01_05.png\n","            ...      \n","1338    CASE74_25.png\n","1339    CASE74_26.png\n","1340    CASE74_27.png\n","1341    CASE75_01.png\n","1342    CASE75_02.png\n","Name: id, Length: 1343, dtype: object"]},"execution_count":130,"metadata":{},"output_type":"execute_result"}],"source":["full_x_img"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17,"status":"ok","timestamp":1652777856442,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"D9NhSIBY7xNb","outputId":"614a4db1-c0f3-4476-d32b-58d1a4456e3b"},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1343 entries, 0 to 1342\n","Data columns (total 1 columns):\n"," #   Column  Non-Null Count  Dtype  \n","---  ------  --------------  -----  \n"," 0   target  1343 non-null   float32\n","dtypes: float32(1)\n","memory usage: 5.4 KB\n"]}],"source":["full_y.info()"]},{"cell_type":"markdown","metadata":{"id":"gLVJZsMDdv9d"},"source":["**imputing 전, 사전 discretizer fit 작업 (imputing 된 값이 군집에 영향을 미칠 수 있으므로)**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XD6iVg97MDu2"},"outputs":[],"source":["ct = ColumnTransformer([\n","    (\"내부온도관측치_discret\", KBinsDiscretizer(128, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부온도관측치\"]),\n","    (\"외부온도관측치_discret\", KBinsDiscretizer(128, encode=\"ordinal\", strategy=\"kmeans\"), [\"외부온도관측치\"]),\n","    (\"내부습도관측치_discret\", KBinsDiscretizer(128, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부습도관측치\"]),\n","    (\"외부습도관측치_discret\", KBinsDiscretizer(128, encode=\"ordinal\", strategy=\"kmeans\"), [\"외부습도관측치\"]),\n","    (\"CO2관측치_discret\", KBinsDiscretizer(128, encode=\"ordinal\", strategy=\"kmeans\"), [\"CO2관측치\"]),\n","    (\"EC관측치_discret\", KBinsDiscretizer(16, encode=\"ordinal\", strategy=\"kmeans\"), [\"EC관측치\"]),\n","    (\"최근분무량_discret\", KBinsDiscretizer(128, encode=\"ordinal\", strategy=\"kmeans\"), [\"최근분무량\"]),\n","    (\"화이트 LED동작강도_discret\", KBinsDiscretizer(16, encode=\"ordinal\", strategy=\"kmeans\"), [\"화이트 LED동작강도\"]),\n","    (\"레드 LED동작강도_discret\", KBinsDiscretizer(16, encode=\"ordinal\", strategy=\"kmeans\"), [\"레드 LED동작강도\"]),\n","    (\"블루 LED동작강도_discret\", KBinsDiscretizer(16, encode=\"ordinal\", strategy=\"kmeans\"), [\"블루 LED동작강도\"]),\n","    (\"냉방온도_discret\", KBinsDiscretizer(16, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방온도\"]),\n","    (\"냉방부하_discret\", KBinsDiscretizer(128, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방부하\"]),\n","    (\"난방온도_discret\", KBinsDiscretizer(16, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방온도\"]),\n","    (\"난방부하_discret\", KBinsDiscretizer(128, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방부하\"]),\n","    (\"총추정광량_discret\", KBinsDiscretizer(16, encode=\"ordinal\", strategy=\"kmeans\"), [\"총추정광량\"]),\n","    (\"백색광추정광량_discret\", KBinsDiscretizer(16, encode=\"ordinal\", strategy=\"kmeans\"), [\"백색광추정광량\"]),\n","    (\"적색광추정광량_discret\", KBinsDiscretizer(16, encode=\"ordinal\", strategy=\"kmeans\"), [\"적색광추정광량\"]),\n","    (\"청색광추정광량_discret\", KBinsDiscretizer(16, encode=\"ordinal\", strategy=\"kmeans\"), [\"청색광추정광량\"]),\n","])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ForlaImG7g3P"},"outputs":[],"source":["# ct = ColumnTransformer([\n","#     (\"내부온도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부온도관측치\"]),\n","#     (\"외부온도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"외부온도관측치\"]),\n","#     (\"내부습도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부습도관측치\"]),\n","#     (\"외부습도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"외부습도관측치\"]),\n","#     (\"CO2관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"CO2관측치\"]),\n","#     (\"EC관측치_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"EC관측치\"]),\n","#     (\"최근분무량_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"최근분무량\"]),\n","#     (\"화이트 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"화이트 LED동작강도\"]),\n","#     (\"레드 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"레드 LED동작강도\"]),\n","#     (\"블루 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"블루 LED동작강도\"]),\n","#     (\"냉방온도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방온도\"]),\n","#     (\"냉방부하_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방부하\"]),\n","#     (\"난방온도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방온도\"]),\n","#     (\"난방부하_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방부하\"]),\n","#     (\"총추정광량_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"총추정광량\"]),\n","# ])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rEzv7YU29x8D"},"outputs":[],"source":["# ct = ColumnTransformer([\n","#     (\"내부온도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부온도관측치\"]),\n","#     (\"외부온도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"외부온도관측치\"]),\n","#     (\"내부습도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부습도관측치\"]),\n","#     (\"외부습도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"외부습도관측치\"]),\n","#     (\"CO2관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"CO2관측치\"]),\n","#     (\"EC관측치_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"EC관측치\"]),\n","#     (\"최근분무량_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"최근분무량\"]),\n","#     (\"화이트 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"화이트 LED동작강도\"]),\n","#     (\"레드 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"레드 LED동작강도\"]),\n","#     (\"블루 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"블루 LED동작강도\"]),\n","#     (\"냉방온도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방온도\"]),\n","#     (\"냉방부하_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방부하\"]),\n","#     (\"난방온도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방온도\"]),\n","#     (\"난방부하_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방부하\"]),\n","#     (\"총추정광량_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"총추정광량\"]),\n","#     (\"백색광추정광량_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"백색광추정광량\"]),\n","#     (\"적색광추정광량_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"적색광추정광량\"]),\n","#     (\"청색광추정광량_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"청색광추정광량\"]),\n","# ])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TyBJ5p35dvt2"},"outputs":[],"source":["# ct = ColumnTransformer([\n","#     (\"내부온도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부온도관측치\"]),\n","#     (\"내부습도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부습도관측치\"]),\n","#     (\"CO2관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"CO2관측치\"]),\n","#     (\"EC관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"EC관측치\"]),\n","#     (\"최근분무량_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"최근분무량\"]),\n","#     (\"화이트 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"화이트 LED동작강도\"]),\n","#     (\"레드 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"레드 LED동작강도\"]),\n","#     (\"블루 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"블루 LED동작강도\"]),\n","#     (\"냉방온도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방온도\"]),\n","#     (\"냉방부하_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방부하\"]),\n","#     (\"난방온도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방온도\"]),\n","#     (\"난방부하_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방부하\"]),\n","# ])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"l7VyFIzC0Qa_"},"outputs":[],"source":["cat_vars = [i[0] for i in ct._transformers]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2462,"status":"ok","timestamp":1652861917609,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"lrSncj5hIxxo","outputId":"ad1e75e4-abe8-431e-e8ab-8fc32ccc561f"},"outputs":[{"data":{"text/plain":["ColumnTransformer(transformers=[('내부온도관측치_discret',\n","                                 KBinsDiscretizer(encode='ordinal', n_bins=128,\n","                                                  strategy='kmeans'),\n","                                 ['내부온도관측치']),\n","                                ('외부온도관측치_discret',\n","                                 KBinsDiscretizer(encode='ordinal', n_bins=128,\n","                                                  strategy='kmeans'),\n","                                 ['외부온도관측치']),\n","                                ('내부습도관측치_discret',\n","                                 KBinsDiscretizer(encode='ordinal', n_bins=128,\n","                                                  strategy='kmeans'),\n","                                 ['내부습도관측치']),\n","                                ('외부습도관측치_discret',\n","                                 KBinsDiscre...\n","                                 KBinsDiscretizer(encode='ordinal', n_bins=16,\n","                                                  strategy='kmeans'),\n","                                 ['총추정광량']),\n","                                ('백색광추정광량_discret',\n","                                 KBinsDiscretizer(encode='ordinal', n_bins=16,\n","                                                  strategy='kmeans'),\n","                                 ['백색광추정광량']),\n","                                ('적색광추정광량_discret',\n","                                 KBinsDiscretizer(encode='ordinal', n_bins=16,\n","                                                  strategy='kmeans'),\n","                                 ['적색광추정광량']),\n","                                ('청색광추정광량_discret',\n","                                 KBinsDiscretizer(encode='ordinal', n_bins=16,\n","                                                  strategy='kmeans'),\n","                                 ['청색광추정광량'])])"]},"execution_count":60,"metadata":{},"output_type":"execute_result"}],"source":["ct.fit(pd.concat([dataframe(i, columns=num_vars) for i in train_timeseries], axis=0).dropna())"]},{"cell_type":"markdown","metadata":{"id":"OlY6peww6MHM"},"source":["**결측된 데이터가 있는 특정 샘플에 대해 knn을 찾고 random normal imputing 시행 (target 값 사용)**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"R4hk-WFT4n6u"},"outputs":[],"source":["# 모든 데이터가 nan인 index 산출\n","notAll_na_list = np.ones(train_timeseries.shape[0], dtype=\"bool\")\n","notAny_na_list = np.ones(train_timeseries.shape[0], dtype=\"bool\")\n","for i in range(train_timeseries.shape[0]):\n","    if np.isnan(train_timeseries[i]).sum() == train_timeseries.shape[1] * train_timeseries.shape[2]:\n","        notAll_na_list[i] = False\n","    elif np.isnan(train_timeseries[i]).sum() > 0:\n","        notAny_na_list[i] = False"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1,"status":"ok","timestamp":1652861922784,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"4sq1JRfl61C2","outputId":"8e9f9c4c-1054-40fe-e088-4b9d495a66dc"},"outputs":[{"name":"stdout","output_type":"stream","text":["모든 데이터가 nan 인 샘플\n","245\n","하나 이상의 데이터가 nan 인 샘플\n","40\n"]}],"source":["print(\"모든 데이터가 nan 인 샘플\")\n","print(np.invert(notAll_na_list).sum())\n","print(\"하나 이상의 데이터가 nan 인 샘플\")\n","print(np.invert(notAny_na_list).sum())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1652861923876,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"fvbViEkhtr_Z","outputId":"eae6ff09-53f1-4bd8-844c-d42f678f1e17"},"outputs":[{"data":{"text/plain":["0"]},"execution_count":63,"metadata":{},"output_type":"execute_result"}],"source":["np.isnan(train_timeseries[notAll_na_list & notAny_na_list]).sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7LVY5vZUtoys"},"outputs":[],"source":["candidates_mask = notAll_na_list & notAny_na_list"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0zIpcmXAhCpQ"},"outputs":[],"source":["knn_candidates = full_y[[\"target\"]][candidates_mask].copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9HOt9KxL5S12"},"outputs":[],"source":["# minmax normalization\n","knn_scaler = MinMaxScaler()\n","knn_candidates = dataframe(knn_scaler.fit_transform(knn_candidates), index=knn_candidates.index)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oOo0M-I77pRr"},"outputs":[],"source":["img_size = 128\n","channels = 3\n","knn_img = np.empty((candidates_mask.sum(), img_size * img_size * channels))\n","for idx, value in enumerate(full_x_img[candidates_mask].apply(lambda x: get_image_path(x, train=True))):\n","    image = tf.io.read_file(value)\n","    image = tf.io.decode_image(image, channels=channels, expand_animations=False)\n","    image = tf.cast(image, tf.float32)\n","    image = tf.image.resize_with_pad(image, img_size, img_size, antialias=True).numpy().flatten() / 255.0\n","    knn_img[idx] = image"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qktyAANZ7pPh"},"outputs":[],"source":["knn_candidates = pd.concat([dataframe(knn_img, index=knn_candidates.index), knn_candidates], axis=1).astype(\"float32\")\n","knn_candidates.columns = list(range(knn_candidates.shape[1]))\n","del knn_img"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2794,"status":"ok","timestamp":1652862465773,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"jWKEE6BA-6py","outputId":"325941f8-6689-4947-85b7-7e1515f92495"},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 1265 entries, 20 to 1549\n","Columns: 49153 entries, 0 to 49152\n","dtypes: float32(49153)\n","memory usage: 237.2 MB\n"]}],"source":["knn_candidates.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1652862465774,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"Q4ZNtzOE7kuJ","outputId":"d9a93bad-f834-48d2-8b56-106ac9d6d040"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-82b06c71-208d-4fcd-9f03-1976d6427b53\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","      <th>11</th>\n","      <th>12</th>\n","      <th>13</th>\n","      <th>14</th>\n","      <th>15</th>\n","      <th>16</th>\n","      <th>17</th>\n","      <th>18</th>\n","      <th>19</th>\n","      <th>20</th>\n","      <th>21</th>\n","      <th>22</th>\n","      <th>23</th>\n","      <th>24</th>\n","      <th>25</th>\n","      <th>26</th>\n","      <th>27</th>\n","      <th>28</th>\n","      <th>29</th>\n","      <th>30</th>\n","      <th>31</th>\n","      <th>32</th>\n","      <th>33</th>\n","      <th>34</th>\n","      <th>35</th>\n","      <th>36</th>\n","      <th>37</th>\n","      <th>38</th>\n","      <th>39</th>\n","      <th>40</th>\n","      <th>41</th>\n","      <th>42</th>\n","      <th>43</th>\n","      <th>44</th>\n","      <th>45</th>\n","      <th>46</th>\n","      <th>47</th>\n","      <th>48</th>\n","      <th>49</th>\n","      <th>...</th>\n","      <th>49103</th>\n","      <th>49104</th>\n","      <th>49105</th>\n","      <th>49106</th>\n","      <th>49107</th>\n","      <th>49108</th>\n","      <th>49109</th>\n","      <th>49110</th>\n","      <th>49111</th>\n","      <th>49112</th>\n","      <th>49113</th>\n","      <th>49114</th>\n","      <th>49115</th>\n","      <th>49116</th>\n","      <th>49117</th>\n","      <th>49118</th>\n","      <th>49119</th>\n","      <th>49120</th>\n","      <th>49121</th>\n","      <th>49122</th>\n","      <th>49123</th>\n","      <th>49124</th>\n","      <th>49125</th>\n","      <th>49126</th>\n","      <th>49127</th>\n","      <th>49128</th>\n","      <th>49129</th>\n","      <th>49130</th>\n","      <th>49131</th>\n","      <th>49132</th>\n","      <th>49133</th>\n","      <th>49134</th>\n","      <th>49135</th>\n","      <th>49136</th>\n","      <th>49137</th>\n","      <th>49138</th>\n","      <th>49139</th>\n","      <th>49140</th>\n","      <th>49141</th>\n","      <th>49142</th>\n","      <th>49143</th>\n","      <th>49144</th>\n","      <th>49145</th>\n","      <th>49146</th>\n","      <th>49147</th>\n","      <th>49148</th>\n","      <th>49149</th>\n","      <th>49150</th>\n","      <th>49151</th>\n","      <th>49152</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>20</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.024120</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.033482</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.045772</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.057711</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.068771</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 49153 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-82b06c71-208d-4fcd-9f03-1976d6427b53')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-82b06c71-208d-4fcd-9f03-1976d6427b53 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-82b06c71-208d-4fcd-9f03-1976d6427b53');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["    0      1      2      3      4      5      6      7      8      9      10     11     12     13     14     15     16     17     18     19     20     21     22     23     24     25     26     27     28     29     30     31     32     33     34     35     36     37     38     39     40     41     42     43     44     45     46     47     48     49     ...  49103  49104  49105  49106  49107  49108  49109  49110  49111  49112  49113  49114  49115  49116  49117  49118  49119  49120  49121  49122  49123  49124  49125  49126  49127  49128  49129  49130  49131  49132  49133  49134  49135  49136  49137  49138  49139  49140  49141  49142  49143  49144  49145  49146  49147  49148  49149  49150  49151     49152\n","20    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  0.024120\n","21    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  0.033482\n","22    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  0.045772\n","23    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  0.057711\n","24    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  0.068771\n","\n","[5 rows x 49153 columns]"]},"execution_count":70,"metadata":{},"output_type":"execute_result"}],"source":["knn_candidates.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9sRcxrJaMrG_"},"outputs":[],"source":["# 적당한 neighbor 갯수를 찾기 위해 KMeans 클러스터링 수행\n","sil = []\n","kmax = 20\n","\n","# dissimilarity would not be defined for a single cluster, thus, minimum number of clusters should be 2\n","for k in range(2, kmax+1):\n","    model_kmeans = KMeans(n_clusters=k, random_state=42)\n","    model_kmeans.fit(cd.DataFrame.from_pandas(knn_candidates))\n","    sil.append(silhouette_score(cd.DataFrame.from_pandas(knn_candidates), model_kmeans.labels_, metric='euclidean'))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1652863411377,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"o1hiT3Ra82CC","outputId":"a43e9884-12e2-401f-de84-59d3f059d90a"},"outputs":[{"name":"stdout","output_type":"stream","text":["2     0.479940\n","3     0.307361\n","4     0.261703\n","5     0.272610\n","6     0.251642\n","7     0.255565\n","8     0.232029\n","9     0.234053\n","10    0.245107\n","11    0.193166\n","12    0.231061\n","13    0.152301\n","14    0.240277\n","15    0.225764\n","16    0.135423\n","17    0.150694\n","18    0.162085\n","19    0.164645\n","20    0.167675\n","dtype: float64\n"]}],"source":["print(series(sil, index=range(2, kmax+1)).sort_index(ascending=True))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":27291,"status":"ok","timestamp":1652863463860,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"JIgfycJl824Q","outputId":"2c9b2c44-866f-4c97-913d-f674a8b1d708"},"outputs":[{"name":"stdout","output_type":"stream","text":["1    569\n","3    209\n","0    206\n","2    150\n","4    131\n","dtype: int32\n"]}],"source":["# get best cluster model\n","# only target, k=6\n","# size=64*64*3, k=11\n","# size=128*128*3, k=7, 0.255565\n","\n","# # case59 drop, target 0 drop\n","# size=128*128*3, k=5, 0.272610\n","model_kmeans = KMeans(n_clusters=5, random_state=42).fit(cd.DataFrame.from_pandas(knn_candidates)).labels_.value_counts()\n","print(model_kmeans)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":34920,"status":"ok","timestamp":1652863498777,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"IArLVZOeSkGY","outputId":"d001f481-de6b-40ba-8249-977476512d0c"},"outputs":[{"data":{"text/plain":["NearestNeighbors()"]},"execution_count":74,"metadata":{},"output_type":"execute_result"}],"source":["knn_finder = NearestNeighbors(n_neighbors=model_kmeans.min())\n","knn_finder.fit(cd.DataFrame.from_pandas(knn_candidates))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1652863498778,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"nPWBQhGfide1","outputId":"58c76fd6-ac43-445c-ea03-97568c932a70"},"outputs":[{"data":{"text/plain":["(1265, 49153)"]},"execution_count":75,"metadata":{},"output_type":"execute_result"}],"source":["knn_candidates.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ojD4pHdxugvF"},"outputs":[],"source":["queries_mask = np.invert(notAll_na_list) | np.invert(notAny_na_list)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rm_k2009eK3P"},"outputs":[],"source":["# create query dataset\n","knn_queries = full_y[[\"target\"]][queries_mask].copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0kTKV0BdeUbf"},"outputs":[],"source":["knn_queries = dataframe(knn_scaler.transform(knn_queries), index=knn_queries.index)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1652863498779,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"IXr7qePh-VQ2","outputId":"049d3d66-1a9c-4625-f6d5-3513032c935d"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-afe7e6dc-71cf-445f-a0b4-ceee00c8d1d3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.104837</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.127377</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.153912</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.182757</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.218579</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1516</th>\n","      <td>0.160883</td>\n","    </tr>\n","    <tr>\n","      <th>1517</th>\n","      <td>0.128929</td>\n","    </tr>\n","    <tr>\n","      <th>1518</th>\n","      <td>0.087234</td>\n","    </tr>\n","    <tr>\n","      <th>1519</th>\n","      <td>0.056915</td>\n","    </tr>\n","    <tr>\n","      <th>1520</th>\n","      <td>0.033427</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>285 rows × 1 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-afe7e6dc-71cf-445f-a0b4-ceee00c8d1d3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-afe7e6dc-71cf-445f-a0b4-ceee00c8d1d3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-afe7e6dc-71cf-445f-a0b4-ceee00c8d1d3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["             0\n","0     0.104837\n","1     0.127377\n","2     0.153912\n","3     0.182757\n","4     0.218579\n","...        ...\n","1516  0.160883\n","1517  0.128929\n","1518  0.087234\n","1519  0.056915\n","1520  0.033427\n","\n","[285 rows x 1 columns]"]},"execution_count":79,"metadata":{},"output_type":"execute_result"}],"source":["knn_queries"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MXYfo8v8eKz8"},"outputs":[],"source":["img_size = 128\n","channels = 3\n","knn_img = np.empty((queries_mask.sum(), img_size * img_size * channels))\n","for idx, value in enumerate(full_x_img[queries_mask].apply(lambda x: get_image_path(x, train=True))):\n","    image = tf.io.read_file(value)\n","    image = tf.io.decode_image(image, channels=channels, expand_animations=False)\n","    image = tf.cast(image, tf.float32)\n","    image = tf.image.resize_with_pad(image, img_size, img_size, antialias=True).numpy().flatten() / 255.0\n","    knn_img[idx] = image"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mXgyerYSe2KH"},"outputs":[],"source":["knn_queries = pd.concat([dataframe(knn_img, index=knn_queries.index), knn_queries], axis=1).astype(\"float32\")\n","knn_queries.columns = list(range(knn_queries.shape[1]))\n","del knn_img"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vEKNesrDvAWj"},"outputs":[],"source":["queries_result_table = knn_finder.kneighbors(cd.DataFrame.from_pandas(knn_queries), return_distance=False).to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OMAWy1Vbus2k"},"outputs":[],"source":["# train data imputation\n","seed_everything()\n","for i in range(queries_result_table.shape[0]):\n","    target_arr = train_timeseries[knn_queries.index[i]]\n","    target_na_mask = np.isnan(target_arr)\n","    knn_arr = train_timeseries[knn_candidates.index[queries_result_table[i]]]\n","\n","    mean_arr = train_timeseries[knn_candidates.index[queries_result_table[i]]].mean(axis=0)\n","    std_arr = train_timeseries[knn_candidates.index[queries_result_table[i]]].std(axis=0)\n","    \n","    # noise_arr = tf.random.truncated_normal(shape=mean_arr.shape).numpy()\n","    # imputed_arr = np.clip(mean_arr + noise_arr, min_arr, max_arr)\n","\n","    imputed_arr = np_rnd.normal(mean_arr, np.clip(std_arr, 0.0, 3.0))\n","    min_arr = train_timeseries[knn_candidates.index[queries_result_table[i]]].min(axis=0)\n","    max_arr = train_timeseries[knn_candidates.index[queries_result_table[i]]].max(axis=0)\n","    imputed_arr = np.clip(imputed_arr, min_arr, max_arr)\n","\n","    target_arr[target_na_mask] = 0\n","    imputed_arr[np.invert(target_na_mask)] = 0\n","    train_timeseries[knn_queries.index[i]] = target_arr + imputed_arr"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1652863661065,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"Z07Vuxbrx1ip","outputId":"cd82f261-3c6d-41d9-a377-80f2746b679a"},"outputs":[{"data":{"text/plain":["0"]},"execution_count":84,"metadata":{},"output_type":"execute_result"}],"source":["np.isnan(train_timeseries).sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VVGIgrUqpnws"},"outputs":[],"source":["# 모든 데이터가 nan인 index 산출\n","notAll_na_list = np.ones(train_timeseries.shape[0], dtype=\"bool\")\n","notAny_na_list = np.ones(train_timeseries.shape[0], dtype=\"bool\")\n","for i in range(train_timeseries.shape[0]):\n","    if np.isnan(train_timeseries[i]).sum() == train_timeseries.shape[1] * train_timeseries.shape[2]:\n","        notAll_na_list[i] = False\n","    elif np.isnan(train_timeseries[i]).sum() > 0:\n","        notAny_na_list[i] = False"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1652863661065,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"4EzaTlqbpqWn","outputId":"8ddbabe5-b241-4408-f572-5b852efb0b27"},"outputs":[{"name":"stdout","output_type":"stream","text":["모든 데이터가 nan 인 샘플\n","0\n","하나 이상의 데이터가 nan 인 샘플\n","0\n"]}],"source":["print(\"모든 데이터가 nan 인 샘플\")\n","print(np.invert(notAll_na_list).sum())\n","print(\"하나 이상의 데이터가 nan 인 샘플\")\n","print(np.invert(notAny_na_list).sum())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":267,"status":"ok","timestamp":1652863667470,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"L9DYTzz0OtNF","outputId":"56f00918-e6e1-4e58-8a5f-f2fd6b47a095"},"outputs":[{"data":{"text/plain":["MissForest(max_depth=6, max_features=0.75, min_samples_leaf=5,\n","           min_samples_split=0.01, n_estimators=1000, random_state=42)"]},"execution_count":87,"metadata":{},"output_type":"execute_result"}],"source":["# test data imputation using MissForest\n","missforest_imputor = MissForest(max_iter=10, n_estimators=1000, max_depth=6, max_features=0.75,\n","                                min_samples_split=0.01, min_samples_leaf=5, random_state=42)\n","missforest_imputor.fit(np.concatenate([i for i in train_timeseries], axis=0))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eRFLa9DVQpLk"},"outputs":[],"source":["notAll_na_list = np.ones(test_timeseries.shape[0], dtype=\"bool\")\n","notAny_na_list = np.ones(test_timeseries.shape[0], dtype=\"bool\")\n","for i in range(test_timeseries.shape[0]):\n","    if np.isnan(test_timeseries[i]).sum() == test_timeseries.shape[1] * test_timeseries.shape[2]:\n","        notAll_na_list[i] = False\n","    elif np.isnan(test_timeseries[i]).sum() > 0:\n","        notAny_na_list[i] = False"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1652863668649,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"d1RDv8NiQpwl","outputId":"7fbdb5ec-5b05-4b1b-f511-5851c883ff8b"},"outputs":[{"name":"stdout","output_type":"stream","text":["모든 데이터가 nan 인 샘플\n","0\n","하나 이상의 데이터가 nan 인 샘플\n","2\n"]}],"source":["print(\"모든 데이터가 nan 인 샘플\")\n","print(np.invert(notAll_na_list).sum())\n","print(\"하나 이상의 데이터가 nan 인 샘플\")\n","print(np.invert(notAny_na_list).sum())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":155043,"status":"ok","timestamp":1652863825493,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"2NUlyAbnQYK-","outputId":"a0ed530b-8653-4bc3-cb3e-07f403d82cab"},"outputs":[{"name":"stdout","output_type":"stream","text":["Iteration: 0\n","Iteration: 1\n","Iteration: 2\n","Iteration: 0\n","Iteration: 1\n","Iteration: 2\n","Iteration: 3\n","Iteration: 4\n"]}],"source":["for i in series(range(test_timeseries.shape[0]))[np.invert(notAll_na_list) | np.invert(notAny_na_list)]:\n","    test_timeseries[i] = missforest_imputor.transform(test_timeseries[i])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1652863825493,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"e-0eRNCvWOkW","outputId":"470fcba2-2010-48dd-d2fb-f27e5770e644"},"outputs":[{"data":{"text/plain":["0"]},"execution_count":91,"metadata":{},"output_type":"execute_result"}],"source":["np.isnan(test_timeseries).sum()"]},{"cell_type":"markdown","metadata":{"id":"-NWxiyMbHBBO"},"source":["**imputing 전 시각화**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Po_Tfr0iHApa"},"outputs":[],"source":["# for i in imputed_df.select_dtypes([\"float32\", \"float64\"]):\n","#     if i in (\"id\", \"target\"):\n","#         continue\n","#     plt.figure(figsize=(16, 9))\n","#     graph = sns.regplot(imputed_df[i], imputed_df[\"target\"], color=\"green\",\n","#                 scatter_kws={'s':15}, line_kws={\"color\": \"orange\"})\n","#     graph.set_title(i + \" - target 시각화\", fontsize=15, fontweight=\"bold\", pad=15)\n","#     graph.set_xlabel(graph.get_xlabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     graph.set_ylabel(graph.get_ylabel(), fontsize=12, fontweight=\"bold\", labelpad=15) \n","#     # graph.set_xticks(graph.get_xticks()[::1])\n","#     plt.xticks(np.arange(np.min(imputed_df[i]), np.max(imputed_df[i])+1, (np.max(imputed_df[i])+1-np.min(imputed_df[i]))/10),\n","#                fontsize=12, fontweight=\"bold\")\n","#     plt.yticks(fontsize=12, fontweight=\"bold\")\n","#     # graph.set_xticklabels(graph.get_xticklabels()[::1], rotation=45)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"V23_Zh3wp2rg"},"outputs":[],"source":["# # 기존 특정 시간대만 뽑은 full_x[\"train_data\"] (imputed_df)도 만약 nan값이 하나라도 있으면 이를 timeseries 데이터에서 대치\n","# for i in list(imputed_df[\"id\"][imputed_df.drop([\"id\", \"target\"], axis=1).isna().any(axis=1)].index):\n","#     replace_vec = []\n","#     for idx, (var_name, var_idx) in enumerate(selected_features):  \n","#         replace_vec.append(train_timeseries[i][var_idx, idx])\n","#         # if train_timeseries[i][var_idx, idx] > 1200:\n","#         #     print(i, idx, var_name, var_idx)\n","#     imputed_df.loc[i, num_vars] = replace_vec"]},{"cell_type":"markdown","metadata":{"id":"RcIO1wgfHofP"},"source":["**imputing 후 시각화**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"W-Moar3Ns6hP"},"outputs":[],"source":["# imputed_df.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HVQuSMtp2r5_"},"outputs":[],"source":["# for i in imputed_df.select_dtypes([\"float32\", \"float64\"]):\n","#     if i == \"target\":\n","#         continue\n","#     plt.figure(figsize=(16, 9))\n","#     graph = sns.histplot(imputed_df[i])\n","#     graph.set_title(i + \" 분포 시각화\", fontsize=15, fontweight=\"bold\", pad=15)\n","#     graph.set_xlabel(graph.get_xlabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     graph.set_ylabel(graph.get_ylabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     plt.xticks(np.arange(np.min(imputed_df[i]), np.max(imputed_df[i])+1, (np.max(imputed_df[i])+1-np.min(imputed_df[i]))/10),\n","#                fontsize=12, fontweight=\"bold\")\n","#     plt.yticks(fontsize=12, fontweight=\"bold\")\n","#     # plt.savefig(folder_path + \"EDA/graphs/trainFeature_after_remove_anomaly_\" + i)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gudxCiE5s6e3"},"outputs":[],"source":["# for i in imputed_df.select_dtypes([\"float32\", \"float64\"]):\n","#     if i in (\"id\", \"target\"):\n","#         continue\n","#     plt.figure(figsize=(16, 9))\n","#     graph = sns.regplot(imputed_df[i], imputed_df[\"target\"], color=\"green\",\n","#                 scatter_kws={'s':15}, line_kws={\"color\": \"orange\"})\n","#     graph.set_title(i + \" - target 시각화\", fontsize=15, fontweight=\"bold\", pad=15)\n","#     graph.set_xlabel(graph.get_xlabel(), fontsize=12, fontweight=\"bold\", labelpad=15)\n","#     graph.set_ylabel(graph.get_ylabel(), fontsize=12, fontweight=\"bold\", labelpad=15) \n","#     # graph.set_xticks(graph.get_xticks()[::1])\n","#     plt.xticks(np.arange(np.min(imputed_df[i]), np.max(imputed_df[i])+1, (np.max(imputed_df[i])+1-np.min(imputed_df[i]))/10),\n","#                fontsize=12, fontweight=\"bold\")\n","#     plt.yticks(fontsize=12, fontweight=\"bold\")\n","#     # graph.set_xticklabels(graph.get_xticklabels()[::1], rotation=45)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TdueUroDp2mR"},"outputs":[],"source":["# missforest_imputor = MissForest(max_iter=10, n_estimators=1000, max_depth=6, max_features=0.8,\n","#                                 min_samples_split=0.05, min_samples_leaf=5, random_state=42)\n","# missforest_imputor.fit(imputed_df.drop([\"id\", target_var], axis=1))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ai2nJn20lbNI"},"outputs":[],"source":["# np.isnan(test_timeseries).sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9RDIrW0Tmhm-"},"outputs":[],"source":["del model_kmeans, knn_finder, knn_candidates, knn_queries, missforest_imputor"]},{"cell_type":"markdown","metadata":{"id":"ZGkufV4tegkg"},"source":["# Replace original df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gBCmq1d-MN6o"},"outputs":[],"source":["# full_x[\"train_data\"] = imputed_df\n","# full_x[\"train_data\"].head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"K98dHptwbEOH"},"outputs":[],"source":["# full_x[\"train_data\"].info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"INGYMU8ydQw-"},"outputs":[],"source":["# test_x[\"test_data\"][test_x[\"test_data\"].isna().any(axis=1)]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wPz_6ePtmRlL"},"outputs":[],"source":["# for i in list(test_x[\"test_data\"][\"id\"][test_x[\"test_data\"].drop([\"id\"], axis=1).isna().any(axis=1)].index):\n","#     replace_vec = []\n","#     for idx, (var_name, var_idx) in enumerate(selected_features):\n","#         replace_vec.append(test_timeseries[i][var_idx, idx])\n","#     test_x[\"test_data\"].loc[i, num_vars] = replace_vec"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ur-EIVsbfJdk"},"outputs":[],"source":["# test_x[\"test_data\"].info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qtBVleXpaYzv"},"outputs":[],"source":["# test_x[\"test_data\"] = pd.concat([test_x[\"test_data\"][[\"id\"]], dataframe(missforest_imputor.transform(test_x[\"test_data\"].drop([\"id\"], axis=1)), columns=test_x[\"test_data\"].drop([\"id\"], axis=1).columns)], axis=1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6q5YCtEzhVcW"},"outputs":[],"source":["# train_timeseries = train_timeseries[full_x[\"train_data\"][\"id\"] != \"CASE45_17.png\"]\n","# full_x[\"train_data\"] = full_x[\"train_data\"][full_x[\"train_data\"][\"id\"] != \"CASE45_17.png\"]\n","# full_x[\"train_data\"].reset_index(drop=True, inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ouvd_6nPuu3C"},"outputs":[],"source":["# full_x[\"train_data\"].info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8OeaBXo2Yyz4"},"outputs":[],"source":["# test_x[\"test_data\"].info()"]},{"cell_type":"markdown","metadata":{"id":"M926gqsUf_D9"},"source":["# Feature Diescretization\n"]},{"cell_type":"markdown","metadata":{"id":"lrf6V3GqgaK-"},"source":["**try1**\n","*   내부온도관측치 -> 20\n","*   내부습도관측치 -> 20\n","*   CO2관측치 -> 20\n","*   EC관측치 -> 10\n","*   최근분무량 -> 10\n","*   화이트 LED동작강도 - 5\n","*   레드 LED동작강도 - 7\n","*   블루 LED동작강도 - 7\n","*   냉방온도 - 9\n","*   냉방부하 - 20\n","*   난방온도 - 8\n","*   난방부하 -> 5\n","\n","**try2**\n","\n","*   20 -> 10\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FDFbW7sCWLQ5"},"outputs":[],"source":["# full_y = full_x[\"train_data\"][[target_var]]\n","# full_y[target_var].hist()\n","# # target transformation\n","# full_y[target_var] = np.log1p(full_y[target_var])\n","# full_x = full_x[\"train_data\"].drop(target_var, axis=1)\n","# test_x = test_x[\"test_data\"]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yzNMyCwC7vOf"},"outputs":[],"source":["# full_y[target_var].hist()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"057q81fMWVWT"},"outputs":[],"source":["# embed_size = 64\n","# ct = ColumnTransformer([\n","#     (\"내부온도관측치_discret\", KBinsDiscretizer(embed_size, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부온도관측치\"]),\n","#     (\"내부습도관측치_discret\", KBinsDiscretizer(embed_size, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부습도관측치\"]),\n","#     (\"CO2관측치_discret\", KBinsDiscretizer(embed_size, encode=\"ordinal\", strategy=\"kmeans\"), [\"CO2관측치\"]),\n","#     (\"EC관측치_discret\", KBinsDiscretizer(embed_size, encode=\"ordinal\", strategy=\"kmeans\"), [\"EC관측치\"]),\n","#     (\"최근분무량_discret\", KBinsDiscretizer(embed_size, encode=\"ordinal\", strategy=\"kmeans\"), [\"최근분무량\"]),\n","#     (\"화이트 LED동작강도_discret\", KBinsDiscretizer(embed_size, encode=\"ordinal\", strategy=\"kmeans\"), [\"화이트 LED동작강도\"]),\n","#     (\"레드 LED동작강도_discret\", KBinsDiscretizer(embed_size, encode=\"ordinal\", strategy=\"kmeans\"), [\"레드 LED동작강도\"]),\n","#     (\"블루 LED동작강도_discret\", KBinsDiscretizer(embed_size, encode=\"ordinal\", strategy=\"kmeans\"), [\"블루 LED동작강도\"]),\n","#     (\"냉방온도_discret\", KBinsDiscretizer(embed_size, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방온도\"]),\n","#     (\"냉방부하_discret\", KBinsDiscretizer(embed_size, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방부하\"]),\n","#     (\"난방온도_discret\", KBinsDiscretizer(embed_size, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방온도\"]),\n","#     (\"난방부하_discret\", KBinsDiscretizer(embed_size, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방부하\"]),\n","#     (\"총추정광량_discret\", KBinsDiscretizer(embed_size, encode=\"ordinal\", strategy=\"kmeans\"), [\"총추정광량\"])\n","# ])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9NYVhjW8obzB"},"outputs":[],"source":["# ct.fit(pd.concat([dataframe(i, columns=num_vars) for i in train_timeseries], axis=0).dropna())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xKhvauYWaEAu"},"outputs":[],"source":["# full_x = pd.concat([full_x[[\"id\"]], full_x.drop(\"id\", axis=1), dataframe(ct.transform(full_x).astype(\"int32\"), columns=[i[0] for i in ct.transformers_])], axis=1)\n","# test_x = pd.concat([test_x[[\"id\"]], test_x.drop(\"id\", axis=1), dataframe(ct.transform(test_x).astype(\"int32\"), columns=[i[0] for i in ct.transformers_])], axis=1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ygaa_cAdkH3A"},"outputs":[],"source":["# full_x[\"냉방부하_binary\"] = full_x[\"냉방부하\"].apply(lambda x: 0.0 if x==0.0 else 1.0)\n","# full_x[\"난방부하_binary\"] = full_x[\"난방부하\"].apply(lambda x: 0.0 if x==0.0 else 1.0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"waH2GnTlo6wI"},"outputs":[],"source":["# test_x[\"냉방부하_binary\"] = test_x[\"냉방부하\"].apply(lambda x: 0.0 if x==0.0 else 1.0)\n","# test_x[\"난방부하_binary\"] = test_x[\"난방부하\"].apply(lambda x: 0.0 if x==0.0 else 1.0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EGp6fP0tWikz"},"outputs":[],"source":["# full_x.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Pf4Orp-KWgEU"},"outputs":[],"source":["# test_x.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_qKCMxePXuYL"},"outputs":[],"source":["tmp_list = []\n","for idx, value in enumerate(train_timeseries):\n","    tmp_list.append(np.concatenate([\n","        value,\n","        (value[:,num_vars.index(\"내부온도관측치\")] - value[:,num_vars.index(\"외부온도관측치\")])[..., np.newaxis],\n","        (value[:,num_vars.index(\"내부습도관측치\")] - value[:,num_vars.index(\"외부습도관측치\")])[..., np.newaxis],\n","        (value[:,num_vars.index(\"화이트 LED동작강도\")] + value[:,num_vars.index(\"레드 LED동작강도\")] + value[:,num_vars.index(\"블루 LED동작강도\")])[..., np.newaxis],\n","    ], axis=1)[np.newaxis, ...])\n","train_timeseries = np.concatenate(tmp_list, axis=0)\n","\n","tmp_list = []\n","for idx, value in enumerate(test_timeseries):\n","    tmp_list.append(np.concatenate([\n","        value,\n","        (value[:,num_vars.index(\"내부온도관측치\")] - value[:,num_vars.index(\"외부온도관측치\")])[..., np.newaxis],\n","        (value[:,num_vars.index(\"내부습도관측치\")] - value[:,num_vars.index(\"외부습도관측치\")])[..., np.newaxis],\n","        (value[:,num_vars.index(\"화이트 LED동작강도\")] + value[:,num_vars.index(\"레드 LED동작강도\")] + value[:,num_vars.index(\"블루 LED동작강도\")])[..., np.newaxis],\n","    ], axis=1)[np.newaxis, ...])\n","test_timeseries = np.concatenate(tmp_list, axis=0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PDRseIbOZgbr"},"outputs":[],"source":["num_vars += [\"내외부온도차\", \"내외부습도차\", \"총LED동작강도\"]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1652863825494,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"VlEEMXPZZXQ_","outputId":"bf6c9486-fdba-4a9c-e499-a752c1c101c8"},"outputs":[{"data":{"text/plain":["(1550, 96, 21)"]},"execution_count":94,"metadata":{},"output_type":"execute_result"}],"source":["train_timeseries.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VZzOFcwlIIeV"},"outputs":[],"source":["train_timeseries = np.concatenate([np.concatenate([i, ct.transform(dataframe(i, columns=num_vars))], axis=1)[np.newaxis, ...] for i in train_timeseries], axis=0)\n","test_timeseries = np.concatenate([np.concatenate([i, ct.transform(dataframe(i, columns=num_vars))], axis=1)[np.newaxis, ...] for i in test_timeseries], axis=0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LwW0sPy-lrV-"},"outputs":[],"source":["tmp_list = []\n","for idx, value in enumerate(train_timeseries):\n","    tmp_list.append(np.concatenate([\n","        value,\n","        array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"EC관측치\")]])[..., np.newaxis],\n","        array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"최근분무량\")]])[..., np.newaxis],\n","        array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"화이트 LED동작강도\")]])[..., np.newaxis],\n","        array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"레드 LED동작강도\")]])[..., np.newaxis],\n","        array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"블루 LED동작강도\")]])[..., np.newaxis],\n","        array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"냉방부하\")]])[..., np.newaxis],\n","        array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"난방부하\")]])[..., np.newaxis],\n","        array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"총추정광량\")]])[..., np.newaxis],\n","        array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"백색광추정광량\")]])[..., np.newaxis],\n","        array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"적색광추정광량\")]])[..., np.newaxis],\n","        array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"청색광추정광량\")]])[..., np.newaxis],\n","    ], axis=1)[np.newaxis, ...])\n","train_timeseries = np.concatenate(tmp_list, axis=0)\n","tmp_list = []\n","for idx, value in enumerate(test_timeseries):\n","    tmp_list.append(np.concatenate([\n","        value,\n","        array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"EC관측치\")]])[..., np.newaxis],\n","        array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"최근분무량\")]])[..., np.newaxis],\n","        array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"화이트 LED동작강도\")]])[..., np.newaxis],\n","        array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"레드 LED동작강도\")]])[..., np.newaxis],\n","        array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"블루 LED동작강도\")]])[..., np.newaxis],\n","        array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"냉방부하\")]])[..., np.newaxis],\n","        array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"난방부하\")]])[..., np.newaxis],\n","        array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"총추정광량\")]])[..., np.newaxis],\n","        array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"백색광추정광량\")]])[..., np.newaxis],\n","        array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"적색광추정광량\")]])[..., np.newaxis],\n","        array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"청색광추정광량\")]])[..., np.newaxis],\n","    ], axis=1)[np.newaxis, ...])\n","test_timeseries = np.concatenate(tmp_list, axis=0)\n","del tmp_list"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":23,"status":"ok","timestamp":1652863887179,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"gdZ13XPcA9rs","outputId":"0b1d4e85-ea82-4368-a7ea-4ed80acae545"},"outputs":[{"data":{"text/plain":["11"]},"execution_count":97,"metadata":{},"output_type":"execute_result"}],"source":["bin_vars = [\"EC관측치_binary\", \"최근분무량_binary\", \"화이트 LED동작강도_binary\", \"레드 LED동작강도_binary\", \"블루 LED동작강도_binary\",\n","            \"냉방부하_binary\", \"난방부하_binary\", \"총추정광량_binary\", \"백색광추정광량_binary\", \"적색광추정광량_binary\", \"청색광추정광량_binary\"]\n","len(bin_vars)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dOtZvvShAqVd"},"outputs":[],"source":["# tmp_list = []\n","# for idx, value in enumerate(train_timeseries):\n","#     tmp_list.append(np.concatenate([\n","#         value,\n","#         array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"EC관측치\")]])[..., np.newaxis],\n","#         array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"최근분무량\")]])[..., np.newaxis],\n","#         array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"화이트 LED동작강도\")]])[..., np.newaxis],\n","#         array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"레드 LED동작강도\")]])[..., np.newaxis],\n","#         array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"블루 LED동작강도\")]])[..., np.newaxis],\n","#         array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"냉방부하\")]])[..., np.newaxis],\n","#         array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"난방부하\")]])[..., np.newaxis],\n","#         array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"총추정광량\")]])[..., np.newaxis],\n","#     ], axis=1)[np.newaxis, ...])\n","# train_timeseries = np.concatenate(tmp_list, axis=0)\n","# tmp_list = []\n","# for idx, value in enumerate(test_timeseries):\n","#     tmp_list.append(np.concatenate([\n","#         value,\n","#         array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"EC관측치\")]])[..., np.newaxis],\n","#         array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"최근분무량\")]])[..., np.newaxis],\n","#         array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"화이트 LED동작강도\")]])[..., np.newaxis],\n","#         array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"레드 LED동작강도\")]])[..., np.newaxis],\n","#         array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"블루 LED동작강도\")]])[..., np.newaxis],\n","#         array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"냉방부하\")]])[..., np.newaxis],\n","#         array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"난방부하\")]])[..., np.newaxis],\n","#         array([1.0 if j==0.0 else 0.0 for j in value[:,num_vars.index(\"총추정광량\")]])[..., np.newaxis],\n","#     ], axis=1)[np.newaxis, ...])\n","# test_timeseries = np.concatenate(tmp_list, axis=0)\n","# del tmp_list"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4UEfGNJknoXf"},"outputs":[],"source":["# bin_vars = [\"EC관측치_binary\", \"최근분무량_binary\", \"화이트 LED동작강도_binary\", \"레드 LED동작강도_binary\", \"블루 LED동작강도_binary\",\n","#             \"냉방부하_binary\", \"난방부하_binary\", \"총추정광량_binary\"]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Mgdo0BPcpDzC"},"outputs":[],"source":["# label log transformation\n","full_y[\"target\"] = np.log1p(full_y[\"target\"])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":21,"status":"ok","timestamp":1652863887180,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"e_yTIt83BhLY","outputId":"47980cf5-3b19-4933-e40d-b0c9b41c8c7f"},"outputs":[{"data":{"text/plain":["(1550, 96, 50)"]},"execution_count":99,"metadata":{},"output_type":"execute_result"}],"source":["train_timeseries.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19,"status":"ok","timestamp":1652863887180,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"ZLMIy4Abm0gV","outputId":"ff0bf9e9-2012-4a62-d6ff-d17b1f472921"},"outputs":[{"data":{"text/plain":["0"]},"execution_count":100,"metadata":{},"output_type":"execute_result"}],"source":["np.isnan(train_timeseries).sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1652863887180,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"9I8dJDuKBiPm","outputId":"6ecd6569-6e46-4889-d4e4-51998aa9dfa2"},"outputs":[{"data":{"text/plain":["(1550,)"]},"execution_count":101,"metadata":{},"output_type":"execute_result"}],"source":["full_x_img.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1652863887180,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"4LrmsA_nm2Tj","outputId":"05a46e79-bb55-41d1-fd87-f1c28358452a"},"outputs":[{"data":{"text/plain":["0"]},"execution_count":102,"metadata":{},"output_type":"execute_result"}],"source":["full_x_img.isna().sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1652863887180,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"p2jtxL1oBkYT","outputId":"6149b92d-df60-4da4-e66f-8f45a48fef7e"},"outputs":[{"data":{"text/plain":["(1550, 1)"]},"execution_count":103,"metadata":{},"output_type":"execute_result"}],"source":["full_y.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1652863887181,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"xne-5CK1m4qb","outputId":"26c78285-e522-42b0-da99-cf8171ba716e"},"outputs":[{"data":{"text/plain":["target    0\n","dtype: int64"]},"execution_count":104,"metadata":{},"output_type":"execute_result"}],"source":["full_y.isna().sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1652863887181,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"V0urBbeCm6jy","outputId":"80957fcf-eb17-45e5-c841-e5984a26606f"},"outputs":[{"data":{"text/plain":["(460, 96, 50)"]},"execution_count":105,"metadata":{},"output_type":"execute_result"}],"source":["test_timeseries.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1652863887181,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"EGq5-teGm8Cc","outputId":"e8abfd82-ea8e-4d88-ab00-766905c50b3e"},"outputs":[{"data":{"text/plain":["0"]},"execution_count":106,"metadata":{},"output_type":"execute_result"}],"source":["np.isnan(test_timeseries).sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1652863887181,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"6MvIhcxBm79a","outputId":"36993a0f-4b58-43c1-bc27-6bec27064754"},"outputs":[{"data":{"text/plain":["(460,)"]},"execution_count":107,"metadata":{},"output_type":"execute_result"}],"source":["test_x_img.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1652863887181,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"rz2uwqbDm76t","outputId":"72af580a-112e-460d-af54-ab9d44e85e4e"},"outputs":[{"data":{"text/plain":["0"]},"execution_count":108,"metadata":{},"output_type":"execute_result"}],"source":["test_x_img.isna().sum()"]},{"cell_type":"markdown","metadata":{"id":"UYnFbtk81W-A"},"source":["# Quick Start Session"]},{"cell_type":"markdown","metadata":{"id":"Ym3GZWU7UqxS"},"source":["**Feature set 1 : selected some vars based on high correlation**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NonVIDw5njHO"},"outputs":[],"source":["# # trian\n","# easyIO(train_timeseries, os.path.join(folder_path, \"architectures/\" + model_name, \"train_timeseries.pkl\"), op=\"w\")\n","# easyIO(full_x_img, os.path.join(folder_path, \"architectures/\" + model_name, \"full_x_img.pkl\"), op=\"w\")\n","# easyIO(full_y, os.path.join(folder_path, \"architectures/\" + model_name, \"full_y.pkl\"), op=\"w\")\n","# # test\n","# easyIO(test_timeseries, os.path.join(folder_path, \"architectures/\" + model_name, \"test_timeseries.pkl\"), op=\"w\")\n","# easyIO(test_x_img, os.path.join(folder_path, \"architectures/\" + model_name, \"test_x_img.pkl\"), op=\"w\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ly93iZKA07Ml"},"outputs":[],"source":["# ct = ColumnTransformer([\n","#     (\"내부온도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부온도관측치\"]),\n","#     (\"내부습도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부습도관측치\"]),\n","#     (\"CO2관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"CO2관측치\"]),\n","#     (\"EC관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"EC관측치\"]),\n","#     (\"최근분무량_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"최근분무량\"]),\n","#     (\"화이트 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"화이트 LED동작강도\"]),\n","#     (\"레드 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"레드 LED동작강도\"]),\n","#     (\"블루 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"블루 LED동작강도\"]),\n","#     (\"냉방온도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방온도\"]),\n","#     (\"냉방부하_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방부하\"]),\n","#     (\"난방온도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방온도\"]),\n","#     (\"난방부하_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방부하\"]),\n","# ])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_IETDHbNzpqP"},"outputs":[],"source":["# num_vars = [\"내부온도관측치\", \"내부습도관측치\", \"CO2관측치\", \"EC관측치\", \"최근분무량\",\n","#             \"화이트 LED동작강도\", \"레드 LED동작강도\", \"블루 LED동작강도\",\n","#             \"냉방온도\", \"냉방부하\", \"난방온도\", \"난방부하\"]\n","# bin_vars = [\"냉방부하_binary\", \"난방부하_binary\"]\n","# cat_vars = [i[0] for i in ct._transformers]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"87E1-x_YoDbu"},"outputs":[],"source":["# # trian\n","# train_timeseries = easyIO(None, os.path.join(folder_path, \"architectures/\" + model_name, \"train_timeseries.pkl\"), op=\"r\")\n","# full_x_img = easyIO(None, os.path.join(folder_path, \"architectures/\" + model_name, \"full_x_img.pkl\"), op=\"r\")\n","# full_y = easyIO(None, os.path.join(folder_path, \"architectures/\" + model_name, \"full_y.pkl\"), op=\"r\")\n","# # test\n","# test_timeseries = easyIO(None, os.path.join(folder_path, \"architectures/\" + model_name, \"test_timeseries.pkl\"), op=\"r\")\n","# test_x_img = easyIO(None, os.path.join(folder_path, \"architectures/\" + model_name, \"test_x_img.pkl\"), op=\"r\")"]},{"cell_type":"markdown","metadata":{"id":"LHlryUnPUwnb"},"source":["**Feature set 2 : drop catogrical like feature in numeric vars**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3TFnMmPBU3ma"},"outputs":[],"source":["# # trian\n","# easyIO(train_timeseries, os.path.join(folder_path, \"architectures/\" + model_name, \"train_timeseries.pkl\"), op=\"w\")\n","# easyIO(full_x_img, os.path.join(folder_path, \"architectures/\" + model_name, \"full_x_img.pkl\"), op=\"w\")\n","# easyIO(full_y, os.path.join(folder_path, \"architectures/\" + model_name, \"full_y.pkl\"), op=\"w\")\n","# # test\n","# easyIO(test_timeseries, os.path.join(folder_path, \"architectures/\" + model_name, \"test_timeseries.pkl\"), op=\"w\")\n","# easyIO(test_x_img, os.path.join(folder_path, \"architectures/\" + model_name, \"test_x_img.pkl\"), op=\"w\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Fp2Qte-2U5ZZ"},"outputs":[],"source":["# ct = ColumnTransformer([\n","#     (\"내부온도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부온도관측치\"]),\n","#     (\"내부습도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부습도관측치\"]),\n","#     (\"CO2관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"CO2관측치\"]),\n","#     (\"EC관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"EC관측치\"]),\n","#     (\"최근분무량_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"최근분무량\"]),\n","#     (\"화이트 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"화이트 LED동작강도\"]),\n","#     (\"레드 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"레드 LED동작강도\"]),\n","#     (\"블루 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"블루 LED동작강도\"]),\n","#     (\"냉방온도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방온도\"]),\n","#     (\"냉방부하_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방부하\"]),\n","#     (\"난방온도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방온도\"]),\n","#     (\"난방부하_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방부하\"]),\n","# ])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H_cDKXDLU6gL"},"outputs":[],"source":["# num_vars = [\"내부온도관측치\", \"내부습도관측치\", \"CO2관측치\", \"EC관측치\", \"최근분무량\",\n","#             \"화이트 LED동작강도\", \"레드 LED동작강도\", \"블루 LED동작강도\",\n","#             \"냉방온도\", \"냉방부하\", \"난방온도\", \"난방부하\"]\n","# bin_vars = [\"냉방부하_binary\", \"난방부하_binary\"]\n","# cat_vars = [i[0] for i in ct._transformers]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_SUVSHelU8Wb"},"outputs":[],"source":["# # trian\n","# train_timeseries = easyIO(None, os.path.join(folder_path, \"architectures/\" + model_name, \"train_timeseries.pkl\"), op=\"r\")\n","# full_x_img = easyIO(None, os.path.join(folder_path, \"architectures/\" + model_name, \"full_x_img.pkl\"), op=\"r\")\n","# full_y = easyIO(None, os.path.join(folder_path, \"architectures/\" + model_name, \"full_y.pkl\"), op=\"r\")\n","# # test\n","# test_timeseries = easyIO(None, os.path.join(folder_path, \"architectures/\" + model_name, \"test_timeseries.pkl\"), op=\"r\")\n","# test_x_img = easyIO(None, os.path.join(folder_path, \"architectures/\" + model_name, \"test_x_img.pkl\"), op=\"r\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qWvv7uMyT7op"},"outputs":[],"source":["# cat_like_vars = [\"화이트 LED동작강도\", \"레드 LED동작강도\", \"블루 LED동작강도\", \"냉방온도\", \"난방온도\"]\n","# drop_mask = [False if i in findIdx(num_vars, cat_like_vars) else True for i in list(range(train_timeseries.shape[-1]))]\n","# num_vars = [\"내부온도관측치\", \"내부습도관측치\", \"CO2관측치\", \"EC관측치\", \"최근분무량\", \"냉방부하\", \"난방부하\"]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"t3AlkcrnVvJB"},"outputs":[],"source":["# train_timeseries = train_timeseries[:,:,drop_mask]\n","# test_timeseries = test_timeseries[:,:,drop_mask]"]},{"cell_type":"markdown","metadata":{"id":"gpguCeRQVABT"},"source":["**Feature set 3 : all features and binary vars**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Vk3IaUHyVUiA"},"outputs":[],"source":["# feature_name = \"allFeatures_allBinaries\"\n","# createFolder(folder_path + \"features/\" + feature_name)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"znUpSDtZU_sl"},"outputs":[],"source":["# # trian\n","# easyIO(train_timeseries, folder_path + \"features/\" + feature_name + \"/train_timeseries\" + \"_\" + feature_name + \".pkl\", op=\"w\")\n","# easyIO(full_x_img, folder_path + \"features/\" + feature_name + \"/full_x_img\" + \"_\" + feature_name + \".pkl\", op=\"w\")\n","# easyIO(full_y, folder_path + \"features/\" + feature_name + \"/full_y\" + \"_\" + feature_name + \".pkl\", op=\"w\")\n","# # test\n","# easyIO(test_timeseries, folder_path + \"features/\" + feature_name + \"/test_timeseries\" + \"_\" + feature_name + \".pkl\", op=\"w\")\n","# easyIO(test_x_img, folder_path + \"features/\" + feature_name + \"/test_x_img\" + \"_\" + feature_name + \".pkl\", op=\"w\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ze_N714rVGOa"},"outputs":[],"source":["# ct = ColumnTransformer([\n","#     (\"내부온도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부온도관측치\"]),\n","#     (\"외부온도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"외부온도관측치\"]),\n","#     (\"내부습도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부습도관측치\"]),\n","#     (\"외부습도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"외부습도관측치\"]),\n","#     (\"CO2관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"CO2관측치\"]),\n","#     (\"EC관측치_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"EC관측치\"]),\n","#     (\"최근분무량_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"최근분무량\"]),\n","#     (\"화이트 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"화이트 LED동작강도\"]),\n","#     (\"레드 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"레드 LED동작강도\"]),\n","#     (\"블루 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"블루 LED동작강도\"]),\n","#     (\"냉방온도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방온도\"]),\n","#     (\"냉방부하_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방부하\"]),\n","#     (\"난방온도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방온도\"]),\n","#     (\"난방부하_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방부하\"]),\n","#     (\"총추정광량_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"총추정광량\"]),\n","#     (\"백색광추정광량_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"백색광추정광량\"]),\n","#     (\"적색광추정광량_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"적색광추정광량\"]),\n","#     (\"청색광추정광량_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"청색광추정광량\"]),\n","# ])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"joAkjjofVHSt"},"outputs":[],"source":["# num_vars = [\"내부온도관측치\", \"외부온도관측치\", \"내부습도관측치\", \"외부습도관측치\", \"CO2관측치\", \"EC관측치\", \"최근분무량\",\n","#             \"화이트 LED동작강도\", \"레드 LED동작강도\", \"블루 LED동작강도\", \"냉방온도\", \"냉방부하\", \"난방온도\", \"난방부하\",\n","#             \"총추정광량\", \"백색광추정광량\", \"적색광추정광량\", \"청색광추정광량\"]\n","# bin_vars = [\"EC관측치_binary\", \"최근분무량_binary\", \"화이트 LED동작강도_binary\", \"레드 LED동작강도_binary\", \"블루 LED동작강도_binary\",\n","#             \"냉방부하_binary\", \"난방부하_binary\", \"총추정광량_binary\", \"백색광추정광량_binary\", \"적색광추정광량_binary\", \"청색광추정광량_binary\"]\n","# cat_vars = [i[0] for i in ct._transformers]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wqe90nQGVIjU"},"outputs":[],"source":["# # trian\n","# train_timeseries = easyIO(None, folder_path + \"features/\" + feature_name + \"/train_timeseries\" + \"_\" + feature_name + \".pkl\", op=\"r\")\n","# full_x_img = easyIO(None, folder_path + \"features/\" + feature_name + \"/full_x_img\" + \"_\" + feature_name + \".pkl\", op=\"r\")\n","# full_y = easyIO(None, folder_path + \"features/\" + feature_name + \"/full_y\" + \"_\" + feature_name + \".pkl\", op=\"r\")\n","# # test\n","# test_timeseries = easyIO(None, folder_path + \"features/\" + feature_name + \"/test_timeseries\" + \"_\" + feature_name + \".pkl\", op=\"r\")\n","# test_x_img = easyIO(None, folder_path + \"features/\" + feature_name + \"/test_x_img\" + \"_\" + feature_name + \".pkl\", op=\"r\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZT69s8_zviMf"},"outputs":[],"source":["# anomaly_vec = full_x_img.apply(lambda x: True if x.split(\"_\")[0] in (\"CASE59\") else False)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QCUYgB3zvzGR"},"outputs":[],"source":["# train_timeseries = train_timeseries[~anomaly_vec]\n","# full_x_img = full_x_img[~anomaly_vec]; full_x_img.reset_index(drop=True, inplace=True)\n","# full_y = full_y[~anomaly_vec]; full_y.reset_index(drop=True, inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6cst26VmJUc9"},"outputs":[],"source":["# train_timeseries.shape[-1] == len(num_vars) + len(bin_vars) + len(cat_vars)"]},{"cell_type":"markdown","metadata":{"id":"wO_mT8XCqV5J"},"source":["**Feature set 4 : only categorical**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"V5Ny8BUMreYI"},"outputs":[],"source":["# feature_name = \"onlyCat\"\n","# createFolder(folder_path + \"features/\" + feature_name)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0eyPCg8DqVK7"},"outputs":[],"source":["# ct = ColumnTransformer([\n","#     (\"내부온도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부온도관측치\"]),\n","#     (\"외부온도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"외부온도관측치\"]),\n","#     (\"내부습도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부습도관측치\"]),\n","#     (\"외부습도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"외부습도관측치\"]),\n","#     (\"CO2관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"CO2관측치\"]),\n","#     (\"EC관측치_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"EC관측치\"]),\n","#     (\"최근분무량_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"최근분무량\"]),\n","#     (\"화이트 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"화이트 LED동작강도\"]),\n","#     (\"레드 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"레드 LED동작강도\"]),\n","#     (\"블루 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"블루 LED동작강도\"]),\n","#     (\"냉방온도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방온도\"]),\n","#     (\"냉방부하_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방부하\"]),\n","#     (\"난방온도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방온도\"]),\n","#     (\"난방부하_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방부하\"]),\n","#     (\"총추정광량_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"총추정광량\"]),\n","#     (\"백색광추정광량_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"백색광추정광량\"]),\n","#     (\"적색광추정광량_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"적색광추정광량\"]),\n","#     (\"청색광추정광량_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"청색광추정광량\"]),\n","# ])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zlXyxkGUrdQq"},"outputs":[],"source":["# num_vars = []\n","# bin_vars = []\n","# cat_vars = [i[0] for i in ct._transformers]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Yz32WE0MsxN_"},"outputs":[],"source":["# # trian\n","# train_timeseries = easyIO(None, folder_path + \"features/\" + \"allFeatures_allBinaries\" + \"/train_timeseries\" + \"_\" + \"allFeatures_allBinaries\" + \".pkl\", op=\"r\")\n","# full_x_img = easyIO(None, folder_path + \"features/\" + \"allFeatures_allBinaries\" + \"/full_x_img\" + \"_\" + \"allFeatures_allBinaries\" + \".pkl\", op=\"r\")\n","# full_y = easyIO(None, folder_path + \"features/\" + \"allFeatures_allBinaries\" + \"/full_y\" + \"_\" + \"allFeatures_allBinaries\" + \".pkl\", op=\"r\")\n","# # test\n","# test_timeseries = easyIO(None, folder_path + \"features/\" + \"allFeatures_allBinaries\" + \"/test_timeseries\" + \"_\" + \"allFeatures_allBinaries\" + \".pkl\", op=\"r\")\n","# test_x_img = easyIO(None, folder_path + \"features/\" + \"allFeatures_allBinaries\" + \"/test_x_img\" + \"_\" + \"allFeatures_allBinaries\" + \".pkl\", op=\"r\")"]},{"cell_type":"markdown","metadata":{"id":"8Bi2cA94BRPx"},"source":["**Feature set 5 : drop some vars (총추정광량, 화이트 추정광량, 레드 추정광량, 블루 추정광량)**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"988APxM9BRhO"},"outputs":[],"source":["# feature_name = \"feature_v2\"\n","# createFolder(folder_path + \"features/\" + feature_name)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7z42de0QBR1f"},"outputs":[],"source":["# # trian\n","# easyIO(train_timeseries, folder_path + \"features/\" + feature_name + \"/train_timeseries\" + \"_\" + feature_name + \".pkl\", op=\"w\")\n","# easyIO(full_x_img, folder_path + \"features/\" + feature_name + \"/full_x_img\" + \"_\" + feature_name + \".pkl\", op=\"w\")\n","# easyIO(full_y, folder_path + \"features/\" + feature_name + \"/full_y\" + \"_\" + feature_name + \".pkl\", op=\"w\")\n","# # test\n","# easyIO(test_timeseries, folder_path + \"features/\" + feature_name + \"/test_timeseries\" + \"_\" + feature_name + \".pkl\", op=\"w\")\n","# easyIO(test_x_img, folder_path + \"features/\" + feature_name + \"/test_x_img\" + \"_\" + feature_name + \".pkl\", op=\"w\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TJ9qYIuSBhtw"},"outputs":[],"source":["# ct = ColumnTransformer([\n","#     (\"내부온도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부온도관측치\"]),\n","#     (\"외부온도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"외부온도관측치\"]),\n","#     (\"내부습도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부습도관측치\"]),\n","#     (\"외부습도관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"외부습도관측치\"]),\n","#     (\"CO2관측치_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"CO2관측치\"]),\n","#     (\"EC관측치_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"EC관측치\"]),\n","#     (\"최근분무량_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"최근분무량\"]),\n","#     (\"화이트 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"화이트 LED동작강도\"]),\n","#     (\"레드 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"레드 LED동작강도\"]),\n","#     (\"블루 LED동작강도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"블루 LED동작강도\"]),\n","#     (\"냉방온도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방온도\"]),\n","#     (\"냉방부하_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방부하\"]),\n","#     (\"난방온도_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방온도\"]),\n","#     (\"난방부하_discret\", KBinsDiscretizer(100, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방부하\"]),\n","#     (\"총추정광량_discret\", KBinsDiscretizer(10, encode=\"ordinal\", strategy=\"kmeans\"), [\"총추정광량\"]),\n","# ])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"k9POTzWKCGrC"},"outputs":[],"source":["# num_vars = [\"내부온도관측치\", \"외부온도관측치\", \"내부습도관측치\", \"외부습도관측치\", \"CO2관측치\", \"EC관측치\", \"최근분무량\",\n","#             \"화이트 LED동작강도\", \"레드 LED동작강도\", \"블루 LED동작강도\", \"냉방온도\", \"냉방부하\", \"난방온도\", \"난방부하\", \"총추정광량\"]\n","# bin_vars = [\"EC관측치_binary\", \"최근분무량_binary\", \"화이트 LED동작강도_binary\", \"레드 LED동작강도_binary\", \"블루 LED동작강도_binary\",\n","#             \"냉방부하_binary\", \"난방부하_binary\", \"총추정광량_binary\"]\n","# cat_vars = [i[0] for i in ct._transformers]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Vn8SOh0NBhrq"},"outputs":[],"source":["# # trian\n","# train_timeseries = easyIO(None, folder_path + \"features/\" + feature_name + \"/train_timeseries\" + \"_\" + feature_name + \".pkl\", op=\"r\")\n","# full_x_img = easyIO(None, folder_path + \"features/\" + feature_name + \"/full_x_img\" + \"_\" + feature_name + \".pkl\", op=\"r\")\n","# full_y = easyIO(None, folder_path + \"features/\" + feature_name + \"/full_y\" + \"_\" + feature_name + \".pkl\", op=\"r\")\n","# # test\n","# test_timeseries = easyIO(None, folder_path + \"features/\" + feature_name + \"/test_timeseries\" + \"_\" + feature_name + \".pkl\", op=\"r\")\n","# test_x_img = easyIO(None, folder_path + \"features/\" + feature_name + \"/test_x_img\" + \"_\" + feature_name + \".pkl\", op=\"r\")"]},{"cell_type":"markdown","metadata":{"id":"OaOg6cWxaCoE"},"source":["**Feature set 6 : all features + 3개 파생변수 추가 + CASE59 모두 드랍**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Y7QG_ZS0aC20"},"outputs":[],"source":["feature_name = \"allFeatures_allBinaries_v2\"\n","createFolder(folder_path + \"features/\" + feature_name)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RQXxN0toaDM3"},"outputs":[],"source":["# # trian\n","# easyIO(train_timeseries, folder_path + \"features/\" + feature_name + \"/train_timeseries\" + \"_\" + feature_name + \".pkl\", op=\"w\")\n","# easyIO(full_x_img, folder_path + \"features/\" + feature_name + \"/full_x_img\" + \"_\" + feature_name + \".pkl\", op=\"w\")\n","# easyIO(full_y, folder_path + \"features/\" + feature_name + \"/full_y\" + \"_\" + feature_name + \".pkl\", op=\"w\")\n","# # test\n","# easyIO(test_timeseries, folder_path + \"features/\" + feature_name + \"/test_timeseries\" + \"_\" + feature_name + \".pkl\", op=\"w\")\n","# easyIO(test_x_img, folder_path + \"features/\" + feature_name + \"/test_x_img\" + \"_\" + feature_name + \".pkl\", op=\"w\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"00YKrB0laDKk"},"outputs":[],"source":["ct = ColumnTransformer([\n","    (\"내부온도관측치_discret\", KBinsDiscretizer(128, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부온도관측치\"]),\n","    (\"외부온도관측치_discret\", KBinsDiscretizer(128, encode=\"ordinal\", strategy=\"kmeans\"), [\"외부온도관측치\"]),\n","    (\"내부습도관측치_discret\", KBinsDiscretizer(128, encode=\"ordinal\", strategy=\"kmeans\"), [\"내부습도관측치\"]),\n","    (\"외부습도관측치_discret\", KBinsDiscretizer(128, encode=\"ordinal\", strategy=\"kmeans\"), [\"외부습도관측치\"]),\n","    (\"CO2관측치_discret\", KBinsDiscretizer(128, encode=\"ordinal\", strategy=\"kmeans\"), [\"CO2관측치\"]),\n","    (\"EC관측치_discret\", KBinsDiscretizer(16, encode=\"ordinal\", strategy=\"kmeans\"), [\"EC관측치\"]),\n","    (\"최근분무량_discret\", KBinsDiscretizer(128, encode=\"ordinal\", strategy=\"kmeans\"), [\"최근분무량\"]),\n","    (\"화이트 LED동작강도_discret\", KBinsDiscretizer(16, encode=\"ordinal\", strategy=\"kmeans\"), [\"화이트 LED동작강도\"]),\n","    (\"레드 LED동작강도_discret\", KBinsDiscretizer(16, encode=\"ordinal\", strategy=\"kmeans\"), [\"레드 LED동작강도\"]),\n","    (\"블루 LED동작강도_discret\", KBinsDiscretizer(16, encode=\"ordinal\", strategy=\"kmeans\"), [\"블루 LED동작강도\"]),\n","    (\"냉방온도_discret\", KBinsDiscretizer(16, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방온도\"]),\n","    (\"냉방부하_discret\", KBinsDiscretizer(128, encode=\"ordinal\", strategy=\"kmeans\"), [\"냉방부하\"]),\n","    (\"난방온도_discret\", KBinsDiscretizer(16, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방온도\"]),\n","    (\"난방부하_discret\", KBinsDiscretizer(128, encode=\"ordinal\", strategy=\"kmeans\"), [\"난방부하\"]),\n","    (\"총추정광량_discret\", KBinsDiscretizer(16, encode=\"ordinal\", strategy=\"kmeans\"), [\"총추정광량\"]),\n","    (\"백색광추정광량_discret\", KBinsDiscretizer(16, encode=\"ordinal\", strategy=\"kmeans\"), [\"백색광추정광량\"]),\n","    (\"적색광추정광량_discret\", KBinsDiscretizer(16, encode=\"ordinal\", strategy=\"kmeans\"), [\"적색광추정광량\"]),\n","    (\"청색광추정광량_discret\", KBinsDiscretizer(16, encode=\"ordinal\", strategy=\"kmeans\"), [\"청색광추정광량\"]),\n","])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RYGyL0J2aDIM"},"outputs":[],"source":["num_vars = ['내부온도관측치',\n"," '외부온도관측치',\n"," '내부습도관측치',\n"," '외부습도관측치',\n"," 'CO2관측치',\n"," 'EC관측치',\n"," '최근분무량',\n"," '화이트 LED동작강도',\n"," '레드 LED동작강도',\n"," '블루 LED동작강도',\n"," '냉방온도',\n"," '냉방부하',\n"," '난방온도',\n"," '난방부하',\n"," '총추정광량',\n"," '백색광추정광량',\n"," '적색광추정광량',\n"," '청색광추정광량',\n"," '내외부온도차',\n"," '내외부습도차',\n"," '총LED동작강도']\n","bin_vars = ['EC관측치_binary',\n"," '최근분무량_binary',\n"," '화이트 LED동작강도_binary',\n"," '레드 LED동작강도_binary',\n"," '블루 LED동작강도_binary',\n"," '냉방부하_binary',\n"," '난방부하_binary',\n"," '총추정광량_binary',\n"," '백색광추정광량_binary',\n"," '적색광추정광량_binary',\n"," '청색광추정광량_binary']\n","cat_vars = [i[0] for i in ct._transformers]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rA_r2D1raw8V"},"outputs":[],"source":["# trian\n","train_timeseries = easyIO(None, folder_path + \"features/\" + feature_name + \"/train_timeseries\" + \"_\" + feature_name + \".pkl\", op=\"r\")\n","full_x_img = easyIO(None, folder_path + \"features/\" + feature_name + \"/full_x_img\" + \"_\" + feature_name + \".pkl\", op=\"r\")\n","full_y = easyIO(None, folder_path + \"features/\" + feature_name + \"/full_y\" + \"_\" + feature_name + \".pkl\", op=\"r\")\n","# test\n","test_timeseries = easyIO(None, folder_path + \"features/\" + feature_name + \"/test_timeseries\" + \"_\" + feature_name + \".pkl\", op=\"r\")\n","test_x_img = easyIO(None, folder_path + \"features/\" + feature_name + \"/test_x_img\" + \"_\" + feature_name + \".pkl\", op=\"r\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1652971830246,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"IsMgaiPvCYEu","outputId":"cc900ceb-ad45-453c-dff0-e37a1d2e94b0"},"outputs":[{"data":{"text/plain":["True"]},"execution_count":35,"metadata":{},"output_type":"execute_result"}],"source":["train_timeseries.shape[-1] == len(num_vars) + len(bin_vars) + len(cat_vars)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1652971830246,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"e4AARtKDV_WN","outputId":"900fa8d8-3911-4ba5-a438-c1097eee2324"},"outputs":[{"data":{"text/plain":["(1550, 96, 50)"]},"execution_count":36,"metadata":{},"output_type":"execute_result"}],"source":["train_timeseries.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1652971830246,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"uInHExe7WAdl","outputId":"cb7a2bc4-3945-410e-ca49-7ca68a11cd74"},"outputs":[{"data":{"text/plain":["(1550,)"]},"execution_count":37,"metadata":{},"output_type":"execute_result"}],"source":["full_x_img.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1652971830247,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"FpRMYhPtWBXb","outputId":"45c3320e-91db-43a3-b3dc-03517b65b012"},"outputs":[{"data":{"text/plain":["(1550, 1)"]},"execution_count":38,"metadata":{},"output_type":"execute_result"}],"source":["full_y.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":444,"status":"ok","timestamp":1652971830685,"user":{"displayName":"김영준","userId":"06606532799291918175"},"user_tz":-540},"id":"nHJNTyoCobmN","outputId":"1a960c23-f078-47e5-9975-1caa9e65d11b"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-79bacdf3-8ef9-4323-a9d0-bd8a6e5c36ac\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3.915876</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.106997</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.293318</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.462881</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4.639929</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-79bacdf3-8ef9-4323-a9d0-bd8a6e5c36ac')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-79bacdf3-8ef9-4323-a9d0-bd8a6e5c36ac button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-79bacdf3-8ef9-4323-a9d0-bd8a6e5c36ac');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["     target\n","0  3.915876\n","1  4.106997\n","2  4.293318\n","3  4.462881\n","4  4.639929"]},"execution_count":39,"metadata":{},"output_type":"execute_result"}],"source":["full_y.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"W-B_JpR5Bfpi"},"outputs":[],"source":["del full_x, test_x"]},{"cell_type":"markdown","metadata":{"id":"TGKabM-UoSJh"},"source":["# Swin Transformer"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9tfqPktToW2p"},"outputs":[],"source":["# def window_partition(x, window_size):\n","#     _, height, width, channels = x.shape\n","#     patch_num_y = height // window_size\n","#     patch_num_x = width // window_size\n","#     x = tf.reshape(\n","#         x, shape=(-1, patch_num_y, window_size, patch_num_x, window_size, channels)\n","#     )\n","#     x = tf.transpose(x, (0, 1, 3, 2, 4, 5))\n","#     windows = tf.reshape(x, shape=(-1, window_size, window_size, channels))\n","#     return windows\n","\n","# def window_reverse(windows, window_size, height, width, channels):\n","#     patch_num_y = height // window_size\n","#     patch_num_x = width // window_size\n","#     x = tf.reshape(\n","#         windows,\n","#         shape=(-1, patch_num_y, patch_num_x, window_size, window_size, channels),\n","#     )\n","#     x = tf.transpose(x, perm=(0, 1, 3, 2, 4, 5))\n","#     x = tf.reshape(x, shape=(-1, height, width, channels))\n","#     return x\n","\n","# class DropPath(layers.Layer):\n","#     def __init__(self, drop_prob=None, **kwargs):\n","#         super(DropPath, self).__init__(**kwargs)\n","#         self.drop_prob = drop_prob\n","#     def call(self, x):\n","#         input_shape = tf.shape(x)\n","#         batch_size = input_shape[0]\n","#         rank = x.shape.rank\n","#         shape = (batch_size,) + (1,) * (rank - 1)\n","#         random_tensor = (1 - self.drop_prob) + tf.random.uniform(shape, dtype=x.dtype)\n","#         path_mask = tf.floor(random_tensor)\n","#         output = tf.math.divide(x, 1 - self.drop_prob) * path_mask\n","#         return output\n","#     def get_config(self):\n","#         config = super().get_config()\n","#         return config"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0Xt9vQrmo70D"},"outputs":[],"source":["# class WindowAttention(layers.Layer):\n","#     def __init__(\n","#         self, dim, window_size, num_heads, qkv_bias=True, dropout_rate=0.0, **kwargs\n","#     ):\n","#         super(WindowAttention, self).__init__(**kwargs)\n","#         self.dim = dim\n","#         self.window_size = window_size\n","#         self.num_heads = num_heads\n","#         self.scale = (dim // num_heads) ** -0.5\n","#         self.qkv = layers.Dense(dim * 3, use_bias=qkv_bias)\n","#         self.dropout = layers.Dropout(dropout_rate)\n","#         self.proj = layers.Dense(dim)\n","#     def build(self, input_shape):\n","#         num_window_elements = (2 * self.window_size[0] - 1) * (\n","#             2 * self.window_size[1] - 1\n","#         )\n","#         self.relative_position_bias_table = self.add_weight(\n","#             shape=(num_window_elements, self.num_heads),\n","#             initializer=tf.initializers.Zeros(),\n","#             trainable=True,\n","#             name=\"name\"\n","#         )\n","#         coords_h = np.arange(self.window_size[0])\n","#         coords_w = np.arange(self.window_size[1])\n","#         coords_matrix = np.meshgrid(coords_h, coords_w, indexing=\"ij\")\n","#         coords = np.stack(coords_matrix)\n","#         coords_flatten = coords.reshape(2, -1)\n","#         relative_coords = coords_flatten[:, :, None] - coords_flatten[:, None, :]\n","#         relative_coords = relative_coords.transpose([1, 2, 0])\n","#         relative_coords[:, :, 0] += self.window_size[0] - 1\n","#         relative_coords[:, :, 1] += self.window_size[1] - 1\n","#         relative_coords[:, :, 0] *= 2 * self.window_size[1] - 1\n","#         relative_position_index = relative_coords.sum(-1)\n","\n","#         self.relative_position_index = tf.Variable(\n","#             initial_value=tf.convert_to_tensor(relative_position_index), trainable=False\n","#         )\n","#     def call(self, x, mask=None):\n","#         _, size, channels = x.shape\n","#         head_dim = channels // self.num_heads\n","#         x_qkv = self.qkv(x)\n","#         x_qkv = tf.reshape(x_qkv, shape=(-1, size, 3, self.num_heads, head_dim))\n","#         x_qkv = tf.transpose(x_qkv, perm=(2, 0, 3, 1, 4))\n","#         q, k, v = x_qkv[0], x_qkv[1], x_qkv[2]\n","#         q = q * self.scale\n","#         k = tf.transpose(k, perm=(0, 1, 3, 2))\n","#         attn = q @ k\n","\n","#         num_window_elements = self.window_size[0] * self.window_size[1]\n","#         relative_position_index_flat = tf.reshape(\n","#             self.relative_position_index, shape=(-1,)\n","#         )\n","#         relative_position_bias = tf.gather(\n","#             self.relative_position_bias_table, relative_position_index_flat\n","#         )\n","#         relative_position_bias = tf.reshape(\n","#             relative_position_bias, shape=(num_window_elements, num_window_elements, -1)\n","#         )\n","#         relative_position_bias = tf.transpose(relative_position_bias, perm=(2, 0, 1))\n","#         attn = attn + tf.expand_dims(relative_position_bias, axis=0)\n","\n","#         if mask is not None:\n","#             nW = mask.get_shape()[0]\n","#             mask_float = tf.cast(\n","#                 tf.expand_dims(tf.expand_dims(mask, axis=1), axis=0), tf.float32\n","#             )\n","#             attn = (\n","#                 tf.reshape(attn, shape=(-1, nW, self.num_heads, size, size))\n","#                 + mask_float\n","#             )\n","#             attn = tf.reshape(attn, shape=(-1, self.num_heads, size, size))\n","#             attn = tf.keras.activations.softmax(attn, axis=-1)\n","#         else:\n","#             attn = tf.keras.activations.softmax(attn, axis=-1)\n","#         attn = self.dropout(attn)\n","\n","#         x_qkv = attn @ v\n","#         x_qkv = tf.transpose(x_qkv, perm=(0, 2, 1, 3))\n","#         x_qkv = tf.reshape(x_qkv, shape=(-1, size, channels))\n","#         x_qkv = self.proj(x_qkv)\n","#         x_qkv = self.dropout(x_qkv)\n","#         return x_qkv\n","#     def get_config(self):\n","#         config = super().get_config()\n","#         return config"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"X7BgJzmUoa92"},"outputs":[],"source":["# class SwinTransformer(layers.Layer):\n","#     def __init__(\n","#         self,\n","#         dim,\n","#         num_patch,\n","#         num_heads,\n","#         window_size=7,\n","#         shift_size=0,\n","#         num_mlp=1024,\n","#         qkv_bias=True,\n","#         dropout_rate=0.0,\n","#         **kwargs,\n","#     ):\n","#         super(SwinTransformer, self).__init__(**kwargs)\n","\n","#         self.dim = dim  # number of input dimensions\n","#         self.num_patch = num_patch  # number of embedded patches\n","#         self.num_heads = num_heads  # number of attention heads\n","#         self.window_size = window_size  # size of window\n","#         self.shift_size = shift_size  # size of window shift\n","#         self.num_mlp = num_mlp  # number of MLP nodes\n","\n","#         self.norm1 = layers.LayerNormalization(epsilon=1e-5)\n","#         self.attn = WindowAttention(\n","#             dim,\n","#             window_size=(self.window_size, self.window_size),\n","#             num_heads=num_heads,\n","#             qkv_bias=qkv_bias,\n","#             dropout_rate=dropout_rate,\n","#         )\n","#         self.drop_path = DropPath(dropout_rate)\n","#         self.norm2 = layers.LayerNormalization(epsilon=1e-5)\n","\n","#         self.mlp = Sequential(\n","#             [\n","#                 layers.Dense(num_mlp),\n","#                 layers.Activation(tf.keras.activations.gelu),\n","#                 layers.Dropout(dropout_rate),\n","#                 layers.Dense(dim),\n","#                 layers.Dropout(dropout_rate),\n","#             ]\n","#         )\n","\n","#         if min(self.num_patch) < self.window_size:\n","#             self.shift_size = 0\n","#             self.window_size = min(self.num_patch)\n","#     def build(self, input_shape):\n","#         if self.shift_size == 0:\n","#             self.attn_mask = None\n","#         else:\n","#             height, width = self.num_patch\n","#             h_slices = (\n","#                 slice(0, -self.window_size),\n","#                 slice(-self.window_size, -self.shift_size),\n","#                 slice(-self.shift_size, None),\n","#             )\n","#             w_slices = (\n","#                 slice(0, -self.window_size),\n","#                 slice(-self.window_size, -self.shift_size),\n","#                 slice(-self.shift_size, None),\n","#             )\n","#             mask_array = np.zeros((1, height, width, 1))\n","#             count = 0\n","#             for h in h_slices:\n","#                 for w in w_slices:\n","#                     mask_array[:, h, w, :] = count\n","#                     count += 1\n","#             mask_array = tf.convert_to_tensor(mask_array)\n","\n","#             # mask array to windows\n","#             mask_windows = window_partition(mask_array, self.window_size)\n","#             mask_windows = tf.reshape(\n","#                 mask_windows, shape=[-1, self.window_size * self.window_size]\n","#             )\n","#             attn_mask = tf.expand_dims(mask_windows, axis=1) - tf.expand_dims(\n","#                 mask_windows, axis=2\n","#             )\n","#             attn_mask = tf.where(attn_mask != 0, -100.0, attn_mask)\n","#             attn_mask = tf.where(attn_mask == 0, 0.0, attn_mask)\n","#             self.attn_mask = tf.Variable(initial_value=attn_mask, trainable=False)\n","#     def call(self, x):\n","#         height, width = self.num_patch\n","#         _, num_patches_before, channels = x.shape\n","#         x_skip = x\n","#         x = self.norm1(x)\n","#         x = tf.reshape(x, shape=(-1, height, width, channels))\n","#         if self.shift_size > 0:\n","#             shifted_x = tf.roll(\n","#                 x, shift=[-self.shift_size, -self.shift_size], axis=[1, 2]\n","#             )\n","#         else:\n","#             shifted_x = x\n","\n","#         x_windows = window_partition(shifted_x, self.window_size)\n","#         x_windows = tf.reshape(\n","#             x_windows, shape=(-1, self.window_size * self.window_size, channels)\n","#         )\n","#         attn_windows = self.attn(x_windows, mask=self.attn_mask)\n","\n","#         attn_windows = tf.reshape(\n","#             attn_windows, shape=(-1, self.window_size, self.window_size, channels)\n","#         )\n","#         shifted_x = window_reverse(\n","#             attn_windows, self.window_size, height, width, channels\n","#         )\n","#         if self.shift_size > 0:\n","#             x = tf.roll(\n","#                 shifted_x, shift=[self.shift_size, self.shift_size], axis=[1, 2]\n","#             )\n","#         else:\n","#             x = shifted_x\n","\n","#         x = tf.reshape(x, shape=(-1, height * width, channels))\n","#         x = self.drop_path(x)\n","#         x = x_skip + x\n","#         x_skip = x\n","#         x = self.norm2(x)\n","#         x = self.mlp(x)\n","#         x = self.drop_path(x)\n","#         x = x_skip + x\n","#         return x\n","#     def get_config(self):\n","#         config = super().get_config()\n","#         return config"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wwUTvVkVpODN"},"outputs":[],"source":["# class PatchExtract(layers.Layer):\n","#     def __init__(self, patch_size, **kwargs):\n","#         super(PatchExtract, self).__init__(**kwargs)\n","#         self.patch_size_x = patch_size[0]\n","#         self.patch_size_y = patch_size[1]\n","#     def call(self, images):\n","#         batch_size = tf.shape(images)[0]\n","#         patches = tf.image.extract_patches(\n","#             images=images,\n","#             sizes=(1, self.patch_size_x, self.patch_size_y, 1),\n","#             strides=(1, self.patch_size_x, self.patch_size_y, 1),\n","#             rates=(1, 1, 1, 1),\n","#             padding=\"VALID\",\n","#         )\n","#         patch_dim = patches.shape[-1]\n","#         patch_num = patches.shape[1]\n","#         return tf.reshape(patches, (batch_size, patch_num * patch_num, patch_dim))\n","#     def get_config(self):\n","#         config = super().get_config()\n","#         return config\n","\n","# class PatchEmbedding(layers.Layer):\n","#     def __init__(self, num_patch, embed_dim, **kwargs):\n","#         super(PatchEmbedding, self).__init__(**kwargs)\n","#         self.num_patch = num_patch\n","#         self.proj = layers.Dense(embed_dim)\n","#         self.pos_embed = layers.Embedding(input_dim=num_patch, output_dim=embed_dim)\n","#     def call(self, patch):\n","#         pos = tf.range(start=0, limit=self.num_patch, delta=1)\n","#         return self.proj(patch) + self.pos_embed(pos)\n","#     def get_config(self):\n","#         config = super().get_config()\n","#         return config\n","\n","# class PatchMerging(tf.keras.layers.Layer):\n","#     def __init__(self, num_patch, embed_dim):\n","#         super(PatchMerging, self).__init__()\n","#         self.num_patch = num_patch\n","#         self.embed_dim = embed_dim\n","#         self.linear_trans = layers.Dense(2 * embed_dim, use_bias=False)\n","#     def call(self, x):\n","#         height, width = self.num_patch\n","#         _, _, C = x.get_shape().as_list()\n","#         x = tf.reshape(x, shape=(-1, height, width, C))\n","#         x0 = x[:, 0::2, 0::2, :]\n","#         x1 = x[:, 1::2, 0::2, :]\n","#         x2 = x[:, 0::2, 1::2, :]\n","#         x3 = x[:, 1::2, 1::2, :]\n","#         x = tf.concat((x0, x1, x2, x3), axis=-1)\n","#         x = tf.reshape(x, shape=(-1, (height // 2) * (width // 2), 4 * C))\n","#         return self.linear_trans(x)\n","#     def get_config(self):\n","#         config = super().get_config()\n","#         return config"]},{"cell_type":"markdown","metadata":{"id":"Esnj5xBcY1DE"},"source":["# NN Model - Swin(pretrained) LSTM V1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Mkib3o0aY1pn"},"outputs":[],"source":["# img_size = 224\n","# channels = 3\n","\n","# dropoutRate = 0.5\n","\n","# def create_model():\n","#     input_list = []\n","#     concat_list = []\n","\n","#     input_list.append(layers.Input(shape=(img_size, img_size, channels), dtype=tf.float32))\n","\n","#     # augmenation layer\n","#     x = RandomColorDistortion(hue_flag=False)(input_list[-1])\n","#     x = layers.RandomFlip(mode=\"horizontal_and_vertical\")(x)\n","#     x = tf.keras.layers.Rescaling(scale=1./255)(x)\n","\n","#     x = tf_hub.KerasLayer(\"https://tfhub.dev/sayakpaul/swin_base_patch4_window7_224_fe/1\", name=\"pretrained\", trainable=False)(x)\n","\n","#     x = layers.Dropout(dropoutRate)(x)\n","#     x = layers.Dense(256, activation=\"relu\")(x)\n","#     x = layers.Dropout(dropoutRate)(x)\n","#     concat_list.append(layers.Dense(64, activation=\"relu\")(x))\n","\n","#     # create embedding layers\n","#     embed_list = []\n","#     for i in ct._transformers:\n","#         embed_list.append(layers.Embedding(input_dim=i[1].n_bins, output_dim=16, mask_zero=False, embeddings_initializer=\"truncated_normal\"))\n","\n","#     input_list.append(layers.Input(shape=(train_timeseries.shape[1], len(num_vars)), dtype=tf.float32))\n","#     lstm_num = input_list[-1]\n","\n","#     input_list.append(layers.Input(shape=(train_timeseries.shape[1], len(bin_vars)), dtype=tf.float32))\n","#     lstm_bin = input_list[-1]\n","\n","#     # 4. lstm category\n","#     dcn_list = []\n","#     for idx, cat_var in enumerate([i[0] for i in ct._transformers]):\n","#         input_list.append(layers.Input(shape=(train_timeseries.shape[1], 1), dtype=tf.int32))\n","#         x = embed_list[idx](input_list[-1])\n","#         dcn_list.append(tfa.layers.NoisyDense(4)(x))\n","\n","#     dcn_input = layers.Concatenate(axis=2)(dcn_list)\n","#     dcn1 = tfrs.layers.dcn.Cross()(dcn_input, layers.Dropout(dropoutRate)(dcn_input))\n","#     dcn2 = tfrs.layers.dcn.Cross()(dcn_input, layers.Dropout(dropoutRate)(dcn1))\n","#     dcn3 = tfrs.layers.dcn.Cross()(dcn_input, layers.Dropout(dropoutRate)(dcn2))\n","\n","#     dcn_concat = layers.Concatenate()([dcn_input, dcn1, dcn2, dcn3])\n","#     x = layers.Dropout(dropoutRate)(dcn_concat)\n","#     x = layers.Dense(4, activation=\"softmax\")(x)\n","#     lstm_cat = layers.Reshape((train_timeseries.shape[1],-1))(x)\n","\n","#     lstm_concat = layers.Concatenate(name=\"lstm_concat\")([lstm_num, lstm_bin, lstm_cat])\n","#     x = layers.LSTM(128, return_sequences=True, dropout=dropoutRate)(lstm_concat)\n","#     x = layers.LSTM(128, return_sequences=False, dropout=dropoutRate)(x)\n","#     x = layers.Dropout(dropoutRate)(x)\n","#     concat_list.append(layers.Dense(64, activation=\"relu\")(x))\n","\n","#     x = layers.Concatenate()(concat_list)\n","\n","#     hidden1 = layers.Dropout(dropoutRate)(x)\n","#     hidden1 = tfa.layers.WeightNormalization(\n","#         layers.Dense(64, activation=\"swish\", kernel_initializer=\"lecun_normal\")\n","#     )(hidden1)\n","    \n","#     hidden2 = layers.Dropout(dropoutRate)(layers.Concatenate()([x, hidden1]))\n","#     hidden2 = tfa.layers.WeightNormalization(\n","#         layers.Dense(64, activation=\"swish\", kernel_initializer=\"lecun_normal\")\n","#     )(hidden2)\n","    \n","#     hidden2 = layers.Dropout(dropoutRate)(layers.Concatenate()([x, hidden1, hidden2]))\n","#     last_layer = tfa.layers.WeightNormalization(\n","#         layers.Dense(64, activation=\"swish\", kernel_initializer=\"lecun_normal\")\n","#     )(hidden2)\n","\n","#     regressor = layers.Dense(1)(last_layer)\n","\n","#     return Model(input_list, regressor)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zei6A3-Jw87G"},"outputs":[],"source":["# create_model().summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QVtRCcWCO1FD"},"outputs":[],"source":["# plot_model(create_model())"]},{"cell_type":"markdown","metadata":{"id":"1Vupa1fD1IOe"},"source":["# NN Model - Swin(pretrained) Dense V2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"s8p2locFh73d"},"outputs":[],"source":["# img_size = 224\n","# channels = 3\n","\n","# dropoutRate = 0.5\n","\n","# def create_model():\n","#     input_list = []\n","#     concat_list = []\n","\n","#     input_list.append(layers.Input(shape=(img_size, img_size, channels), dtype=tf.float32))\n","\n","#     # augmenation layer\n","#     x = RandomColorDistortion(hue_flag=False)(input_list[-1])\n","#     x = layers.RandomFlip(mode=\"horizontal_and_vertical\")(x)\n","#     x = tf.keras.layers.Rescaling(scale=1./255)(x)\n","\n","#     x = tf_hub.KerasLayer(\"https://tfhub.dev/sayakpaul/swin_base_patch4_window7_224_fe/1\", name=\"pretrained\", trainable=False)(x)\n","\n","#     x = layers.Dropout(dropoutRate)(x)\n","#     x = layers.Dense(256, activation=\"relu\")(x)\n","#     x = layers.Dropout(dropoutRate)(x)\n","#     concat_list.append(layers.Dense(64, activation=\"relu\")(x))\n","\n","#     # create embedding layers\n","#     embed_list = []\n","#     for i in ct._transformers:\n","#         embed_list.append(layers.Embedding(input_dim=i[1].n_bins, output_dim=16, mask_zero=False, embeddings_initializer=\"truncated_normal\"))\n","\n","#     input_list.append(layers.Input(shape=(train_timeseries.shape[1], len(num_vars)), dtype=tf.float32))\n","#     lstm_num = input_list[-1]\n","\n","#     input_list.append(layers.Input(shape=(train_timeseries.shape[1], len(bin_vars)), dtype=tf.float32))\n","#     lstm_bin = input_list[-1]\n","\n","#     # 4. lstm category\n","#     dcn_list = []\n","#     for idx, cat_var in enumerate([i[0] for i in ct._transformers]):\n","#         input_list.append(layers.Input(shape=(train_timeseries.shape[1], 1), dtype=tf.int32))\n","#         x = embed_list[idx](input_list[-1])\n","#         dcn_list.append(tfa.layers.NoisyDense(4)(x))\n","\n","#     dcn_input = layers.Concatenate(axis=2)(dcn_list)\n","#     dcn1 = tfrs.layers.dcn.Cross()(dcn_input, layers.Dropout(dropoutRate)(dcn_input))\n","#     dcn2 = tfrs.layers.dcn.Cross()(dcn_input, layers.Dropout(dropoutRate)(dcn1))\n","#     dcn3 = tfrs.layers.dcn.Cross()(dcn_input, layers.Dropout(dropoutRate)(dcn2))\n","\n","#     dcn_concat = layers.Concatenate()([dcn_input, dcn1, dcn2, dcn3])\n","#     x = layers.Dropout(dropoutRate)(dcn_concat)\n","#     x = layers.Dense(4, activation=\"softmax\")(x)\n","#     lstm_cat = layers.Reshape((train_timeseries.shape[1],-1))(x)\n","\n","#     lstm_concat = layers.Concatenate(name=\"lstm_concat\")([lstm_num, lstm_bin, lstm_cat])\n","#     x = layers.Dropout(dropoutRate)(lstm_concat)\n","#     x = layers.Dense(32, activation=\"relu\")(x)\n","#     x = layers.Dropout(dropoutRate)(x)\n","#     x = layers.Dense(8, activation=\"relu\")(x)\n","#     x = layers.Flatten()(x)\n","#     x = layers.Dropout(dropoutRate)(x)\n","#     x = layers.Dense(256, activation=\"relu\")(x)\n","#     x = layers.Dropout(dropoutRate)(x)\n","#     x = layers.Dense(64, activation=\"relu\")(x)\n","#     concat_list.append(x)\n","\n","#     x = layers.Concatenate()(concat_list)\n","\n","#     hidden1 = layers.Dropout(dropoutRate)(x)\n","#     hidden1 = tfa.layers.WeightNormalization(\n","#         layers.Dense(64, activation=\"swish\", kernel_initializer=\"lecun_normal\")\n","#     )(hidden1)\n","    \n","#     hidden2 = layers.Dropout(dropoutRate)(layers.Concatenate()([x, hidden1]))\n","#     hidden2 = tfa.layers.WeightNormalization(\n","#         layers.Dense(64, activation=\"swish\", kernel_initializer=\"lecun_normal\")\n","#     )(hidden2)\n","    \n","#     hidden2 = layers.Dropout(dropoutRate)(layers.Concatenate()([x, hidden1, hidden2]))\n","#     last_layer = tfa.layers.WeightNormalization(\n","#         layers.Dense(64, activation=\"swish\", kernel_initializer=\"lecun_normal\")\n","#     )(hidden2)\n","\n","#     regressor = layers.Dense(1)(last_layer)\n","\n","#     return Model(input_list, regressor)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xUUKQ2CJ2lAl"},"outputs":[],"source":["# create_model().summary()"]},{"cell_type":"markdown","metadata":{"id":"5n2mZOfwqdwu"},"source":["# NN Model - Swin(pretrained) Dense V3"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"h8fYdP6HqmG7"},"outputs":[],"source":["img_size = 384\n","channels = 3\n","dropoutRate = 0.5"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Usv629lTqemD"},"outputs":[],"source":["def create_model():\n","    input_list = []\n","    concat_list = []\n","\n","    input_list.append(layers.Input(shape=(img_size, img_size, channels), dtype=tf.float32))\n","\n","    # augmenation layer\n","    x = RandomColorDistortion(hue_flag=False)(input_list[-1])\n","    x = layers.RandomFlip(mode=\"horizontal_and_vertical\")(x)\n","    x = tf.keras.layers.Rescaling(scale=1./255)(x)\n","    \n","    x = tf_hub.KerasLayer(\"https://tfhub.dev/sayakpaul/swin_base_patch4_window12_384_fe/1\", name=\"pretrained\", trainable=False)(x)\n","\n","    x = layers.Dropout(dropoutRate)(x)\n","    x = layers.Dense(256, activation=\"relu\")(x)\n","    x = layers.Dropout(dropoutRate)(x)\n","    x = layers.Dense(64, activation=\"relu\")(x)\n","    concat_list.append(x)\n","\n","    # create embedding layers\n","    embed_list = []\n","    for i in ct._transformers:\n","        embed_list.append(layers.Embedding(input_dim=i[1].n_bins, output_dim=16, mask_zero=False, embeddings_initializer=\"truncated_normal\"))\n","\n","    # lstm numeric\n","    input_list.append(layers.Input(shape=(train_timeseries.shape[1], len(num_vars)), dtype=tf.float32))\n","    lstm_num = input_list[-1]\n","\n","    # lstm binary\n","    input_list.append(layers.Input(shape=(train_timeseries.shape[1], len(bin_vars)), dtype=tf.float32))\n","    lstm_bin = input_list[-1]\n","\n","    # lstm category\n","    dcn_list = []\n","    for idx, cat_var in enumerate([i[0] for i in ct._transformers]):\n","        input_list.append(layers.Input(shape=(train_timeseries.shape[1], 1), dtype=tf.int32))\n","        x = embed_list[idx](input_list[-1])\n","        dcn_list.append(tfa.layers.NoisyDense(4)(x))\n","\n","    dcn_input = layers.Concatenate(axis=2)(dcn_list)\n","    dcn1 = tfrs.layers.dcn.Cross()(dcn_input, layers.Dropout(dropoutRate)(dcn_input))\n","    dcn2 = tfrs.layers.dcn.Cross()(dcn_input, layers.Dropout(dropoutRate)(dcn1))\n","    dcn3 = tfrs.layers.dcn.Cross()(dcn_input, layers.Dropout(dropoutRate)(dcn2))\n","\n","    dcn_concat = layers.Concatenate()([dcn_input, dcn1, dcn2, dcn3])\n","    x = layers.Dropout(dropoutRate)(dcn_concat)\n","    x = layers.Dense(4, activation=\"softmax\")(x)\n","    lstm_cat = layers.Reshape((train_timeseries.shape[1],-1))(x)\n","\n","    lstm_concat = layers.Concatenate(name=\"lstm_concat\")([lstm_num, lstm_bin, lstm_cat])\n","    x = layers.Dropout(dropoutRate)(lstm_concat)\n","    x = layers.Dense(32, activation=\"relu\")(x)\n","    x = layers.Dropout(dropoutRate)(x)\n","    x = layers.Dense(8, activation=\"relu\")(x)\n","    x = layers.Flatten()(x)\n","    x = layers.Dropout(dropoutRate)(x)\n","    x = layers.Dense(256, activation=\"relu\")(x)\n","    x = layers.Dropout(dropoutRate)(x)\n","    x = layers.Dense(64, activation=\"relu\")(x)\n","    concat_list.append(x)\n","\n","    x = layers.Concatenate()(concat_list)\n","\n","    hidden1 = layers.Dropout(dropoutRate)(x)\n","    hidden1 = tfa.layers.WeightNormalization(\n","        layers.Dense(64, activation=\"swish\", kernel_initializer=\"lecun_normal\")\n","    )(hidden1)\n","    \n","    hidden2 = layers.Dropout(dropoutRate)(layers.Concatenate()([x, hidden1]))\n","    hidden2 = tfa.layers.WeightNormalization(\n","        layers.Dense(64, activation=\"swish\", kernel_initializer=\"lecun_normal\")\n","    )(hidden2)\n","    \n","    hidden2 = layers.Dropout(dropoutRate)(layers.Concatenate()([x, hidden1, hidden2]))\n","    last_layer = tfa.layers.WeightNormalization(\n","        layers.Dense(64, activation=\"swish\", kernel_initializer=\"lecun_normal\")\n","    )(hidden2)\n","\n","    regressor = layers.Dense(1)(last_layer)\n","\n","    return Model(input_list, regressor)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1qwaupUjqo6a"},"outputs":[],"source":["# create_model().summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OC7emWypXiwD"},"outputs":[],"source":["# plot_model(create_model())"]},{"cell_type":"markdown","metadata":{"id":"oJJ6kLpfoAd1"},"source":["# NN Model - BiT(pretrained) Dense V1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"15U26IgDIUTg"},"outputs":[],"source":["# img_size = 224\n","# channels = 3\n","# dropoutRate = 0.5"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wBmZPnGAoA4U"},"outputs":[],"source":["# def create_model():\n","#     input_list = []\n","#     concat_list = []\n","\n","#     input_list.append(layers.Input(shape=(img_size, img_size, channels), dtype=tf.float32))\n","\n","#     # augmenation layer\n","#     x = RandomColorDistortion(hue_flag=False)(input_list[-1])\n","#     x = layers.RandomFlip(mode=\"horizontal_and_vertical\")(x)\n","#     x = tf.keras.layers.Rescaling(scale=1./255)(x)\n","\n","#     x = tf_hub.KerasLayer(\"https://tfhub.dev/google/bit/m-r101x1/1\", name=\"pretrained\", trainable=False)(x)\n","\n","#     x = layers.Dropout(dropoutRate)(x)\n","#     x = layers.Dense(1024, activation=\"relu\")(x)\n","#     # x = layers.Dropout(dropoutRate)(x)\n","#     # x = layers.Dense(256, activation=\"relu\")(x)\n","#     x = layers.Dropout(dropoutRate)(x)\n","#     concat_list.append(layers.Dense(64, activation=\"relu\")(x))\n","\n","#     # create embedding layers\n","#     embed_list = []\n","#     for i in ct._transformers:\n","#         embed_list.append(layers.Embedding(input_dim=i[1].n_bins, output_dim=16, mask_zero=False, embeddings_initializer=\"truncated_normal\"))\n","\n","#     input_list.append(layers.Input(shape=(train_timeseries.shape[1], len(num_vars)), dtype=tf.float32))\n","#     lstm_num = input_list[-1]\n","\n","#     input_list.append(layers.Input(shape=(train_timeseries.shape[1], len(bin_vars)), dtype=tf.float32))\n","#     lstm_bin = input_list[-1]\n","\n","#     # 4. lstm category\n","#     dcn_list = []\n","#     for idx, cat_var in enumerate([i[0] for i in ct._transformers]):\n","#         input_list.append(layers.Input(shape=(train_timeseries.shape[1], 1), dtype=tf.int32))\n","#         x = embed_list[idx](input_list[-1])\n","#         dcn_list.append(tfa.layers.NoisyDense(4)(x))\n","\n","#     dcn_input = layers.Concatenate(axis=2)(dcn_list)\n","#     dcn1 = tfrs.layers.dcn.Cross()(dcn_input, layers.Dropout(dropoutRate)(dcn_input))\n","#     dcn2 = tfrs.layers.dcn.Cross()(dcn_input, layers.Dropout(dropoutRate)(dcn1))\n","#     dcn3 = tfrs.layers.dcn.Cross()(dcn_input, layers.Dropout(dropoutRate)(dcn2))\n","\n","#     dcn_concat = layers.Concatenate()([dcn_input, dcn1, dcn2, dcn3])\n","#     x = layers.Dropout(dropoutRate)(dcn_concat)\n","#     x = layers.Dense(4, activation=\"softmax\")(x)\n","#     lstm_cat = layers.Reshape((train_timeseries.shape[1],-1))(x)\n","\n","#     lstm_concat = layers.Concatenate(name=\"lstm_concat\")([lstm_num, lstm_bin, lstm_cat])\n","#     x = layers.Dropout(dropoutRate)(lstm_concat)\n","#     x = layers.Dense(32, activation=\"relu\")(x)\n","#     x = layers.Flatten()(x)\n","#     x = layers.Dropout(dropoutRate)(x)\n","#     x = layers.Dense(1024, activation=\"relu\")(x)\n","#     # x = layers.Dropout(dropoutRate)(x)\n","#     # x = layers.Dense(256, activation=\"relu\")(x)\n","#     x = layers.Dropout(dropoutRate)(x)\n","#     x = layers.Dense(64, activation=\"relu\")(x)\n","#     concat_list.append(x)\n","\n","#     x = layers.Concatenate()(concat_list)\n","\n","#     hidden1 = layers.Dropout(dropoutRate)(x)\n","#     hidden1 = tfa.layers.WeightNormalization(\n","#         layers.Dense(64, activation=\"swish\", kernel_initializer=\"lecun_normal\")\n","#     )(hidden1)\n","    \n","#     hidden2 = layers.Dropout(dropoutRate)(layers.Concatenate()([x, hidden1]))\n","#     hidden2 = tfa.layers.WeightNormalization(\n","#         layers.Dense(64, activation=\"swish\", kernel_initializer=\"lecun_normal\")\n","#     )(hidden2)\n","    \n","#     hidden2 = layers.Dropout(dropoutRate)(layers.Concatenate()([x, hidden1, hidden2]))\n","#     last_layer = tfa.layers.WeightNormalization(\n","#         layers.Dense(64, activation=\"swish\", kernel_initializer=\"lecun_normal\")\n","#     )(hidden2)\n","\n","#     regressor = layers.Dense(1)(last_layer)\n","\n","#     return Model(input_list, regressor)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fDYIKsLho9X6"},"outputs":[],"source":["# create_model().summary()"]},{"cell_type":"markdown","metadata":{"id":"33pkMS4RqQn0"},"source":["# NN Model - EfficientNet(pretrained) Dense V1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2piLh1kUqQ1a"},"outputs":[],"source":["# img_size = 480\n","# channels = 3\n","# dropoutRate = 0.5"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ro6JuxyUqRSH"},"outputs":[],"source":["# def create_model():\n","#     input_list = []\n","#     concat_list = []\n","\n","#     input_list.append(layers.Input(shape=(img_size, img_size, channels), dtype=tf.float32))\n","\n","#     # augmenation layer\n","#     x = RandomColorDistortion(hue_flag=False)(input_list[-1])\n","#     x = layers.RandomFlip(mode=\"horizontal_and_vertical\")(x)\n","#     x = tf.keras.layers.Rescaling(scale=1./255)(x)\n","\n","#     x = tf_hub.KerasLayer(\"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet21k_ft1k_l/feature_vector/2\", name=\"pretrained\", trainable=False)(x)\n","\n","#     x = layers.Dropout(dropoutRate)(x)\n","#     x = layers.Dense(256, activation=\"relu\")(x)\n","#     x = layers.Dropout(dropoutRate)(x)\n","#     concat_list.append(layers.Dense(64, activation=\"relu\")(x))\n","\n","#     # create embedding layers\n","#     embed_list = []\n","#     for i in ct._transformers:\n","#         embed_list.append(layers.Embedding(input_dim=i[1].n_bins, output_dim=16, mask_zero=False, embeddings_initializer=\"truncated_normal\"))\n","\n","#     input_list.append(layers.Input(shape=(train_timeseries.shape[1], len(num_vars)), dtype=tf.float32))\n","#     lstm_num = input_list[-1]\n","\n","#     input_list.append(layers.Input(shape=(train_timeseries.shape[1], len(bin_vars)), dtype=tf.float32))\n","#     lstm_bin = input_list[-1]\n","\n","#     # 4. lstm category\n","#     dcn_list = []\n","#     for idx, cat_var in enumerate([i[0] for i in ct._transformers]):\n","#         input_list.append(layers.Input(shape=(train_timeseries.shape[1], 1), dtype=tf.int32))\n","#         x = embed_list[idx](input_list[-1])\n","#         dcn_list.append(tfa.layers.NoisyDense(4)(x))\n","\n","#     dcn_input = layers.Concatenate(axis=2)(dcn_list)\n","#     dcn1 = tfrs.layers.dcn.Cross()(dcn_input, layers.Dropout(dropoutRate)(dcn_input))\n","#     dcn2 = tfrs.layers.dcn.Cross()(dcn_input, layers.Dropout(dropoutRate)(dcn1))\n","#     dcn3 = tfrs.layers.dcn.Cross()(dcn_input, layers.Dropout(dropoutRate)(dcn2))\n","\n","#     dcn_concat = layers.Concatenate()([dcn_input, dcn1, dcn2, dcn3])\n","#     x = layers.Dropout(dropoutRate)(dcn_concat)\n","#     x = layers.Dense(4, activation=\"softmax\")(x)\n","#     lstm_cat = layers.Reshape((train_timeseries.shape[1],-1))(x)\n","\n","#     lstm_concat = layers.Concatenate(name=\"lstm_concat\")([lstm_num, lstm_bin, lstm_cat])\n","#     x = layers.Dropout(dropoutRate)(lstm_concat)\n","#     x = layers.Dense(32, activation=\"relu\")(x)\n","#     x = layers.Dropout(dropoutRate)(x)\n","#     x = layers.Dense(8, activation=\"relu\")(x)\n","#     x = layers.Flatten()(x)\n","#     x = layers.Dropout(dropoutRate)(x)\n","#     x = layers.Dense(256, activation=\"relu\")(x)\n","#     x = layers.Dropout(dropoutRate)(x)\n","#     x = layers.Dense(64, activation=\"relu\")(x)\n","#     concat_list.append(x)\n","\n","#     x = layers.Concatenate()(concat_list)\n","\n","#     hidden1 = layers.Dropout(dropoutRate)(x)\n","#     hidden1 = tfa.layers.WeightNormalization(\n","#         layers.Dense(64, activation=\"swish\", kernel_initializer=\"lecun_normal\")\n","#     )(hidden1)\n","    \n","#     hidden2 = layers.Dropout(dropoutRate)(layers.Concatenate()([x, hidden1]))\n","#     hidden2 = tfa.layers.WeightNormalization(\n","#         layers.Dense(64, activation=\"swish\", kernel_initializer=\"lecun_normal\")\n","#     )(hidden2)\n","    \n","#     hidden2 = layers.Dropout(dropoutRate)(layers.Concatenate()([x, hidden1, hidden2]))\n","#     last_layer = tfa.layers.WeightNormalization(\n","#         layers.Dense(64, activation=\"swish\", kernel_initializer=\"lecun_normal\")\n","#     )(hidden2)\n","\n","#     regressor = layers.Dense(1)(last_layer)\n","\n","#     return Model(input_list, regressor)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7MH90910qRMr"},"outputs":[],"source":["# create_model().summary()"]},{"cell_type":"markdown","metadata":{"id":"r_D3XYVryFls"},"source":["# Training & Inference"]},{"cell_type":"markdown","metadata":{"id":"6cHx7NrKZxum"},"source":["**define model name**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gXddXxInZsKu"},"outputs":[],"source":["# model_name = \"swin_try1\" -> poor\n","# model_name = \"dropNA_swin_meta_discreteDCN_try2\"\n","# model_name = \"knnRandomnormalNA_swin_meta_discreteDCN_LSTM_try3\"\n","# model_name = \"knnRandomnormalNA_swin_onlyCAT_LSTM_try2\"\n","# model_name = \"knnRandomnormalNA_swin_LSTM_try2\" -> sota\n","# model_name = \"dropNA_swin_Dense_try1\"\n","# model_name = \"knnRandomnormalNA_swin_Dense_try1\"\n","# model_name = \"knnRandomnormalNA_swin_Dense_v2_try1\"\n","# model_name = \"knnRandomnormalNA_pretrainedSwin_Dense_v3_try1\"\n","model_name = \"knnRandomnormalNA_pretrainedSwin_Dense_fs6_v4_try1\"\n","# model_name = \"knnRandomnormalNA_pretrainedSwin_LSTM_v1_try1\"\n","# model_name = \"knnRandomnormalNA_pretrainedBiT_Dense_v1_try1\"\n","# model_name = \"knnRandomnormalNA_pretrainedEffiV2_Dense_v1_try1\"\n","# model_name = \"knnRandomnormalNA_resedualDense_bit_meta_discreteDCN_LSTM_try1\"\n","# model_name = \"knnRandomnormalNA_bit_meta_discreteDCN_LSTM_try1\"\n","# model_name = \"knnRandomnormalNA_simpleCNN_meta_discreteDCN_LSTM_try1\"\n","# model_name = \"randomnormalNA_swin_meta_discreteDCN_try2\" -> poor\n","createFolder(os.path.join(folder_path, \"architectures/\" + model_name))\n","# plot_model(create_model(), to_file=folder_path + \"architectures/\" + model_name + \"/plot_model.png\", show_shapes=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gXLZ2Eae0GBh"},"outputs":[],"source":["def get_sample_weight(x, strategy=\"inverse_frequency\", class_transfrom=True, class_bins=10, boxcox_lambda=0.25):\n","    if strategy == \"inverse_frequency\":\n","        # x = pd.cut(x, bins=10).astype(\"object\") if class_transfrom else x\n","        # x = x.apply(lambda x: str(x))\n","        cluster_kmeans = KMeans(n_clusters=class_bins, random_state=42).fit(x)\n","        x = series(cluster_kmeans.predict(full_y))\n","        sample_weight = boxcox(1 / x.value_counts(True).sort_index(), boxcox_lambda)   \n","        sample_weight = dataframe([sample_weight[i] for i in x]).astype(\"float32\")\n","        return (sample_weight / sample_weight.min(), x)\n","def read_image(x):\n","    image = tf.io.read_file(x)\n","    image = tf.io.decode_image(image, channels=channels, expand_animations=False)\n","    image = tf.cast(image, tf.float32)\n","    # image = tf.image.central_crop(image, 0.8)\n","    image = tf.image.resize_with_pad(image, img_size, img_size, antialias=True)\n","    return image\n","def get_leaf_area(x):\n","    # only leaf : lower=(25,0,0), upper=(90,255,180)\n","    # only wilted : lower=(10,0,90), upper=(30,255,255)\n","\n","    # 이미지 로드\n","    img = cv2.imread(x)\n","    # 사이즈 변환 (cv2.resize 오류로 인해 tensorflow resize 함수 이용)\n","    img = cv2.resize(img, (img_size, img_size))\n","    # img = tf.image.resize_with_pad(img, img_size, img_size, antialias=True).numpy()\n","    # cv2의 이미지포맷을 RGB로 변환\n","    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n","\n","    # 이미지 포맷을 HSV로 변환\n","    img_hsv = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)\n","    # mask를 생성하기 위해 hsv 포맷의 이미지가 해당 lower upper 범위에 있는지 확인\n","    img_mask_leaf = cv2.inRange(img_hsv, (25,0,0), (90,255,180))\n","    img_mask_wilted = cv2.inRange(img_hsv, (10,0,90), (30,255,255))\n","    # bitwise 연산을 통해 추출된 이미지 확인\n","    img_leaf = cv2.bitwise_and(img, img, mask=img_mask_leaf)\n","    img_wilted = cv2.bitwise_and(img, img, mask=img_mask_wilted)\n","    img_wilted[img_leaf != 0.0] = 0.0\n","\n","    # 일반 rgb input 으로 변환\n","    return (img_leaf + img_wilted).astype(\"float32\") / 255.0\n","def create_dataset(x, y, batch_size, shuffle=True, sample_weight=None):\n","    # if sample_weight is not None:\n","    #     dataset = tf.data.Dataset.from_tensor_slices((x, y, sample_weight))\n","    #     dataset = dataset.map(lambda x, y, sample_weight: (read_image(x), y, sample_weight))\n","    # else:\n","    #     dataset = tf.data.Dataset.from_tensor_slices((x, y))\n","    #     dataset = dataset.map(lambda x, y: (read_image(x), y))\n","    if sample_weight is not None:\n","        dataset = tf.data.Dataset.from_tensor_slices((x, y, sample_weight))\n","        dataset = dataset.map(lambda x, y, sample_weight: ((read_image(x[0]), x[1:]), y, sample_weight))\n","    else:\n","        dataset = tf.data.Dataset.from_tensor_slices((x, y))\n","        dataset = dataset.map(lambda x, y: ((read_image(x[0]), x[1:]), y))\n","    # if sample_weight is not None:\n","    #     dataset = tf.data.Dataset.from_tensor_slices((x, y, sample_weight))\n","    #     dataset = dataset.map(lambda x, y, sample_weight: ((get_leaf_area(x[0]), x[1:]), y, sample_weight))\n","    # else:\n","    #     dataset = tf.data.Dataset.from_tensor_slices((x, y))\n","    #     dataset = dataset.map(lambda x, y: ((get_leaf_area(x[0]), x[1:]), y))\n","    dataset = dataset.shuffle(int(batch_size * 4), reshuffle_each_iteration=True) if shuffle else dataset\n","    dataset = dataset.batch(batch_size)\n","    dataset = dataset.prefetch(2)\n","    return dataset\n","def shape_check_on_tuple(x, check_num_features):\n","    return sum([i.shape[-1] for i in x]) == check_num_features\n","def tf_metrics_nmae(y_true, y_pred):\n","    mae = tf.reduce_mean(tf.math.abs(y_true - y_pred))\n","    return tf.math.divide(mae, tf.reduce_mean(tf.math.abs(y_true)))\n","def tf_metrics_nmae_log(y_true, y_pred):\n","    mae = tf.reduce_mean(tf.math.abs(tf.math.expm1(y_true) - tf.math.expm1(y_pred)))\n","    return tf.math.divide(mae, tf.reduce_mean(tf.math.abs(tf.math.expm1(y_true))))\n","def get_nmae(y_true, y_pred):\n","    mae = np.mean(np.abs(y_true - y_pred))\n","    return mae / np.mean(np.abs(y_true))\n","def warmup_scheduler(epoch, lr):\n","  if epoch < 1:\n","    return 1e-2\n","  elif epoch == 1:\n","    return 1e-3\n","  else:\n","    return lr\n","class SetFinetuningMode(tf.keras.callbacks.Callback):\n","    def on_epoch_begin(self, epoch, logs=None):\n","        if int(epochs * 0.8) == epoch:\n","            self.model.get_layer(name=\"pretrained\").trainable = True\n","            print(\"INFO : fine tuning on pretrained model\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3ctmAgAgsnJb"},"outputs":[],"source":["import multiprocessing as mp\n","\n","def mp_fn(procIdx, shared_dic, task_range):\n","    shared_dic[procIdx] = None\n","    tmp_img = np.zeros(shape=(len(task_range), img_size, img_size, channels))\n","    for idx, value in enumerate(task_range):\n","        try:\n","            tmp_img[idx] = get_leaf_area(value)\n","        except:\n","            print(\"frame error\")\n","    shared_dic[procIdx] = tmp_img\n","    print(\"process\", procIdx, \"finished\")\n","    return 0\n","\n","def get_image_withMP(total_task, workers=None):\n","    manager = mp.Manager()\n","    shared_dic = manager.dict()\n","    process_list = []\n","    workers = mp.cpu_count() if workers is None else workers\n","\n","    task_counter = 0\n","    for i in range(workers):\n","        if i == workers-1:\n","            task = total_task[(int(len(total_task) / workers) * i):]\n","            task_counter += len(task)\n","            print(f\"task progress : {task_counter} / {len(total_task)}\")\n","            tmp_proc = mp.Process(\n","                target=mp_fn,\n","                args=[i, shared_dic, task]\n","            )\n","        else:\n","            task = total_task[(int(len(total_task) / workers) * i):(int(len(total_task) / workers) * (i+1))]\n","            task_counter += len(task)\n","            print(f\"task progress : {task_counter} / {len(total_task)}\")\n","            tmp_proc = mp.Process(\n","                target=mp_fn,\n","                args=[i, shared_dic, task]\n","            )\n","        process_list.append(tmp_proc)                          \n","\n","    for i in process_list:\n","        i.start()\n","\n","    for i in process_list:\n","        # 해당 프로세스에게 명령한 funtion이 종료될 때 까지 기다림\n","        i.join()\n","\n","    for i in process_list:\n","        i.close()\n","\n","    result_array = []\n","    for i in range(workers):\n","        result_array.append(shared_dic[i])\n","\n","    return np.concatenate(result_array, axis=0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LOfCGOHa6UGF"},"outputs":[],"source":["def do_fold_training(fold, train_idx, val_idx, sample_weight=None, finetuning=False):\n","    tmp_time = time()\n","    print(\"\\n===== Fold\", fold, \"=====\\n\")\n","\n","    global scaler_list, lstm_scaler_list\n","    lstm_scaler_list.append(MinMaxScaler(feature_range=(0.0, 1.0)))\n","    lstm_scaler_list[-1].fit(np.concatenate([i[:, 0:len(num_vars)] for i in train_timeseries[train_idx]], axis=0))\n","\n","    # ===== train =====\n","    # # LSTM features - only cat\n","    # # lstm_num = np.concatenate([lstm_scaler_list[-1].transform(i[:, 0:len(num_vars)])[np.newaxis, ...] for i in train_timeseries[train_idx]], axis=0)\n","    # # lstm_bin = np.concatenate([i[:, len(num_vars)+len(cat_vars):len(num_vars)+len(cat_vars)+len(bin_vars)][np.newaxis, ...] for i in train_timeseries[train_idx]], axis=0)\n","    # lstm_cat = tuple([np.concatenate([j[np.newaxis, :, i:(i+1)] for j in train_timeseries[train_idx]], axis=0) for i in range(len(num_vars), len(num_vars)+len(cat_vars))])\n","    # tmp_x = (\n","    #     full_x_img.iloc[train_idx].apply(lambda x: get_image_path(x, train=True)),\n","    # ) \\\n","    # + lstm_cat\n","\n","    # tmp_img = np.zeros(shape=(len(train_idx), img_size, img_size, channels))\n","    # for idx, value in enumerate(full_x_img.iloc[train_idx].apply(lambda x: get_image_path(x, train=True))):\n","    #     tmp_img[idx] = get_leaf_area(value)\n","\n","    # LSTM features - log trans, batch normalization\n","    lstm_num = np.concatenate([lstm_scaler_list[-1].transform(i[:, 0:len(num_vars)])[np.newaxis, ...] for i in train_timeseries[train_idx]], axis=0)\n","    lstm_bin = np.concatenate([i[:, len(num_vars)+len(cat_vars):len(num_vars)+len(cat_vars)+len(bin_vars)][np.newaxis, ...] for i in train_timeseries[train_idx]], axis=0)\n","    lstm_cat = tuple([np.concatenate([j[np.newaxis, :, i:(i+1)] for j in train_timeseries[train_idx]], axis=0) for i in range(len(num_vars), len(num_vars)+len(cat_vars))])\n","    tmp_x = (\n","        full_x_img.iloc[train_idx].apply(lambda x: get_image_path(x, train=True)),\n","        # get_image_withMP(full_x_img.iloc[train_idx].apply(lambda x: get_image_path(x, train=True))),\n","    ) \\\n","    + (lstm_num,) \\\n","    + (lstm_bin,) \\\n","    + lstm_cat\n","\n","    if not shape_check_on_tuple((lstm_num, lstm_bin) + lstm_cat, train_timeseries.shape[-1]):\n","        raise ValueError(\"shape not matched : expected\", train_timeseries.shape[-1])\n","\n","    # # LSTM features - log trans, batch normalization\n","    # lstm_num = np.concatenate([lstm_scaler_list[-1].transform(i[:, 0:len(num_vars)])[np.newaxis, ...] for i in train_timeseries[train_idx]], axis=0)\n","    # lstm_bin = np.concatenate([i[:, len(num_vars)+len(cat_vars):len(num_vars)+len(cat_vars)+len(bin_vars)][np.newaxis, ...] for i in train_timeseries[train_idx]], axis=0)\n","    # lstm_cat = tuple([np.concatenate([j[np.newaxis, :, i:(i+1)] for j in train_timeseries[train_idx]], axis=0) for i in range(len(num_vars), len(num_vars)+len(cat_vars))])\n","    # tmp_x = (\n","    #     full_x_img.iloc[train_idx].apply(lambda x: get_image_path(x, train=True)),\n","    # ) \\\n","    # + (lstm_num,) \\\n","    # + (lstm_bin,) \\\n","    # + lstm_cat\n","\n","    # if not shape_check_on_tuple((lstm_num, lstm_bin) + lstm_cat, train_timeseries.shape[-1]):\n","    #     raise ValueError(\"shape not matched : expected\", train_timeseries.shape[-1])\n","\n","    # # all features\n","    # lstm_num = np.concatenate([lstm_scaler_list[-1].transform(i[:, 0:len(num_vars)])[np.newaxis, ...] for i in train_timeseries[train_idx]], axis=0)\n","    # lstm_cat = tuple([np.concatenate([j[np.newaxis, :, i:(i+1)] for j in train_timeseries[train_idx]], axis=0) for i in range(len(num_vars), len(num_vars) * 2)])\n","    # tmp_x = (\n","    #     full_x.iloc[train_idx][\"id\"].apply(lambda x: get_image_path(x, train=True)),\n","    #     scaler_list[-1].transform(full_x.iloc[train_idx][num_vars]).astype(\"float32\"),\n","    # ) \\\n","    # + tuple([full_x.iloc[train_idx][[i[0]]] for i in ct._transformers]) \\\n","    # + (lstm_num,) \\\n","    # + lstm_cat\n","    tmp_y = full_y.iloc[train_idx][[target_var]]\n","    train_ds = create_dataset(tmp_x, tmp_y, batch_size, True, sample_weight)\n","\n","    # ===== validation =====\n","    # # LSTM features - only cat\n","    # # lstm_num = np.concatenate([lstm_scaler_list[-1].transform(i[:, 0:len(num_vars)])[np.newaxis, ...] for i in train_timeseries[val_idx]], axis=0)\n","    # # lstm_bin = np.concatenate([i[:, len(num_vars)+len(cat_vars):len(num_vars)+len(cat_vars)+len(bin_vars)][np.newaxis, ...] for i in train_timeseries[val_idx]], axis=0)\n","    # lstm_cat = tuple([np.concatenate([j[np.newaxis, :, i:(i+1)] for j in train_timeseries[val_idx]], axis=0) for i in range(len(num_vars), len(num_vars)+len(cat_vars))])\n","    # tmp_x = (\n","    #     full_x_img[val_idx].apply(lambda x: get_image_path(x, train=True)),\n","    # ) \\\n","    # + lstm_cat\n","\n","    # tmp_img = np.zeros(shape=(len(val_idx), img_size, img_size, channels))\n","    # for idx, value in enumerate(full_x_img.iloc[val_idx].apply(lambda x: get_image_path(x, train=True))):\n","    #     tmp_img[idx] = get_leaf_area(value)\n","\n","    # LSTM features - log trans, batch normalization\n","    lstm_num = np.concatenate([lstm_scaler_list[-1].transform(i[:, 0:len(num_vars)])[np.newaxis, ...] for i in train_timeseries[val_idx]], axis=0)\n","    lstm_bin = np.concatenate([i[:, len(num_vars)+len(cat_vars):len(num_vars)+len(cat_vars)+len(bin_vars)][np.newaxis, ...] for i in train_timeseries[val_idx]], axis=0)\n","    lstm_cat = tuple([np.concatenate([j[np.newaxis, :, i:(i+1)] for j in train_timeseries[val_idx]], axis=0) for i in range(len(num_vars), len(num_vars)+len(cat_vars))])\n","    tmp_x = (\n","        full_x_img[val_idx].apply(lambda x: get_image_path(x, train=True)),\n","        # get_image_withMP(full_x_img[val_idx].apply(lambda x: get_image_path(x, train=True))),\n","    ) \\\n","    + (lstm_num,) \\\n","    + (lstm_bin,) \\\n","    + lstm_cat\n","\n","    if not shape_check_on_tuple((lstm_num, lstm_bin) + lstm_cat, train_timeseries.shape[-1]):\n","        raise ValueError(\"shape not matched : expected\", train_timeseries.shape[-1])\n","\n","    # # all features\n","    # lstm_num = np.concatenate([lstm_scaler_list[-1].transform(i[:, 0:len(num_vars)])[np.newaxis, ...] for i in train_timeseries[val_idx]], axis=0)\n","    # lstm_cat = tuple([np.concatenate([j[np.newaxis, :, i:(i+1)] for j in train_timeseries[val_idx]], axis=0) for i in range(len(num_vars), len(num_vars) * 2)])\n","    # tmp_x = (\n","    #     full_x.iloc[val_idx][\"id\"].apply(lambda x: get_image_path(x, train=True)),\n","    #     scaler_list[-1].transform(full_x.iloc[val_idx][num_vars]).astype(\"float32\")\n","    # ) \\\n","    # + tuple([full_x.iloc[val_idx][[i[0]]] for i in ct._transformers]) \\\n","    # + (lstm_num,) \\\n","    # + lstm_cat\n","\n","    tmp_y = full_y.iloc[val_idx][[target_var]]\n","    val_ds = create_dataset(tmp_x, tmp_y, batch_size, False)\n","    del lstm_num, lstm_bin, lstm_cat, tmp_x, tmp_y\n","    # del lstm_cat, tmp_x, tmp_y\n","\n","    cb_tensorboard = tf_callbacks.TensorBoard(log_dir=tb_filepath, histogram_freq=1)\n","    \n","    try:\n","        wandb.tensorboard.patch(root_logdir=tb_filepath)\n","    except:\n","        pass\n","    wandb.init(\n","        project=\"dacon_plant_leaf_weight\",\n","        group=model_name,\n","        name=\"fold_\" + str(fold)\n","    ); wandb.config.step = 0\n","\n","\n","    total_iter = int(np.ceil(train_idx.shape[0] / batch_size) * epochs)\n","    SCHEDULE_BOUNDARIES = [int(total_iter*0.1), int(total_iter*0.2), int(total_iter*0.4), int(total_iter*0.6), int(total_iter*0.8)]\n","    lr_schedule = tf.keras.optimizers.schedules.PiecewiseConstantDecay(\n","        boundaries=SCHEDULE_BOUNDARIES,\n","        values=[3e-3, 1e-3, 5e-4, 1e-4, 5e-5, 1e-5],\n","    )\n","\n","    cb_earlyStopping = tf_callbacks.EarlyStopping(patience=patient_epochs, monitor='val_tf_metrics_nmae_log', mode='min')\n","    # cb_reduceLR = tf_callbacks.ReduceLROnPlateau(patience=patient_lr, factor=0.5, min_lr=1e-5)\n","    # cb_LRscheduler = tf_callbacks.LearningRateScheduler(warmup_scheduler)\n","    # cb_modelsave = tf_callbacks.ModelCheckpoint(filepath=checkpoint_filepath, monitor='val_loss', mode='min',\n","    #                                 save_weights_only=False, save_best_only=True, options=tf.saved_model.SaveOptions(namespace_whitelist=list(custom_object_whitelist.keys())))\n","    cb_modelsave = tf_callbacks.ModelCheckpoint(filepath=checkpoint_filepath, monitor='val_tf_metrics_nmae_log', mode='min',\n","                                    save_weights_only=True, save_best_only=True)\n","    # cb_finetuning = SetFinetuningMode()\n","\n","    model = create_model()\n","    model.compile(\n","        loss=tf.keras.losses.MeanAbsoluteError(),\n","        # loss=tf_losses_rmse,\n","        # loss=tf.keras.losses.MeanSquaredLogarithmicError(),\n","        optimizer=tfa.optimizers.AdamW(learning_rate=lr_schedule, weight_decay=weight_decay),\n","        metrics=[tf_metrics_nmae_log]\n","    )\n","    \n","    print(\"start training\")\n","    history = model.fit(train_ds, validation_data=val_ds, epochs=epochs, verbose=0,\n","            callbacks=[cb_modelsave, cb_earlyStopping, cb_tensorboard, TqdmCallback(verbose=1)])\n","    print(\"end training\")\n","\n","    # # ===== fine tuning =====\n","    # cb_modelsave = tf_callbacks.ModelCheckpoint(filepath=checkpoint_filepath, monitor='val_tf_metrics_nmae_log', mode='min',\n","    #                                     save_weights_only=True, save_best_only=True)\n","    \n","    # model.trainable = True\n","    # # model.get_layer(name=\"pretrained\").trainable = True\n","    # model.compile(\n","    #     # loss=tf.keras.losses.MeanAbsoluteError(),\n","    #     loss=tf_losses_rmse,\n","    #     optimizer=tf.keras.optimizers.SGD(learning_rate=1e-6, momentum=0.9),\n","    #     metrics=[tf_metrics_nmae_log]\n","    # )\n","    # print(\"start fine tuning\")\n","    # model.fit(train_ds, validation_data=val_ds, epochs=epochs_finetuning, verbose=0,\n","    #         callbacks=[cb_modelsave, TqdmCallback(verbose=1)])\n","    # print(\"end fine tuning\")\n","\n","    # if finetuning:\n","    #     del model, train_ds, val_ds\n","    #     tf.keras.backend.clear_session()\n","    #     gc.collect()\n","    #     model = create_model()\n","    #     model.load_weights(checkpoint_filepath)\n","\n","    #     lstm_num = np.concatenate([lstm_scaler_list[-1].transform(i[:, 0:len(num_vars)])[np.newaxis, ...] for i in train_timeseries[train_idx]], axis=0)\n","    #     lstm_bin = np.concatenate([i[:, len(num_vars)+len(cat_vars):len(num_vars)+len(cat_vars)+len(bin_vars)][np.newaxis, ...] for i in train_timeseries[train_idx]], axis=0)\n","    #     lstm_cat = tuple([np.concatenate([j[np.newaxis, :, i:(i+1)] for j in train_timeseries[train_idx]], axis=0) for i in range(len(num_vars), len(num_vars)+len(cat_vars))])\n","    #     tmp_x = (\n","    #         full_x_img.iloc[train_idx].apply(lambda x: get_image_path(x, train=True)),\n","    #     ) \\\n","    #     + (lstm_num,) \\\n","    #     + (lstm_bin,) \\\n","    #     + lstm_cat\n","    #     tmp_y = full_y.iloc[train_idx][[target_var]]\n","    #     train_ds = create_dataset(tmp_x, tmp_y, batch_size, True, sample_weight)\n","\n","    #     lstm_num = np.concatenate([lstm_scaler_list[-1].transform(i[:, 0:len(num_vars)])[np.newaxis, ...] for i in train_timeseries[val_idx]], axis=0)\n","    #     lstm_bin = np.concatenate([i[:, len(num_vars)+len(cat_vars):len(num_vars)+len(cat_vars)+len(bin_vars)][np.newaxis, ...] for i in train_timeseries[val_idx]], axis=0)\n","    #     lstm_cat = tuple([np.concatenate([j[np.newaxis, :, i:(i+1)] for j in train_timeseries[val_idx]], axis=0) for i in range(len(num_vars), len(num_vars)+len(cat_vars))])\n","    #     tmp_x = (\n","    #         full_x_img[val_idx].apply(lambda x: get_image_path(x, train=True)),\n","    #     ) \\\n","    #     + (lstm_num,) \\\n","    #     + (lstm_bin,) \\\n","    #     + lstm_cat\n","    #     tmp_y = full_y.iloc[val_idx][[target_var]]\n","    #     val_ds = create_dataset(tmp_x, tmp_y, batch_size, False)\n","    #     del lstm_num, lstm_bin, lstm_cat, tmp_x, tmp_y\n","\n","    #     total_iter = int(np.ceil(train_idx.shape[0] / batch_size) * epochs_finetuning)\n","    #     SCHEDULE_BOUNDARIES = [int(total_iter*0.1), int(total_iter*0.3), int(total_iter*0.6), int(total_iter*0.9)]\n","    #     lr_schedule = tf.keras.optimizers.schedules.PiecewiseConstantDecay(\n","    #         boundaries=SCHEDULE_BOUNDARIES,\n","    #         values=[1e-5, 5e-6, 1e-6, 5e-7, 1e-7],\n","    #     )\n","    \n","    #     cb_modelsave = tf_callbacks.ModelCheckpoint(filepath=checkpoint_filepath, monitor='loss', mode='min',\n","    #                                         save_weights_only=True, save_best_only=True)\n","        \n","    #     model.trainable = True\n","    #     # model.get_layer(name=\"pretrained\").trainable = True\n","    #     model.compile(\n","    #         loss=tf.keras.losses.MeanAbsoluteError(),\n","    #         # loss=tf_losses_rmse,\n","    #         optimizer=tf.keras.optimizers.SGD(learning_rate=lr_schedule, momentum=0.9),\n","    #         metrics=[tf_metrics_nmae_log]\n","    #     )\n","    #     print(\"start fine tuning\")\n","    #     model.fit(train_ds, validation_data=val_ds, epochs=epochs_finetuning, verbose=0,\n","    #             callbacks=[cb_modelsave, TqdmCallback(verbose=1)])\n","    #     print(\"end fine tuning\")\n","    \n","    model.load_weights(checkpoint_filepath)\n","    model.trainable = False\n","    # model_list.append(model)\n","    history_list.append(history)\n","    \n","    fold_metric.append(model.evaluate(val_ds, return_dict=True, verbose=0))\n","    print(fold_metric[-1])\n","    global val_pred\n","    val_pred[val_idx, 0] += model.predict(val_ds)[:, 0]\n","    del train_ds, val_ds\n","\n","    # ===== test =====\n","    # # LSTM feature - log trans, batch normalization\n","    # # lstm_num = np.concatenate([lstm_scaler_list[-1].transform(i[:, 0:len(num_vars)])[np.newaxis, ...] for i in test_timeseries], axis=0)\n","    # # lstm_bin = np.concatenate([i[:, len(num_vars)+len(cat_vars):len(num_vars)+len(cat_vars)+len(bin_vars)][np.newaxis, ...] for i in test_timeseries], axis=0)\n","    # lstm_cat = tuple([np.concatenate([j[np.newaxis, :, i:(i+1)] for j in test_timeseries], axis=0) for i in range(len(num_vars), len(num_vars)+len(cat_vars))])\n","    # tmp_x = (\n","    #     test_x_img.apply(lambda x: get_image_path(x, train=False)),\n","    # ) \\\n","    # + lstm_cat\n","    \n","    # tmp_img = np.zeros(shape=(len(test_x_img.shape[0]), img_size, img_size, channels))\n","    # for idx, value in enumerate(test_x_img.apply(lambda x: get_image_path(x, train=False))):\n","    #     tmp_img[idx] = get_leaf_area(value)\n","\n","    # LSTM feature - log trans, batch normalization\n","    lstm_num = np.concatenate([lstm_scaler_list[-1].transform(i[:, 0:len(num_vars)])[np.newaxis, ...] for i in test_timeseries], axis=0)\n","    lstm_bin = np.concatenate([i[:, len(num_vars)+len(cat_vars):len(num_vars)+len(cat_vars)+len(bin_vars)][np.newaxis, ...] for i in test_timeseries], axis=0)\n","    lstm_cat = tuple([np.concatenate([j[np.newaxis, :, i:(i+1)] for j in test_timeseries], axis=0) for i in range(len(num_vars), len(num_vars)+len(cat_vars))])\n","    tmp_x = (\n","        test_x_img.apply(lambda x: get_image_path(x, train=False)),\n","        # get_image_withMP(test_x_img.apply(lambda x: get_image_path(x, train=False))),\n","    ) \\\n","    + (lstm_num,) \\\n","    + (lstm_bin,) \\\n","    + lstm_cat\n","\n","    if not shape_check_on_tuple((lstm_num, lstm_bin) + lstm_cat, train_timeseries.shape[-1]):\n","        raise ValueError(\"shape not matched : expected\", train_timeseries.shape[-1])\n","    \n","    # # all feature\n","    # lstm_num = np.concatenate([lstm_scaler_list[-1].transform(i[:, 0:len(num_vars)])[np.newaxis, ...] for i in test_timeseries], axis=0)\n","    # lstm_cat = tuple([np.concatenate([j[np.newaxis, :, i:(i+1)] for j in test_timeseries], axis=0) for i in range(len(num_vars), len(num_vars) * 2)])\n","    # tmp_x = (\n","    #     test_x[\"id\"].apply(lambda x: get_image_path(x, train=False)),\n","    #     scaler_list[-1].transform(test_x[num_vars]).astype(\"float32\")\n","    # ) \\\n","    # + tuple([test_x[[i[0]]] for i in ct._transformers]) \\\n","    # + (lstm_num,) \\\n","    # + lstm_cat\n","\n","    tmp_y = None\n","    test_ds = create_dataset(tmp_x, tmp_y, batch_size, False)\n","\n","    pred = model.predict(test_ds)\n","    global result_pred\n","    result_pred += np.expm1(pred) / n_folds\n","    \n","    val_nmae = get_nmae(np.expm1(full_y[target_var].iloc[val_idx].to_numpy()), np.expm1(val_pred[val_idx, 0]))\n","    print(\"NMAE :\", val_nmae)\n","\n","    wandb.log({\"fold\": fold,\n","               \"loss\": fold_metric[-1][\"loss\"],\n","               \"tf_metrics_nmae_log\": fold_metric[-1][\"tf_metrics_nmae_log\"],\n","               \"NMAE\": val_nmae})\n","    wandb.finish()\n","\n","    if os.path.exists(checkpoint_filepath):\n","        shutil.rmtree(checkpoint_filepath)\n","    if os.path.exists(tb_filepath):\n","        shutil.rmtree(tb_filepath)\n","\n","    print(\"Fold \" + str(fold) + \" Time (minutes) : \", round((time() - tmp_time) / 60, 3))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"daegVcyt0rLL"},"outputs":[],"source":["# learning parameter setting\n","epochs = 50\n","epochs_finetuning = 10\n","patient_epochs = 20\n","batch_size = 8\n","\n","optimizer_name = \"AdamW\"\n","eta = 1e-3\n","weight_decay = 1e-4\n","\n","checkpoint_filepath = './tmp_checkpoint/'\n","tb_filepath = \"./tmp_tb/\"\n","custom_object_whitelist = {\"KerasLayer\": tf_hub.KerasLayer, \"RandomColorDistortion\": RandomColorDistortion, \"tf_metrics_nmae_log\": tf_metrics_nmae_log}\n","\n","val_pred = np.zeros(shape=(full_x_img.shape[0], 1))\n","result_pred = np.zeros(shape=(test_x_img.shape[0], 1))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9JjgNTFTGmES"},"outputs":[],"source":["# # knn_scaler = MinMaxScaler()\n","# sil = []\n","# kmax = 20\n","\n","# # dissimilarity would not be defined for a single cluster, thus, minimum number of clusters should be 2\n","# for k in range(2, kmax+1):\n","#     model_kmeans = skl_kmeans(n_clusters=k, random_state=42)\n","#     model_kmeans.fit(np.expm1(full_y))\n","#     sil.append(skl_silhouette_score(np.expm1(full_y), model_kmeans.labels_, metric='euclidean'))\n","# print(series(sil, index=range(2, kmax+1)).sort_index(ascending=True))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FHCgSezXtNXu"},"outputs":[],"source":["# knn_scaler = MinMaxScaler()\n","# best k = 7\n","model_kmeans = skl_kmeans(n_clusters=7, random_state=42)\n","strat_vec = model_kmeans.fit(np.expm1(full_y)).labels_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kh25gk2Szb0Y"},"outputs":[],"source":["# sample_weight = np.ones(shape=full_x_img.shape[0])\n","# sample_weight[np.expm1(full_y[\"target\"]) < 1] = 1.2"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["4e5ec57a55dc46a3a8c80cf985a2f1f6","83d69132fb004c7d9bda2a423ca10d02","f6cc04b9eded437084a61bde5948e8cd","4ee5607411d64b9ba0c4aca894e1a6ce","0aacee0a6349440eae8f418807a6821c","39fbe11b570e418daa54d922287049f0","0009fa728de545579ab48e9efc5d1dbd","f79e30a101f24435834de19cdce2653f","40825d046b1d42a588763d91e5861b6d","ba1a97f5d24d489f951921fcbd2b72a8","cede3306317c442eb4ec226b2cb23cee","a3312f2eb06344da81735e4bc27547d3","d1c8177690c84c5d86b959f3e285796c","4c7a7888225243adb1f41210ba9e4928","d612772b51cb46a4b558092b310afeeb","88c588eb93b94f349753e2b5c82f1ce4","ea6cf38a87a6411c9439711e2b2fdd94","3b4569202a4d44ba8d39fd646ccb3c71","68f6c650c3dc4116b0638fce6741e376","8db43715c0d247bfa48f8e4f088b5af8","2a5bd5d45b534538aea60615c8047bc3","fe0ffc77140f4a43a38e19d0e7f07f05","eb31e896d2b246ae93e9607a25745651","0ebb76a124c647b49fd17f7de31d6c0d","0a5b0a76ec584de3895ce26a4af5bc5b","eafaf94d08344829b18bcbe0e9e7f374","da823f9dec8b469c8ebea937f8f55d17","abf4ac2becf94683a376399afd1da818","67cccc9046c841eb9544eb9d2a53d793","0601024d9a9648d0a7cc9287362b732f","e4f40e3c945042a1a47f4f03ff748b83","d76730160df841c0b4feb2c40b5f2e24","3c7a52c7840e4140b397092de9e53c48","0e6879ee4c9a4d8c82360674b18babff","d2a2338000314196947229f4aa664b59","ffca8e3c8add4a81b5fb4ff5cba26d3d","33027c77c0e644938c96d516c918f1cb","70831916f31d41d38fbfa7dcc07108a0","e904060afae04c36953c7987a5d1ec75","1462ca5c43d7475a8b2c7b042d4ae3cd","8370a93e9e7947b4bd2fbf2ac2cb2c8d","22d5a81f6ddb4095a15b85c920d72c94","a339a8e276ae42faa0114fb27fd94c9a","1b4c4698eae0417fb8252b3725ec7d93","0f19c7a8806842b8ac1bbc280fcb80fb","53eaa99da42b49e29cc16d8ee6871741","834060787ee74dcba11d68702d94ed50","ed100f4b1de54f35887b64740b1bbc27","01abb9d5ae2c4d44b8d2963f1b92d45b","9f4ab5ac7e2e4a1fa7e95c6c213aedc0","ca0f281951c4438d8ae04127ad6fd87e","dee5700b7c2b4b2fb4fc2fef88af3d4d","5c49c481f2fc4700b55acab5e27b0647","94dd09db5be04a9a8a4ef589de22e08b","fe8a027c04d54ece8f0008d584f03bc8","026c51129ebc46a4b75b4ae71182ac03","d6b3a5c3e3ce4ddc8a551227cab1f61b","7bff99b2022c447982d5eef72d37ef69","8c092da932834f82961113b982e03e94","6324cba1105c4275974c99afc4dba495"]},"id":"mwuIx4ET0rJG","outputId":"09b0f3ce-43b1-42b6-c5bf-226c289ab92b"},"outputs":[{"name":"stdout","output_type":"stream","text":["[debug] memory usage:   5029.809 MB\n","\n","===== Fold 0 =====\n","\n"]},{"data":{"text/html":["Finishing last run (ID:2ni8ttfh) before initializing another..."],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["Waiting for W&B process to finish... <strong style=\"color:green\">(success).</strong>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"4e5ec57a55dc46a3a8c80cf985a2f1f6","version_major":2,"version_minor":0},"text/plain":["VBox(children=(Label(value='0.001 MB of 0.001 MB uploaded (0.000 MB deduped)\\r'), FloatProgress(value=1.0, max…"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["Synced <strong style=\"color:#cdcd00\">fold_0</strong>: <a href=\"https://wandb.ai/frony/dacon_plant_leaf_weight/runs/2ni8ttfh\" target=\"_blank\">https://wandb.ai/frony/dacon_plant_leaf_weight/runs/2ni8ttfh</a><br/>Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 0 other file(s)"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["Find logs at: <code>./wandb/run-20220519_145300-2ni8ttfh/logs</code>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["Successfully finished last run (ID:2ni8ttfh). Initializing new run:<br/>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["Tracking run with wandb version 0.12.16"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["Run data is saved locally in <code>/content/wandb/run-20220519_145330-i83z3297</code>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["Syncing run <strong><a href=\"https://wandb.ai/frony/dacon_plant_leaf_weight/runs/i83z3297\" target=\"_blank\">fold_0</a></strong> to <a href=\"https://wandb.ai/frony/dacon_plant_leaf_weight\" target=\"_blank\">Weights & Biases</a> (<a href=\"https://wandb.me/run\" target=\"_blank\">docs</a>)<br/>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["start training\n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"40825d046b1d42a588763d91e5861b6d","version_major":2,"version_minor":0},"text/plain":["0epoch [00:00, ?epoch/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"8db43715c0d247bfa48f8e4f088b5af8","version_major":2,"version_minor":0},"text/plain":["0batch [00:00, ?batch/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["end training\n","{'loss': 0.192490816116333, 'tf_metrics_nmae_log': 0.16571426391601562}\n","NMAE : 0.17436284007650982\n"]},{"data":{"text/html":["Waiting for W&B process to finish... <strong style=\"color:green\">(success).</strong>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e4f40e3c945042a1a47f4f03ff748b83","version_major":2,"version_minor":0},"text/plain":["VBox(children=(Label(value='29.310 MB of 29.310 MB uploaded (0.000 MB deduped)\\r'), FloatProgress(value=1.0, m…"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<style>\n","    table.wandb td:nth-child(1) { padding: 0 10px; text-align: left ; width: auto;} td:nth-child(2) {text-align: left ; width: 100%}\n","    .wandb-row { display: flex; flex-direction: row; flex-wrap: wrap; justify-content: flex-start; width: 100% }\n","    .wandb-col { display: flex; flex-direction: column; flex-basis: 100%; flex: 1; padding: 10px; }\n","    </style>\n","<div class=\"wandb-row\"><div class=\"wandb-col\"><h3>Run history:</h3><br/><table class=\"wandb\"><tr><td>NMAE</td><td>▁</td></tr><tr><td>fold</td><td>▁</td></tr><tr><td>global_step</td><td>▁▁▁▂▂▂▂▂▂▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███</td></tr><tr><td>loss</td><td>▁</td></tr><tr><td>tf_metrics_nmae_log</td><td>▁</td></tr><tr><td>train/epoch_learning_rate</td><td>████▃▃▃▃▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>train/epoch_loss</td><td>█▄▃▃▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂</td></tr><tr><td>train/epoch_tf_metrics_nmae_log</td><td>█▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>train/global_step</td><td>▁▁▁▁▂▂▂▂▂▂▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▆▆▆▆▆▇▇▇▇▇▇▇███</td></tr><tr><td>validation/epoch_loss</td><td>▇█▃▇▃▂▃▂▃▃▂▃▂▂▃▂▂▂▂▁▂▂▁▁▂▂▂▂▁▁▁▁▂▂▂▂▂▂▂▂</td></tr><tr><td>validation/epoch_tf_metrics_nmae_log</td><td>▆▆▄█▃▄▃▂▃▂▂▂▂▁▂▁▂▂▁▁▁▂▁▂▂▂▂▂▂▁▂▁▃▂▂▃▃▃▃▃</td></tr><tr><td>validation/evaluation_loss_vs_iterations</td><td>▇█▃▇▃▂▃▂▃▃▂▃▂▂▃▂▂▂▂▁▂▂▁▁▂▂▂▂▁▁▁▁▂▂▂▂▂▂▂▂</td></tr><tr><td>validation/evaluation_tf_metrics_nmae_log_vs_iterations</td><td>▆▆▄█▃▄▃▂▃▂▂▂▂▁▂▁▂▂▁▁▁▂▁▂▂▂▂▂▂▁▂▁▃▂▂▃▃▃▃▃</td></tr><tr><td>validation/global_step</td><td>▁▁▁▁▁▁▂▂▁▁▁▃▁▃▁▁▁▁▁▁▁▁▅▁▅▁▁▁▁▁▁▁▁▇▁▁▁█▁▁</td></tr></table><br/></div><div class=\"wandb-col\"><h3>Run summary:</h3><br/><table class=\"wandb\"><tr><td>NMAE</td><td>0.17436</td></tr><tr><td>fold</td><td>0</td></tr><tr><td>global_step</td><td>7750</td></tr><tr><td>loss</td><td>0.19249</td></tr><tr><td>tf_metrics_nmae_log</td><td>0.16571</td></tr><tr><td>train/epoch_learning_rate</td><td>1e-05</td></tr><tr><td>train/epoch_loss</td><td>0.33361</td></tr><tr><td>train/epoch_tf_metrics_nmae_log</td><td>0.317</td></tr><tr><td>train/global_step</td><td>49</td></tr><tr><td>validation/epoch_loss</td><td>0.23426</td></tr><tr><td>validation/epoch_tf_metrics_nmae_log</td><td>0.21413</td></tr><tr><td>validation/evaluation_loss_vs_iterations</td><td>0.23426</td></tr><tr><td>validation/evaluation_tf_metrics_nmae_log_vs_iterations</td><td>0.21413</td></tr><tr><td>validation/global_step</td><td>49</td></tr></table><br/></div></div>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["Synced <strong style=\"color:#cdcd00\">fold_0</strong>: <a href=\"https://wandb.ai/frony/dacon_plant_leaf_weight/runs/i83z3297\" target=\"_blank\">https://wandb.ai/frony/dacon_plant_leaf_weight/runs/i83z3297</a><br/>Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 2 other file(s)"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["Find logs at: <code>./wandb/run-20220519_145330-i83z3297/logs</code>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Fold 0 Time (minutes) :  108.873\n","[debug] memory usage:   6926.684 MB\n","@Memory leaked : 1896.875\n","[debug] memory usage:   6926.684 MB\n","\n","===== Fold 1 =====\n","\n"]},{"data":{"text/html":["Tracking run with wandb version 0.12.16"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["Run data is saved locally in <code>/content/wandb/run-20220519_164224-xdeykw1i</code>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["Syncing run <strong><a href=\"https://wandb.ai/frony/dacon_plant_leaf_weight/runs/xdeykw1i\" target=\"_blank\">fold_1</a></strong> to <a href=\"https://wandb.ai/frony/dacon_plant_leaf_weight\" target=\"_blank\">Weights & Biases</a> (<a href=\"https://wandb.me/run\" target=\"_blank\">docs</a>)<br/>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["start training\n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e904060afae04c36953c7987a5d1ec75","version_major":2,"version_minor":0},"text/plain":["0epoch [00:00, ?epoch/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"9f4ab5ac7e2e4a1fa7e95c6c213aedc0","version_major":2,"version_minor":0},"text/plain":["0batch [00:00, ?batch/s]"]},"metadata":{},"output_type":"display_data"}],"source":["model_list = []\n","scaler_list = []\n","lstm_scaler_list = []\n","history_list = []\n","fold_metric = []\n","seed_everything()\n","\n","n_folds = 5\n","kfolds_spliter = StratifiedKFold(n_folds, shuffle=True, random_state=8282)\n","\n","start_time_training = time()\n","# fold training\n","for fold, (train_idx, val_idx) in enumerate(kfolds_spliter.split(range(full_y.shape[0]), strat_vec)):\n","    start_mem = memory_usage()\n","    do_fold_training(fold, train_idx, val_idx, None, finetuning=False)\n","    # do_fold_training(fold, train_idx[:35], val_idx[:35], None, finetuning=False)\n","    tf.keras.backend.clear_session()    \n","    gc.collect()\n","    end_mem = memory_usage()\n","    print(\"@Memory leaked :\", end_mem - start_mem)\n","    # break\n","end_time_training = time()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NnOGdKSOlbpw"},"outputs":[],"source":["tf.keras.backend.clear_session()\n","wandb.finish()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Vo1M2RH93L2V"},"outputs":[],"source":["val_pred = dataframe(val_pred)\n","val_pred.iloc[:,0][val_pred.iloc[:,0] <= 0] = (val_pred.iloc[:,0][val_pred.iloc[:,0] > 0]).min()\n","dataframe(val_pred).to_csv(folder_path + \"architectures/\" + model_name + \"/validationResult_\" + model_name + \".csv\", index=False)"]},{"cell_type":"markdown","metadata":{"id":"TcZzeIdsifNA"},"source":["# Submission"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zDsblek_S42T"},"outputs":[],"source":["submission = read_csv(folder_path + \"train_test_set/sample_submission.csv\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aPQ_MyH8CTZc"},"outputs":[],"source":["submission.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bP3lvRM74wgs"},"outputs":[],"source":["submission[\"leaf_weight\"] = result_pred[:,0]\n","submission[\"leaf_weight\"][submission[\"leaf_weight\"] <= 0] = (submission[\"leaf_weight\"][submission[\"leaf_weight\"] > 0]).min()\n","submission.to_csv(folder_path + \"architectures/\" + model_name + \"/testResult_\" + model_name + \".csv\", index=False)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zVk5QO_k3GWh"},"outputs":[],"source":["submission[\"leaf_weight\"].hist()"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["bi5RrJ13y11C","4kPoYaEW-VNV","1YabxNE7gPsR","JNEEXszigDeY","NAhgen7zgmM5","gVw1gnJSgDuR","N0VL1Z7a73Rc","LWHjrCl7MrEt","T8aMMvKUNReq","DJ_wQSHffv2d","-dneoNYlf0dp","HtEKbKWG7dnZ","Sv6hj7cT5PR5","dzczjMD_5UbD","ZGkufV4tegkg","TGKabM-UoSJh","Esnj5xBcY1DE","1Vupa1fD1IOe","oJJ6kLpfoAd1","33pkMS4RqQn0"],"machine_shape":"hm","name":"plant_leaf_weight_prediction","provenance":[],"authorship_tag":"ABX9TyNUCrNtkDICc3V1U6fMO/Wc"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"0009fa728de545579ab48e9efc5d1dbd":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"01abb9d5ae2c4d44b8d2963f1b92d45b":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"026c51129ebc46a4b75b4ae71182ac03":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"0601024d9a9648d0a7cc9287362b732f":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"0a5b0a76ec584de3895ce26a4af5bc5b":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0aacee0a6349440eae8f418807a6821c":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0e6879ee4c9a4d8c82360674b18babff":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0ebb76a124c647b49fd17f7de31d6c0d":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0f19c7a8806842b8ac1bbc280fcb80fb":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"1462ca5c43d7475a8b2c7b042d4ae3cd":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_1b4c4698eae0417fb8252b3725ec7d93","placeholder":"​","style":"IPY_MODEL_0f19c7a8806842b8ac1bbc280fcb80fb","value":"  4%"}},"1b4c4698eae0417fb8252b3725ec7d93":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"22d5a81f6ddb4095a15b85c920d72c94":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_ed100f4b1de54f35887b64740b1bbc27","placeholder":"​","style":"IPY_MODEL_01abb9d5ae2c4d44b8d2963f1b92d45b","value":" 2/50 [04:55&lt;1:55:15, 144.07s/epoch, loss=0.634, tf_metrics_nmae_log=0.925, val_loss=0.594, val_tf_metrics_nmae_log=0.528]"}},"2a5bd5d45b534538aea60615c8047bc3":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0a5b0a76ec584de3895ce26a4af5bc5b","placeholder":"​","style":"IPY_MODEL_eafaf94d08344829b18bcbe0e9e7f374","value":"100%"}},"33027c77c0e644938c96d516c918f1cb":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"39fbe11b570e418daa54d922287049f0":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"3b4569202a4d44ba8d39fd646ccb3c71":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"3c7a52c7840e4140b397092de9e53c48":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_33027c77c0e644938c96d516c918f1cb","max":1,"min":0,"orientation":"horizontal","style":"IPY_MODEL_70831916f31d41d38fbfa7dcc07108a0","value":1}},"40825d046b1d42a588763d91e5861b6d":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_ba1a97f5d24d489f951921fcbd2b72a8","IPY_MODEL_cede3306317c442eb4ec226b2cb23cee","IPY_MODEL_a3312f2eb06344da81735e4bc27547d3"],"layout":"IPY_MODEL_d1c8177690c84c5d86b959f3e285796c"}},"4c7a7888225243adb1f41210ba9e4928":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4e5ec57a55dc46a3a8c80cf985a2f1f6":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"VBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"VBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"VBoxView","box_style":"","children":["IPY_MODEL_83d69132fb004c7d9bda2a423ca10d02","IPY_MODEL_f6cc04b9eded437084a61bde5948e8cd"],"layout":"IPY_MODEL_4ee5607411d64b9ba0c4aca894e1a6ce"}},"4ee5607411d64b9ba0c4aca894e1a6ce":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"53eaa99da42b49e29cc16d8ee6871741":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5c49c481f2fc4700b55acab5e27b0647":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_8c092da932834f82961113b982e03e94","placeholder":"​","style":"IPY_MODEL_6324cba1105c4275974c99afc4dba495","value":" 35.0/155 [00:27&lt;01:09, 1.73batch/s, loss=0.513, tf_metrics_nmae_log=0.508]"}},"6324cba1105c4275974c99afc4dba495":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"67cccc9046c841eb9544eb9d2a53d793":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"68f6c650c3dc4116b0638fce6741e376":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"70831916f31d41d38fbfa7dcc07108a0":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"7bff99b2022c447982d5eef72d37ef69":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"834060787ee74dcba11d68702d94ed50":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"8370a93e9e7947b4bd2fbf2ac2cb2c8d":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_53eaa99da42b49e29cc16d8ee6871741","max":50,"min":0,"orientation":"horizontal","style":"IPY_MODEL_834060787ee74dcba11d68702d94ed50","value":2}},"83d69132fb004c7d9bda2a423ca10d02":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"LabelModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"LabelModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"LabelView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0aacee0a6349440eae8f418807a6821c","placeholder":"​","style":"IPY_MODEL_39fbe11b570e418daa54d922287049f0","value":"0.008 MB of 0.008 MB uploaded (0.000 MB deduped)\r"}},"88c588eb93b94f349753e2b5c82f1ce4":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8c092da932834f82961113b982e03e94":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8db43715c0d247bfa48f8e4f088b5af8":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_2a5bd5d45b534538aea60615c8047bc3","IPY_MODEL_fe0ffc77140f4a43a38e19d0e7f07f05","IPY_MODEL_eb31e896d2b246ae93e9607a25745651"],"layout":"IPY_MODEL_0ebb76a124c647b49fd17f7de31d6c0d"}},"94dd09db5be04a9a8a4ef589de22e08b":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9f4ab5ac7e2e4a1fa7e95c6c213aedc0":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_ca0f281951c4438d8ae04127ad6fd87e","IPY_MODEL_dee5700b7c2b4b2fb4fc2fef88af3d4d","IPY_MODEL_5c49c481f2fc4700b55acab5e27b0647"],"layout":"IPY_MODEL_94dd09db5be04a9a8a4ef589de22e08b"}},"a3312f2eb06344da81735e4bc27547d3":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_3b4569202a4d44ba8d39fd646ccb3c71","placeholder":"​","style":"IPY_MODEL_68f6c650c3dc4116b0638fce6741e376","value":" 50/50 [1:45:22&lt;00:00, 125.52s/epoch, loss=0.334, tf_metrics_nmae_log=0.317, val_loss=0.234, val_tf_metrics_nmae_log=0.214]"}},"a339a8e276ae42faa0114fb27fd94c9a":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"abf4ac2becf94683a376399afd1da818":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"ba1a97f5d24d489f951921fcbd2b72a8":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_4c7a7888225243adb1f41210ba9e4928","placeholder":"​","style":"IPY_MODEL_d612772b51cb46a4b558092b310afeeb","value":"100%"}},"ca0f281951c4438d8ae04127ad6fd87e":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_fe8a027c04d54ece8f0008d584f03bc8","placeholder":"​","style":"IPY_MODEL_026c51129ebc46a4b75b4ae71182ac03","value":" 23%"}},"cede3306317c442eb4ec226b2cb23cee":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_88c588eb93b94f349753e2b5c82f1ce4","max":50,"min":0,"orientation":"horizontal","style":"IPY_MODEL_ea6cf38a87a6411c9439711e2b2fdd94","value":50}},"d1c8177690c84c5d86b959f3e285796c":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d2a2338000314196947229f4aa664b59":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d612772b51cb46a4b558092b310afeeb":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"d6b3a5c3e3ce4ddc8a551227cab1f61b":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d76730160df841c0b4feb2c40b5f2e24":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"LabelModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"LabelModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"LabelView","description":"","description_tooltip":null,"layout":"IPY_MODEL_d2a2338000314196947229f4aa664b59","placeholder":"​","style":"IPY_MODEL_ffca8e3c8add4a81b5fb4ff5cba26d3d","value":"31.199 MB of 31.199 MB uploaded (0.000 MB deduped)\r"}},"da823f9dec8b469c8ebea937f8f55d17":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"dee5700b7c2b4b2fb4fc2fef88af3d4d":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_d6b3a5c3e3ce4ddc8a551227cab1f61b","max":155,"min":0,"orientation":"horizontal","style":"IPY_MODEL_7bff99b2022c447982d5eef72d37ef69","value":35}},"e4f40e3c945042a1a47f4f03ff748b83":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"VBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"VBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"VBoxView","box_style":"","children":["IPY_MODEL_d76730160df841c0b4feb2c40b5f2e24","IPY_MODEL_3c7a52c7840e4140b397092de9e53c48"],"layout":"IPY_MODEL_0e6879ee4c9a4d8c82360674b18babff"}},"e904060afae04c36953c7987a5d1ec75":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_1462ca5c43d7475a8b2c7b042d4ae3cd","IPY_MODEL_8370a93e9e7947b4bd2fbf2ac2cb2c8d","IPY_MODEL_22d5a81f6ddb4095a15b85c920d72c94"],"layout":"IPY_MODEL_a339a8e276ae42faa0114fb27fd94c9a"}},"ea6cf38a87a6411c9439711e2b2fdd94":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"eafaf94d08344829b18bcbe0e9e7f374":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"eb31e896d2b246ae93e9607a25745651":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_67cccc9046c841eb9544eb9d2a53d793","placeholder":"​","style":"IPY_MODEL_0601024d9a9648d0a7cc9287362b732f","value":" 155/155 [01:32&lt;00:00, 2.00batch/s, loss=0.334, tf_metrics_nmae_log=0.317]"}},"ed100f4b1de54f35887b64740b1bbc27":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f6cc04b9eded437084a61bde5948e8cd":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_0009fa728de545579ab48e9efc5d1dbd","max":1,"min":0,"orientation":"horizontal","style":"IPY_MODEL_f79e30a101f24435834de19cdce2653f","value":1}},"f79e30a101f24435834de19cdce2653f":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"fe0ffc77140f4a43a38e19d0e7f07f05":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_da823f9dec8b469c8ebea937f8f55d17","max":155,"min":0,"orientation":"horizontal","style":"IPY_MODEL_abf4ac2becf94683a376399afd1da818","value":155}},"fe8a027c04d54ece8f0008d584f03bc8":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ffca8e3c8add4a81b5fb4ff5cba26d3d":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"nbformat":4,"nbformat_minor":0}